00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 9/18/2022 5:53:50 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : DISASSEMBLER
00000000                             3  * Written by : Ani, Ashlyn, Evan, River
00000000                             4  *-----------------------------------------------------------
00000000                             5  
00000000                             6  
00001000                             7  START       ORG    $1000
00001000                             8  
00001000                             9  
00001000                            10  
00001000                            11  START_PRG 
00001000  4240                      12              CLR     D0
00001002  4241                      13              CLR     D1
00001004  4242                      14              CLR     D2
00001006  4243                      15              CLR     D3
00001008  4244                      16              CLR     D4
0000100A  4245                      17              CLR     D5         
0000100C  43F9 0000324E             18              LEA     DIRECTIONS,A1   * Loads first address prompt into A1
00001012  103C 000E                 19              MOVE.B  #14,D0          * Move 14 in D0 to prompt user
00001016  4E4F                      20              TRAP    #15             * Prompt user
00001018                            21              
00001018                            22               
00001018  43F9 0000328A             23              LEA     PROMPT1,A1      * Loads first address prompt into A1
0000101E  103C 000E                 24              MOVE.B  #14,D0          * Move 14 in D0 to prompt user
00001022  4E4F                      25              TRAP    #15             * Prompt user
00001024                            26     
00001024  227C 00000900             27              MOVE.L  #$900,A1       * NEW
0000102A  103C 0002                 28              MOVE.B  #2,D0           * Move 2 into D0
0000102E  4E4F                      29              TRAP    #15             * Read input from user and store it in A1
00001030                            30              
00001030  2049                      31              MOVEA.L A1,A0           * Move our first number recieved into A0
00001032                            32              
00001032  43F9 000032A2             33              LEA     PROMPT2,A1      * Loads second address prompt into A1
00001038  103C 000E                 34              MOVE.B  #14,D0          * Move 14 in D0 to prompt user
0000103C  4E4F                      35              TRAP    #15             * Prompt user
0000103E                            36              
0000103E  227C 00000910             37              MOVE.L  #$910,A1       * NEW
00001044  103C 0002                 38              MOVE.B  #2,D0           * Move 2 into D0
00001048  4E4F                      39              TRAP    #15             * Read input from user and store it in A1
0000104A                            40              
0000104A  183C 0000                 41              MOVE.B  #0,D4
0000104E  1A3C 0006                 42              MOVE.B  #6,D5
00001052                            43              
00001052                            44  *====================================================================
00001052                            45  *            Convert Ascii into Hex  (1st and 2nd Address)
00001052                            46  *====================================================================
00001052                            47  CONVERTHEX1        
00001052  4241                      48              CLR     D1              * Clear regiters to prepare for conversion
00001054  BA04                      49              CMP.B   D4,D5           * Check counter in D4 and D5, if counter = 4 we stop
00001056  6700 002C                 50              BEQ     INITHEX2
0000105A                            51              
0000105A  1218                      52              MOVE.B  (A0)+,D1        * Move our ascii byte into D1
0000105C  0C01 0040                 53              CMPI.B  #$40,D1         * Compare to 40 (if <40 = number OR if   >40 = character)
00001060  6D00 0006                 54              BLT     NUMBER1         * If < then convert as number
00001064  6000 000A                 55              BRA     CHARACTER1      * Always branch to character since we know its not a number
00001068                            56              
00001068                            57  NUMBER1     
00001068  0401 0030                 58              SUB.B   #$30,D1         * Subtract 30 from the ascii value to get hex value
0000106C  6000 0006                 59              BRA     COMBINE1        * Branch to figure out next number
00001070                            60              
00001070                            61  CHARACTER1   
00001070  0401 0037                 62              SUB.B   #$37,D1         * Subtract 37 from the ascii value to get hex value
00001074                            63              
00001074                            64  COMBINE1     
00001074  D401                      65              ADD.B  D1,D2            * Add D1 and D2 together (combines our hex value
00001076                            66              
00001076  0C04 0005                 67              CMPI.B  #5,D4           * Compare our counter to 3 if here we dont need to shift our final hex number
0000107A  6700 0008                 68              BEQ     INITHEX2        * And we go ahead and branch
0000107E                            69              
0000107E  E98A                      70              LSL.L   #4,D2           * Shift D2 (our hex number) by 8 to make room for rest of hex number conversion
00001080                            71              
00001080  5204                      72              ADD.B   #1,D4           * Add 1 to our counter in D4
00001082  60CE                      73              BRA     CONVERTHEX1     * Loop back up
00001084                            74            
00001084                            75              * D1,D2 used. D1 = temp, D2 = holds first starting address
00001084                            76              * D4,D5 = counters
00001084                            77  INITHEX2
00001084  183C 0000                 78              MOVE.B  #0,D4
00001088  1A3C 0006                 79              MOVE.B  #6,D5
0000108C                            80              
0000108C                            81  CONVERTHEX2
0000108C  4241                      82              CLR     D1              * Clear regiters to prepare for conversion
0000108E  BA04                      83              CMP.B   D4,D5           * Check counter in D4 and D5, if counter = 4 we stop
00001090  6700 002C                 84              BEQ     CHECK
00001094                            85              
00001094  1219                      86              MOVE.B  (A1)+,D1        * Move our ascii byte into D1
00001096  0C01 0040                 87              CMPI.B  #$40,D1         * Compare to 40 (if <40 = number OR if   >40 = character)
0000109A  6D00 0006                 88              BLT     NUMBER2         * If < then convert as number
0000109E  6000 000A                 89              BRA     CHARACTER2      * Always branch to character since we know its not a number
000010A2                            90              
000010A2                            91  NUMBER2     
000010A2  0401 0030                 92              SUB.B   #$30,D1         * Subtract 30 from the ascii value to get hex value
000010A6  6000 0006                 93              BRA     COMBINE2        * Branch to figure out next number
000010AA                            94              
000010AA                            95  CHARACTER2   
000010AA  0401 0037                 96              SUB.B   #$37,D1         * Subtract 37 from the ascii value to get hex value
000010AE                            97              
000010AE                            98  COMBINE2     
000010AE  D601                      99              ADD.B  D1,D3            * Add D1 and D2 together (combines our hex value
000010B0                           100              
000010B0  0C04 0005                101              CMPI.B  #5,D4           * Compare our counter to 3 if here we dont need to shift our final hex number
000010B4  6700 0008                102              BEQ     CHECK            * And we go ahead and branch
000010B8                           103              
000010B8  E98B                     104              LSL.L   #4,D3           * Shift D2 (our hex number) by 8 to make room for rest of hex number conversion
000010BA                           105              
000010BA  5204                     106              ADD.B   #1,D4           * Add 1 to our counter in D4
000010BC  60CE                     107              BRA     CONVERTHEX2     * Loop back up
000010BE                           108            
000010BE                           109              * D1,D3 used. D1 = temp, D3 = holds ENDING address
000010BE                           110              * D4,D5 = counters
000010BE                           111              
000010BE                           112  *-----------------------------------------------------------
000010BE                           113  * Test to see if we have the correct input passed in by the
000010BE                           114  * user. If not the user is then repromped.
000010BE                           115  *-----------------------------------------------------------
000010BE                           116  CHECK
000010BE  B682                     117              CMP.L   D2,D3
000010C0  6700 002C                118              BEQ     INPUT_ERR
000010C4  B682                     119              CMP.L   D2,D3           * Make sure starting adress isn't greater than ending
000010C6  6D00 0026                120              BLT     INPUT_ERR
000010CA  1C02                     121              MOVE.B  D2,D6           * Get last byte to check if number even or odd (big divisions are bad)
000010CC  1E03                     122              MOVE.B  D3,D7
000010CE  8DFC 0002                123              DIVS.W  #$2,D6          * Divide to see what remainder/modulous is
000010D2  4846                     124              SWAP    D6              * Remainder gets stored in upper word so swap swaps it to the lower word
000010D4  BC3C 0001                125              CMP.B   #$01,D6
000010D8  6700 0014                126              BEQ     INPUT_ERR       * Odd input error
000010DC  8FFC 0002                127              DIVS.W  #$2,D7
000010E0  4847                     128              SWAP    D7
000010E2  BE3C 0001                129              CMP.B   #$01,D7
000010E6  6700 0006                130              BEQ     INPUT_ERR
000010EA  6000 0026                131              BRA     DONE
000010EE                           132              
000010EE                           133              
000010EE                           134  INPUT_ERR                           * Load in input error and print to user
000010EE  43F9 00003402            135              LEA     BLANK,A1
000010F4  103C 000E                136              MOVE.B  #14,D0
000010F8  4E4F                     137              TRAP    #15
000010FA                           138  
000010FA  43F9 000032B9            139              LEA     ERROR_MSG,A1
00001100  4E4F                     140              TRAP    #15
00001102                           141              
00001102  43F9 00003402            142              LEA     BLANK,A1
00001108  103C 000E                143              MOVE.B  #14,D0
0000110C  4E4F                     144              TRAP    #15
0000110E                           145  
0000110E                           146              
0000110E  6000 FEF0                147              BRA     START_PRG
00001112                           148  
00001112                           149                   
00001112                           150  *-----------------------------------------------------------
00001112                           151  * Initialize the main loop to go through addresess and 
00001112                           152  * read mahine codes. 
00001112                           153  *----------------------------------------------------------- 
00001112                           154  DONE            
00001112  23C2 00003406            155              MOVE.L  D2,BEGIN        *put adsresses in variable in order to put in addr register
00001118  23C3 0000340A            156              MOVE.L  D3,FIN
0000111E  2479 00003406            157              MOVEA.L  BEGIN,A2       *Move to address registers
00001124  2679 0000340A            158              MOVEA.L  FIN,A3            
0000112A                           159  
0000112A                           160  
0000112A                           161  *====================================================================
0000112A                           162  *           Main Loop To Decode Instuctions
0000112A                           163  *====================================================================
0000112A                           164  MAIN_LOOP
0000112A  4286                     165              CLR.L     D6
0000112C  284A                     166              MOVEA.L A2,A4
0000112E  B5CB                     167              CMPA.L  A3,A2           * Check are we done
00001130  6C00 20EE                168              BGE     END             
00001134  3E12                     169              MOVE.W  (A2),D7         * Get instruction as a word
00001136  BE7C 4E75                170              CMP.W   #$4E75,D7       * Check if RTS instruction
0000113A  6700 013E                171              BEQ     MATCH_RTS
0000113E                           172              
0000113E  BE7C 4E71                173              CMP.W   #$4E71,D7       * Check if NOP instruction
00001142  6700 0152                174              BEQ     MATCH_NOP
00001146                           175              
00001146  163C 0007                176              MOVE.B  #7,D3
0000114A  E66F                     177              LSR.W   D3,D7           * Shift to get 9 bits
0000114C                           178              
0000114C  BE3C 0091                179              CMP.B   #$91,D7
00001150  6700 1548                180              BEQ     MATCH_MOVEM     * Check if MOVEM instruction
00001154  BE3C 0099                181              CMP.B   #$99,D7
00001158  6700 1540                182              BEQ     MATCH_MOVEM
0000115C                           183              
0000115C  3E12                     184              MOVE.W  (A2),D7
0000115E                           185              
0000115E  EC4F                     186              LSR.W   #6,D7           * Shift to get only 10 digits
00001160  BE7C 013A                187              CMP.W   #$013A,D7       * Check if it is a JSR instruction
00001164  6700 014C                188              BEQ     MATCH_JSR
00001168                           189              
00001168  BE7C 039B                190              CMP.W   #%1110011011,D7 * Check if rotate right memory 
0000116C  6700 024E                191              BEQ     MATCH_MEMROR
00001170                           192              
00001170  BE7C 039F                193              CMP.W   #%1110011111,D7 * Check if rotate left memory
00001174  6700 0280                194              BEQ     MATCH_MEMROL
00001178                           195              
00001178                           196              
00001178  BE7C 038B                197              CMP.W   #$38B,D7        * Check if right logical memory shift (had to break up becasue instruction format difference)
0000117C  6700 02B2                198              BEQ     MATCH_MEMLSHIFTR
00001180                           199              
00001180  BE7C 038F                200              CMP.W   #$38F,D7        * Check if left logical memory shift
00001184  6700 02E4                201              BEQ     MATCH_MEMLSHIFTL
00001188                           202              
00001188  BE7C 0383                203              CMP.W   #%1110000011,D7 * Check if right arithmatic memory shift (had to break up becasue instruction format diff)
0000118C  6700 0316                204              BEQ     MATCH_MEMASHIFTR
00001190                           205              
00001190  BE7C 0387                206              CMP.W   #%1110000111,D7 * Check if left arithmatic memory shift
00001194  6700 0348                207              BEQ     MATCH_MEMASHIFTL
00001198                           208              
00001198  E44F                     209              LSR.W   #2,D7           * Shift 2 bits to see 8 bits total
0000119A  BE7C 0046                210              CMP.W   #$46,D7         * Check if NOT instruction
0000119E  6700 0378                211              BEQ     MATCH_NOT
000011A2                           212              
000011A2  BE7C 0060                213              CMP.W   #$60,D7         * Check if BRA instruction
000011A6  6700 04A0                214              BEQ     MATCH_BRA
000011AA                           215              
000011AA  E84F                     216              LSR.W   #4,D7           * Shift more to see 4 bits total and if we match a normal register logical/arithmetic shift
000011AC  BE3C 000E                217              CMP.B   #$0E,D7
000011B0  6700 050A                218              BEQ     MATCH_SHIFT     * Check if shift instructions
000011B4                           219              
000011B4  BE3C 0007                220              CMP.B   #$7,D7
000011B8  6700 06B4                221              BEQ     MATCH_MOVEQ     * Check if MOVEQ instruction
000011BC                           222              
000011BC                           223              
000011BC  BE3C 000D                224              CMP.B   #$D,D7
000011C0  6700 0730                225              BEQ     MATCH_ADD       * Check if ADD instruction
000011C4                           226              
000011C4  BE3C 0005                227              CMP.B   #$5,D7
000011C8  6700 099E                228              BEQ     MATCH_ADDQ      * Check if ADDQ instruction
000011CC                           229              
000011CC  BE3C 0009                230              CMP.B   #$9,D7
000011D0  6700 0B10                231              BEQ     MATCH_SUB       * Check if SUB instruction
000011D4                           232              
000011D4  BE3C 000C                233              CMP.B   #$C,D7
000011D8  6700 0F6A                234              BEQ     MATCH_AND       * Check if AND instruction
000011DC                           235              
000011DC  BE3C 0004                236              CMP.B   #$4,D7
000011E0  6700 1002                237              BEQ     MATCH_LEA       * Check if LEA instruction
000011E4                           238              
000011E4  BE3C 0008                239              CMP.B   #$8,D7
000011E8  6700 113A                240              BEQ     MATCH_OR        * Check if OR instruction
000011EC                           241              
000011EC  BE3C 0006                242              CMP.B   #$06,D7         * Check if any of Branch Instructions
000011F0  6700 11D2                243              BEQ     MATCH_BCC
000011F4                           244              
000011F4  E44F                     245              LSR.W   #2,D7           * Shift more to see 2 bits total
000011F6  BE3C 0000                246              CMP.B   #$0,D7
000011FA  6700 1344                247              BEQ     MATCH_MOVE      * Check if MOVE instruction
000011FE                           248  
000011FE                           249  *-----------------------------------------------------------
000011FE                           250  * Opcode not found in current memory being read 
000011FE                           251  * Current memory being read that did not dissemble to 
000011FE                           252  * readable opcode from specs
000011FE                           253  *----------------------------------------------------------- 
000011FE                           254  NOOP 
000011FE  220A                     255              MOVE.L  A2,D1
00001200  143C 0010                256              MOVE.B  #16,D2      
00001204  103C 000F                257              MOVE.B  #15,D0
00001208  4E4F                     258              TRAP    #15             * Output current memory address word
0000120A                           259      
0000120A  43F9 00003317            260              LEA     UNKNOWN,A1      * Move constant DATA to A1
00001210  103C 000E                261              MOVE.B  #14,D0          * Prepare to print string in (A1)
00001214  4E4F                     262              TRAP    #15             * Display string in (A1)
00001216                           263              
00001216  43F9 00003327            264              LEA     SPACE,A1        
0000121C  4E4F                     265              TRAP    #15
0000121E                           266              
0000121E  43F9 00003327            267              LEA     SPACE,A1
00001224  103C 000E                268              MOVE.B  #14,D0
00001228  4E4F                     269              TRAP    #15
0000122A                           270              
0000122A  3212                     271              MOVE.W  (A2),D1
0000122C  143C 0010                272              MOVE.B  #16,D2
00001230  103C 000F                273              MOVE.B  #15,D0
00001234  4E4F                     274              TRAP    #15
00001236                           275              
00001236  548A                     276              ADDA.L  #2,A2
00001238                           277              
00001238                           278  INCREMENT                           * Increment the loop and continue reading opcodes        
00001238                           279              
00001238  43F9 00003402            280              LEA     BLANK,A1        * PRINT BLANK LINE to prepare for next line
0000123E  103C 000E                281              MOVE.B  #14,D0
00001242  4E4F                     282              TRAP    #15
00001244                           283              
00001244                           284              
00001244  5205                     285              ADD.B   #1,D5
00001246  BA3C 001E                286              CMP.B   #30,D5          * Check to see if we have printed a full screen of data
0000124A  6700 0006                287              BEQ     ASK_CONTINUE
0000124E                           288              
0000124E  6000 FEDA                289              BRA     MAIN_LOOP            
00001252                           290              
00001252                           291  
00001252                           292  ASK_CONTINUE                        * Ask user if they wish to continue readng file
00001252  4245                     293              CLR     D5
00001254  43F9 000032E5            294              LEA     ASK,A1
0000125A  103C 000E                295              MOVE.B  #14,D0
0000125E  4E4F                     296              TRAP    #15
00001260                           297  
00001260                           298  USER_INPUT
00001260  227C 00000920            299              MOVE.L  #$920,A1
00001266  103C 0002                300              MOVE.B  #2,D0  
0000126A  4E4F                     301              TRAP    #15             * Read input from user and store it in A1
0000126C                           302              
0000126C  2A11                     303              MOVE.L  (A1),D5
0000126E  BA3C 000D                304              CMP.B   #$0D,D5         * Make sure user is pressing enter
00001272  67EC                     305              BEQ     USER_INPUT
00001274                           306              
00001274  4245                     307              CLR     D5
00001276                           308  
00001276  6000 FEB2                309              BRA     MAIN_LOOP       * Branch back up to main loop
0000127A                           310  
0000127A                           311  
0000127A                           312  *====================================================================
0000127A                           313  *                  Decoding Opcodes and EAs
0000127A                           314  *====================================================================
0000127A                           315  
0000127A                           316  *-----------------------------------------------------------
0000127A                           317  * Test to see if we have a matching RTS op code. If so
0000127A                           318  * print out the memory address and the op code.
0000127A                           319  *-----------------------------------------------------------
0000127A                           320  MATCH_RTS
0000127A  220A                     321              MOVE.L  A2,D1
0000127C  143C 0010                322              MOVE.B  #16,D2
00001280  103C 000F                323              MOVE.B  #15,D0
00001284  4E4F                     324              TRAP    #15
00001286                           325              
00001286  43F9 00003309            326              LEA     MSG_RTS,A1
0000128C  103C 000E                327              MOVE.B  #14,D0
00001290  4E4F                     328              TRAP    #15
00001292  548A                     329              ADDA.L  #$2,A2
00001294  60A2                     330              BRA     INCREMENT
00001296                           331              
00001296                           332              
00001296                           333  *-----------------------------------------------------------
00001296                           334  * Test to see if we have a matching NOP op code. If so
00001296                           335  * print out the memory address and the op code.
00001296                           336  *-----------------------------------------------------------
00001296                           337  MATCH_NOP
00001296  220A                     338              MOVE.L  A2,D1
00001298  143C 0010                339              MOVE.B  #16,D2
0000129C  103C 000F                340              MOVE.B  #15,D0
000012A0  4E4F                     341              TRAP    #15
000012A2                           342              
000012A2  43F9 0000337D            343              LEA     MSG_NOP,A1
000012A8  103C 000E                344              MOVE.B  #14,D0
000012AC  4E4F                     345              TRAP    #15
000012AE                           346              
000012AE  548A                     347              ADDA.L  #$2,A2
000012B0                           348  
000012B0  6086                     349              BRA     INCREMENT      
000012B2                           350   
000012B2                           351  *-----------------------------------------------------------
000012B2                           352  * Test to see if we have a matching JSR op code. If so
000012B2                           353  * print out the memory address and the op code.
000012B2                           354  *-----------------------------------------------------------            
000012B2                           355  MATCH_JSR
000012B2  220A                     356              MOVE.L  A2,D1
000012B4  143C 0010                357              MOVE.B  #16,D2
000012B8  103C 000F                358              MOVE.B  #15,D0
000012BC  4E4F                     359              TRAP    #15
000012BE                           360              
000012BE  43F9 00003310            361              LEA     MSG_JSR,A1
000012C4  103C 000E                362              MOVE.B  #14,D0
000012C8  4E4F                     363              TRAP    #15
000012CA                           364              
000012CA  3E12                     365              MOVE.W  (A2),D7 
000012CC  CE7C 0038                366              AND.W   #$0038,D7       * Get only 3 bits for mode
000012D0                           367              
000012D0  BE7C 0010                368              CMP.W   #$0010,D7       * See if (An) mode
000012D4  6700 001E                369              BEQ     EA_JSR_ADDREG
000012D8                           370  
000012D8  BE7C 0038                371              CMP.W   #$0038,D7       * See if ABS mode
000012DC  6700 0056                372              BEQ     VERIFY_ABS
000012E0                           373              
000012E0                           374              * Do not match any of the EA's so we go to invalid ea subroutine
000012E0  48E7 0120                375              MOVEM.L A2/D7,-(SP)
000012E4  4EB9 000031F0            376              JSR     INVALID_EA_T2
000012EA  4CDF 0480                377              MOVEM.L (SP)+,A2/D7
000012EE                           378              
000012EE  244C                     379              MOVEA.L A4,A2
000012F0                           380  
000012F0  6000 FF46                381              BRA     INCREMENT
000012F4                           382              
000012F4                           383  EA_JSR_ADDREG                       * JSR EA that is an address register
000012F4  CC3C 0007                384              AND.B   #$07,D6         * Get the last three bits for the register number
000012F8                           385              
000012F8  43F9 00003327            386              LEA     SPACE,A1
000012FE  103C 000E                387              MOVE.B  #14,D0
00001302  4E4F                     388              TRAP    #15
00001304                           389              
00001304  43F9 000033F6            390              LEA     L_PAREN,A1
0000130A  4E4F                     391              TRAP    #15
0000130C                           392  
0000130C                           393              
0000130C  4241                     394              CLR     D1 
0000130E  43F9 000033F4            395              LEA     MSG_A,A1
00001314  4E4F                     396              TRAP    #15
00001316  1206                     397              MOVE.B  D6,D1
00001318  143C 000A                398              MOVE.B  #10,D2
0000131C  103C 000F                399              MOVE.B  #15,D0
00001320  4E4F                     400              TRAP    #15
00001322                           401              
00001322  43F9 000033F8            402              LEA     R_PAREN,A1
00001328  103C 000E                403              MOVE.B  #14,D0
0000132C  4E4F                     404              TRAP    #15
0000132E                           405              
0000132E  548A                     406              ADDA.L  #$2,A2          * Increment address position
00001330  6000 FF06                407              BRA     INCREMENT
00001334                           408              
00001334                           409              
00001334                           410  VERIFY_ABS                          * Verify the addressing to make sure  its a mode we know
00001334  3E12                     411              MOVE.W  (A2),D7
00001336  CE7C 0007                412              AND.W   #$0007,D7
0000133A                           413              
0000133A  BE3C 0000                414              CMP.B   #$00,D7
0000133E  6700 001E                415              BEQ     EA_JSR_ABS
00001342                           416              
00001342  BE3C 0001                417              CMP.B   #$01,D7
00001346  6700 0016                418              BEQ     EA_JSR_ABS
0000134A                           419  
0000134A                           420              * Do not match any of the EA's so we go to invalid ea subroutine
0000134A  48E7 0120                421              MOVEM.L A2/D7,-(SP)
0000134E  4EB9 000031F0            422              JSR     INVALID_EA_T2
00001354  4CDF 0480                423              MOVEM.L (SP)+,A2/D7
00001358                           424              
00001358  244C                     425              MOVEA.L A4,A2
0000135A  6000 FEDC                426              BRA     INCREMENT
0000135E                           427  
0000135E                           428              
0000135E                           429  EA_JSR_ABS
0000135E                           430              
0000135E  0807 0000                431              BTST.L  #$00,D7         * Check data register to see if long or word
00001362  6600 002A                432              BNE     EA_JSR_LONG     * Long adressing
00001366  548A                     433              ADDA.L  #$2,A2          * Else word adressing and grab extra word address
00001368                           434              
00001368  3212                     435              MOVE.W  (A2),D1         * Word Addressing for JSR
0000136A                           436              
0000136A  43F9 00003327            437              LEA     SPACE,A1
00001370  103C 000E                438              MOVE.B  #14,D0
00001374  4E4F                     439              TRAP    #15
00001376                           440              
00001376  43F9 000033FA            441              LEA     HEX_SIGN,A1
0000137C  4E4F                     442              TRAP    #15
0000137E                           443              
0000137E  103C 000F                444              MOVE.B  #15,D0
00001382  143C 0010                445              MOVE.B  #16,D2
00001386  4E4F                     446              TRAP    #15
00001388                           447              
00001388                           448              
00001388  548A                     449              ADDA.L  #$2,A2
0000138A                           450              
0000138A  6000 FEAC                451              BRA     INCREMENT
0000138E                           452              
0000138E                           453  EA_JSR_LONG                         * Long Addressing for JSR
0000138E  548A                     454              ADDA.L  #$2,A2          * Grab first extra word address
00001390                           455              
00001390  3212                     456              MOVE.W  (A2),D1
00001392                           457              
00001392  43F9 00003327            458              LEA     SPACE,A1
00001398  103C 000E                459              MOVE.B  #14,D0
0000139C  4E4F                     460              TRAP    #15
0000139E                           461              
0000139E  43F9 000033FA            462              LEA     HEX_SIGN,A1
000013A4  4E4F                     463              TRAP    #15
000013A6                           464              
000013A6  103C 000F                465              MOVE.B  #15,D0
000013AA  143C 0010                466              MOVE.B  #16,D2
000013AE  4E4F                     467              TRAP    #15
000013B0                           468              
000013B0  548A                     469              ADDA.L  #$2,A2          * Grab second extra word address
000013B2                           470              
000013B2  3212                     471              MOVE.W  (A2),D1
000013B4                           472              
000013B4  4E4F                     473              TRAP    #15
000013B6                           474              
000013B6  548A                     475              ADDA.L  #$2,A2
000013B8  6000 FE7E                476              BRA     INCREMENT
000013BC                           477  
000013BC                           478  *-----------------------------------------------------------
000013BC                           479  * Test to see if we have a matching Memory Shift ROR op code. 
000013BC                           480  * If so print out the memory address and the op code.
000013BC                           481  *-----------------------------------------------------------            
000013BC                           482  MATCH_MEMROR
000013BC  220A                     483              MOVE.L  A2,D1
000013BE  143C 0010                484              MOVE.B  #16,D2
000013C2  103C 000F                485              MOVE.B  #15,D0
000013C6  4E4F                     486              TRAP    #15
000013C8                           487              
000013C8  43F9 0000336F            488              LEA     MSG_ROR,A1
000013CE  103C 000E                489              MOVE.B  #14,D0
000013D2  4E4F                     490              TRAP    #15
000013D4                           491              
000013D4                           492              * Find Size
000013D4  48E7 0120                493              MOVEM.L A2/D7,-(SP)
000013D8  4EB9 0000319C            494              JSR     MATCH_SIZE_MEMLAR
000013DE  4CDF 0480                495              MOVEM.L (SP)+,A2/D7
000013E2                           496  
000013E2                           497              * Figure out EA
000013E2  48E7 0120                498              MOVEM.L A2/D7,-(SP)
000013E6  4EB9 000026FA            499              JSR     EA_MEM_SHIFT_ROTATE
000013EC  4CDF 0480                500              MOVEM.L (SP)+,A2/D7
000013F0                           501              
000013F0  244C                     502              MOVEA.L  A4,A2
000013F2  6000 FE44                503              BRA     INCREMENT
000013F6                           504  
000013F6                           505  *-----------------------------------------------------------
000013F6                           506  * Test to see if we have a matching Memory Shift ROL op code. 
000013F6                           507  * If so print out the memory address and the op code.
000013F6                           508  *-----------------------------------------------------------            
000013F6                           509  MATCH_MEMROL
000013F6  220A                     510              MOVE.L  A2,D1
000013F8  143C 0010                511              MOVE.B  #16,D2
000013FC  103C 000F                512              MOVE.B  #15,D0
00001400  4E4F                     513              TRAP    #15
00001402                           514              
00001402  43F9 00003376            515              LEA     MSG_ROL,A1
00001408  103C 000E                516              MOVE.B  #14,D0
0000140C  4E4F                     517              TRAP    #15
0000140E                           518              
0000140E                           519              * Find Size
0000140E  48E7 0120                520              MOVEM.L A2/D7,-(SP)
00001412  4EB9 0000319C            521              JSR     MATCH_SIZE_MEMLAR
00001418  4CDF 0480                522              MOVEM.L (SP)+,A2/D7
0000141C                           523  
0000141C                           524              * Figure out EA
0000141C  48E7 0120                525              MOVEM.L A2/D7,-(SP)
00001420  4EB9 000026FA            526              JSR     EA_MEM_SHIFT_ROTATE
00001426  4CDF 0480                527              MOVEM.L (SP)+,A2/D7
0000142A                           528              
0000142A  244C                     529              MOVEA.L  A4,A2
0000142C  6000 FE0A                530              BRA     INCREMENT
00001430                           531         
00001430                           532  
00001430                           533  *-----------------------------------------------------------
00001430                           534  * Test to see if we have a matching Memory Shift LSR op code. 
00001430                           535  * If so print out the memory address and the op code.
00001430                           536  *-----------------------------------------------------------
00001430                           537  MATCH_MEMLSHIFTR  
00001430  220A                     538              MOVE.L  A2,D1 
00001432  143C 0010                539              MOVE.B  #16,D2
00001436  103C 000F                540              MOVE.B  #15,D0
0000143A  4E4F                     541              TRAP    #15
0000143C                           542              
0000143C  43F9 00003337            543              LEA     MSG_LSR,A1
00001442  103C 000E                544              MOVE.B  #14,D0
00001446  4E4F                     545              TRAP    #15
00001448                           546              
00001448                           547              * Find Size
00001448  48E7 0120                548              MOVEM.L A2/D7,-(SP)
0000144C  4EB9 0000319C            549              JSR     MATCH_SIZE_MEMLAR
00001452  4CDF 0480                550              MOVEM.L (SP)+,A2/D7
00001456                           551              
00001456                           552              * Figure out EA
00001456  48E7 0120                553              MOVEM.L A2/D7,-(SP)
0000145A  4EB9 000026FA            554              JSR     EA_MEM_SHIFT_ROTATE
00001460  4CDF 0480                555              MOVEM.L (SP)+,A2/D7
00001464                           556              
00001464  244C                     557              MOVEA.L  A4,A2
00001466  6000 FDD0                558              BRA     INCREMENT
0000146A                           559              
0000146A                           560  *-----------------------------------------------------------
0000146A                           561  * Test to see if we have a matching Memory Shift LSL op code. 
0000146A                           562  * If so print out the memory address and the op code.
0000146A                           563  *-----------------------------------------------------------            
0000146A                           564  MATCH_MEMLSHIFTL
0000146A  220A                     565              MOVE.L  A2,D1
0000146C  143C 0010                566              MOVE.B  #16,D2
00001470  103C 000F                567              MOVE.B  #15,D0
00001474  4E4F                     568              TRAP    #15
00001476                           569              
00001476  43F9 00003330            570              LEA     MSG_LSL,A1
0000147C  103C 000E                571              MOVE.B  #14,D0
00001480  4E4F                     572              TRAP    #15
00001482                           573              
00001482                           574              * Find Size
00001482  48E7 0120                575              MOVEM.L A2/D7,-(SP)
00001486  4EB9 0000319C            576              JSR     MATCH_SIZE_MEMLAR
0000148C  4CDF 0480                577              MOVEM.L (SP)+,A2/D7
00001490                           578  
00001490                           579              * Figure out EA
00001490  48E7 0120                580              MOVEM.L A2/D7,-(SP)
00001494  4EB9 000026FA            581              JSR     EA_MEM_SHIFT_ROTATE
0000149A  4CDF 0480                582              MOVEM.L (SP)+,A2/D7
0000149E                           583              
0000149E  244C                     584              MOVEA.L  A4,A2
000014A0  6000 FD96                585              BRA     INCREMENT
000014A4                           586              
000014A4                           587  *-----------------------------------------------------------
000014A4                           588  * Test to see if we have a matching Memory Shift ASR op code. 
000014A4                           589  * If so print out the memory address and the op code.
000014A4                           590  *-----------------------------------------------------------            
000014A4                           591  MATCH_MEMASHIFTR
000014A4  220A                     592              MOVE.L  A2,D1
000014A6  143C 0010                593              MOVE.B  #16,D2
000014AA  103C 000F                594              MOVE.B  #15,D0
000014AE  4E4F                     595              TRAP    #15
000014B0                           596              
000014B0  43F9 00003345            597              LEA     MSG_ASR,A1
000014B6  103C 000E                598              MOVE.B  #14,D0
000014BA  4E4F                     599              TRAP    #15
000014BC                           600              
000014BC                           601              * Find Size
000014BC  48E7 0120                602              MOVEM.L A2/D7,-(SP)
000014C0  4EB9 0000319C            603              JSR     MATCH_SIZE_MEMLAR
000014C6  4CDF 0480                604              MOVEM.L (SP)+,A2/D7
000014CA                           605              
000014CA                           606              * Figure out EA
000014CA  48E7 0120                607              MOVEM.L A2/D7,-(SP)
000014CE  4EB9 000026FA            608              JSR     EA_MEM_SHIFT_ROTATE
000014D4  4CDF 0480                609              MOVEM.L (SP)+,A2/D7
000014D8                           610  
000014D8                           611              
000014D8  244C                     612              MOVEA.L  A4,A2
000014DA  6000 FD5C                613              BRA     INCREMENT
000014DE                           614  
000014DE                           615  *-----------------------------------------------------------
000014DE                           616  * Test to see if we have a matching Memory Shift ASL op code. 
000014DE                           617  * If so print out the memory address and the op code.
000014DE                           618  *-----------------------------------------------------------
000014DE                           619  MATCH_MEMASHIFTL
000014DE                           620              * PRINT LINE NUMBER
000014DE  220A                     621              MOVE.L  A2,D1
000014E0  143C 0010                622              MOVE.B  #16,D2
000014E4  103C 000F                623              MOVE.B  #15,D0
000014E8  4E4F                     624              TRAP    #15
000014EA                           625              
000014EA  43F9 0000333E            626              LEA     MSG_ASL,A1
000014F0  103C 000E                627              MOVE.B  #14,D0
000014F4  4E4F                     628              TRAP    #15
000014F6                           629              
000014F6                           630              * Find Size
000014F6  48E7 0120                631              MOVEM.L A2/D7,-(SP)
000014FA  4EB9 0000319C            632              JSR     MATCH_SIZE_MEMLAR
00001500  4CDF 0480                633              MOVEM.L (SP)+,A2/D7
00001504                           634  
00001504                           635              *Figure out EA
00001504  48E7 0120                636              MOVEM.L A2/D7,-(SP)
00001508  4EB9 000026FA            637              JSR     EA_MEM_SHIFT_ROTATE
0000150E  4CDF 0480                638              MOVEM.L (SP)+,A2/D7
00001512                           639             
00001512  244C                     640              MOVEA.L  A4,A2
00001514  6000 FD22                641              BRA     INCREMENT
00001518                           642  
00001518                           643  *-----------------------------------------------------------
00001518                           644  * Test to see if we have a matching NOT op code. If so
00001518                           645  * print out the memory address and the op code.
00001518                           646  *-----------------------------------------------------------
00001518                           647  MATCH_NOT
00001518                           648              * PRINT LINE NUMBER
00001518  220A                     649              MOVE.L  A2,D1
0000151A  143C 0010                650              MOVE.B  #16,D2
0000151E  103C 000F                651              MOVE.B  #15,D0
00001522  4E4F                     652              TRAP    #15
00001524                           653              
00001524                           654              * PRINT NOT
00001524  43F9 0000334C            655              LEA     MSG_NOT,A1
0000152A  103C 000E                656              MOVE.B  #14,D0
0000152E  4E4F                     657              TRAP    #15
00001530                           658              
00001530  3E12                     659              MOVE.W  (A2),D7
00001532                           660               *TEST GET SOURCE SUB
00001532  3E12                     661              MOVE.W  (A2),D7
00001534  48E7 0120                662              MOVEM.L A2/D7,-(SP)
00001538  4EB9 0000157A            663              JSR     SIZE_NOT
0000153E  4CDF 0480                664              MOVEM.L (SP)+,A2/D7
00001542                           665              
00001542                           666              * PRINT SPACE
00001542  43F9 00003327            667              LEA     SPACE,A1        * Byte displacement
00001548  103C 000E                668              MOVE.B  #14,D0
0000154C  4E4F                     669              TRAP    #15
0000154E                           670              
0000154E                           671              * PRINT TEST EA
0000154E  48E7 0120                672              MOVEM.L A2/D7,-(SP)
00001552  4EB9 00001594            673              JSR     T_NOT_EA
00001558  4CDF 0480                674              MOVEM.L (SP)+,A2/D7
0000155C                           675              
0000155C  BC3C 0001                676              CMP.B   #$1,D6              *if D6 has $1 that means that the test failed and now print 
00001560                           677                                          *INVALID_EA
00001560  6700 1CAA                678              BEQ     INVAL_EA_NO_RTS
00001564                           679              
00001564                           680              
00001564  48E7 0120                681              MOVEM.L A2/D7,-(SP)
00001568  4EB9 000015EE            682              JSR     NOT_EA
0000156E  4CDF 0480                683              MOVEM.L (SP)+,A2/D7
00001572                           684              
00001572  244C                     685              MOVEA.L A4,A2             *move A3 to A2 since absolute address may have been used
00001574  548A                     686              ADDA.L  #$2,A2          * Increase counter by long
00001576                           687              
00001576                           688  
00001576  6000 FCC0                689              BRA     INCREMENT       * Branch back up to main loop
0000157A                           690  
0000157A                           691  
0000157A                           692  SIZE_NOT    * COMPARE SIZE
0000157A  EC0F                     693              LSR.B   #6,D7
0000157C  BE3C 0000                694              CMP.B   #$0,D7
00001580  6700 1C36                695              BEQ     BYTE
00001584  BE3C 0001                696              CMP.B   #$1,D7
00001588  6700 1C3E                697              BEQ     WORD
0000158C  BE3C 0002                698              CMP.B   #$2,D7
00001590  6700 1C46                699              BEQ     LONG
00001594                           700  
00001594                           701              
00001594                           702  T_NOT_EA
00001594  3E12                     703              MOVE.W  (A2),D7
00001596  760A                     704              MOVE.L  #10,D3
00001598  E76F                     705              LSL.W   D3,D7   *shift D7 to right 13 to get the register
0000159A  760D                     706              MOVE.L  #13,D3
0000159C  E66F                     707              LSR.W   D3,D7   *shift D7 to right 13 to get the register
0000159E                           708  
0000159E  BE3C 0000                709              CMP.B   #$0,D7          *mode is Dn
000015A2  6700 1868                710              BEQ     GOOD            *ea valid
000015A6  BE3C 0001                711              CMP.B   #$1,D7          
000015AA  6700 1C3C                712              BEQ     INVALID_EA
000015AE  BE3C 0002                713              CMP.B   #$2,D7             *mode is (An)
000015B2  6700 1858                714              BEQ     GOOD       *(An) 
000015B6  BE3C 0003                715              CMP.B   #$3,D7
000015BA  6700 1850                716              BEQ     GOOD      *(An)+
000015BE  BE3C 0004                717              CMP.B   #$4,D7
000015C2  6700 1848                718              BEQ     GOOD      *-(An)
000015C6  BE3C 0007                719              CMP.B   #$7,D7
000015CA  6700 0006                720              BEQ     T_NOT_IMM_REG     *(xxx).W or (xxx).L or #<data>
000015CE  6000 1C18                721              BRA     INVALID_EA
000015D2                           722              
000015D2                           723  T_NOT_IMM_REG 
000015D2  3E12                     724              MOVE.W  (A2),D7
000015D4  760D                     725              MOVE.L  #13,D3
000015D6  E76F                     726              LSL.W   D3,D7
000015D8  E66F                     727              LSR.W   D3,D7
000015DA  BE3C 0000                728              CMP.B   #$0,D7
000015DE  6700 182C                729              BEQ     GOOD  *word absolute address
000015E2  BE3C 0001                730              CMP.B   #$1,D7
000015E6  6700 1824                731              BEQ     GOOD  *long absolute address
000015EA  6000 1BFC                732              BRA     INVALID_EA  
000015EE                           733  
000015EE                           734  NOT_EA
000015EE  3E12                     735              MOVE.W  (A2),D7
000015F0  760A                     736              MOVE.L  #10,D3
000015F2  E76F                     737              LSL.W   D3,D7   *shift D7 to right 13 to get the register
000015F4  760D                     738              MOVE.L  #13,D3
000015F6  E66F                     739              LSR.W   D3,D7   *shift D7 to right 13 to get the register
000015F8                           740  
000015F8  BE3C 0000                741              CMP.B   #$0,D7
000015FC  6700 1B54                742              BEQ     DATA_R_S 
00001600  BE3C 0001                743              CMP.B   #$1,D7
00001604  6700 1BE2                744              BEQ     INVALID_EA      *An
00001608  BE3C 0002                745              CMP.B   #$2,D7
0000160C  6700 19A6                746              BEQ     ADDY_R_SP       *(An)
00001610  BE3C 0003                747              CMP.B   #$3,D7
00001614  6700 1A18                748              BEQ     ADDY_R_SPI      *(An)+
00001618  BE3C 0004                749              CMP.B   #$4,D7
0000161C  6700 1AA2                750              BEQ     ADDY_R_SPD      *-(An)
00001620  BE3C 0007                751              CMP.B   #$7,D7
00001624  6700 0006                752              BEQ     NOT_IMM_REG
00001628  6000 1BBE                753              BRA     INVALID_EA  
0000162C                           754              
0000162C                           755  NOT_IMM_REG 
0000162C  3E12                     756              MOVE.W  (A2),D7
0000162E  760D                     757              MOVE.L  #13,D3
00001630  E76F                     758              LSL.W   D3,D7
00001632  E66F                     759              LSR.W   D3,D7
00001634  BE3C 0000                760              CMP.B   #$0,D7
00001638  6700 1862                761              BEQ     W_ADDY  *word absolute address
0000163C  BE3C 0001                762              CMP.B   #$1,D7
00001640  6700 187A                763              BEQ     L_ADDY  *long absolute address
00001644  6000 1BA2                764              BRA     INVALID_EA    
00001648                           765  
00001648                           766  
00001648                           767            
00001648                           768              
00001648                           769  *-----------------------------------------------------------
00001648                           770  * Test to see if we have a matching BRA op code. If so
00001648                           771  * print out the memory address and the op code.
00001648                           772  *-----------------------------------------------------------
00001648                           773  MATCH_BRA
00001648  220A                     774              MOVE.L  A2,D1
0000164A  143C 0010                775              MOVE.B  #16,D2
0000164E  103C 000F                776              MOVE.B  #15,D0
00001652  4E4F                     777              TRAP    #15
00001654                           778              
00001654  43F9 00003353            779              LEA     MSG_BRA,A1
0000165A  103C 000E                780              MOVE.B  #14,D0
0000165E  4E4F                     781              TRAP    #15
00001660                           782              
00001660  3E12                     783              MOVE.W  (A2),D7
00001662  BE3C 0000                784              CMP.B   #$00,D7         * Compare to see if we have a word displacement or byte
00001666  6700 002A                785              BEQ     EA_BRA_WORD
0000166A                           786              
0000166A  43F9 00003327            787              LEA     SPACE,A1        * Byte displacement
00001670  103C 000E                788              MOVE.B  #14,D0
00001674  4E4F                     789              TRAP    #15
00001676                           790              
00001676  43F9 000033FA            791              LEA     HEX_SIGN,A1
0000167C  4E4F                     792              TRAP    #15
0000167E                           793              
0000167E  4241                     794              CLR     D1
00001680  1207                     795              MOVE.B  D7,D1
00001682  143C 0010                796              MOVE.B  #16,D2
00001686  103C 000F                797              MOVE.B  #15,D0
0000168A  4E4F                     798              TRAP    #15
0000168C                           799              
0000168C  548A                     800              ADDA.L  #$2,A2
0000168E                           801              
0000168E  6000 FBA8                802              BRA     INCREMENT
00001692                           803              
00001692                           804  EA_BRA_WORD                     * Word Displacement
00001692  548A                     805              ADDA.L  #$2,A2            
00001694  43F9 00003327            806              LEA     SPACE,A1
0000169A  103C 000E                807              MOVE.B  #14,D0
0000169E  4E4F                     808              TRAP    #15
000016A0                           809              
000016A0  43F9 000033FA            810              LEA     HEX_SIGN,A1 
000016A6  4E4F                     811              TRAP    #15
000016A8                           812              
000016A8  4241                     813              CLR     D1
000016AA  3212                     814              MOVE.W  (A2),D1
000016AC  143C 0010                815              MOVE.B  #16,D2
000016B0  103C 000F                816              MOVE.B  #15,D0
000016B4  4E4F                     817              TRAP    #15
000016B6                           818              
000016B6  548A                     819              ADDA.L  #$2,A2
000016B8                           820  
000016B8  6000 FB7E                821              BRA     INCREMENT
000016BC                           822             
000016BC                           823  *-----------------------------------------------------------
000016BC                           824  * Test to see if we have a matching logical, arthemetic, or rotate
000016BC                           825  * shift. (Register shift)
000016BC                           826  *-----------------------------------------------------------
000016BC                           827  MATCH_SHIFT
000016BC  3E12                     828              MOVE.W  (A2),D7         * Get full instruction again to figure out the type of shift or rotate
000016BE  E64F                     829              LSR.W   #3,D7          
000016C0                           830              
000016C0  CE7C 0003                831              AND.W   #$0003,D7
000016C4                           832              
000016C4  BE3C 0003                833              CMP.B   #$03,D7
000016C8  6700 0012                834              BEQ     ROTATE          * Match rotate
000016CC                           835              
000016CC  BE3C 0001                836              CMP.B   #$01,D7
000016D0  6700 0090                837              BEQ     LSHIFT          * Match logical shift
000016D4                           838              
000016D4  BE3C 0000                839              CMP.B   #$00,D7
000016D8  6700 010E                840              BEQ     ASHIFT          * Match arithmetic shift
000016DC                           841         
000016DC                           842  *-----------------------------------------------------------
000016DC                           843  * We have a rotate instruction.Check to see if left or right.
000016DC                           844  *-----------------------------------------------------------
000016DC                           845  ROTATE
000016DC  3E12                     846              MOVE.W  (A2),D7
000016DE  0807 0008                847              BTST.L  #$8,D7          * Check if left or right direction (8th bit gets tested)
000016E2  6600 0040                848              BNE     RL
000016E6                           849              
000016E6  220A                     850              MOVE.L  A2,D1           * Must be a right logical shift so dont branch
000016E8  143C 0010                851              MOVE.B  #16,D2
000016EC  103C 000F                852              MOVE.B  #15,D0
000016F0  4E4F                     853              TRAP    #15
000016F2                           854              
000016F2  43F9 0000336F            855              LEA     MSG_ROR,A1
000016F8  103C 000E                856              MOVE.B  #14,D0
000016FC  4E4F                     857              TRAP    #15
000016FE                           858              
000016FE                           859              * TESTING FOR SIZE
000016FE  CE7C 00C0                860              AND     #$00C0,D7
00001702                           861              
00001702  48E7 0120                862              MOVEM.L A2/D7,-(SP)
00001706  4EB9 000031A0            863              JSR     MATCH_SIZE_LAR
0000170C  4CDF 0480                864              MOVEM.L (SP)+,A2/D7
00001710                           865  
00001710                           866              * Figure out EA
00001710  48E7 0120                867              MOVEM.L A2/D7,-(SP)
00001714  4EB9 00002882            868              JSR     EA_SHIFT_ROTATE  
0000171A  4CDF 0480                869              MOVEM.L (SP)+,A2/D7
0000171E                           870  
0000171E                           871              
0000171E  548A                     872              ADDA.L  #$2,A2
00001720                           873              
00001720  6000 FB16                874              BRA     INCREMENT
00001724                           875  
00001724                           876  * Rotate Left
00001724                           877  RL
00001724  220A                     878              MOVE.L  A2,D1
00001726  143C 0010                879              MOVE.B  #16,D2
0000172A  103C 000F                880              MOVE.B  #15,D0
0000172E  4E4F                     881              TRAP    #15
00001730                           882              
00001730  43F9 00003376            883              LEA     MSG_ROL,A1
00001736  103C 000E                884              MOVE.B  #14,D0
0000173A  4E4F                     885              TRAP    #15
0000173C                           886              
0000173C                           887              
0000173C                           888              * TESTING FOR SIZE
0000173C  CE7C 00C0                889              AND     #$00C0,D7
00001740                           890              
00001740  48E7 0120                891              MOVEM.L A2/D7,-(SP)
00001744  4EB9 000031A0            892              JSR     MATCH_SIZE_LAR
0000174A  4CDF 0480                893              MOVEM.L (SP)+,A2/D7
0000174E                           894              
0000174E                           895              * Figure out EA
0000174E  48E7 0120                896              MOVEM.L A2/D7,-(SP)
00001752  4EB9 00002882            897              JSR     EA_SHIFT_ROTATE  
00001758  4CDF 0480                898              MOVEM.L (SP)+,A2/D7
0000175C                           899  
0000175C                           900              
0000175C  548A                     901              ADDA.L  #$2,A2
0000175E                           902              
0000175E  6000 FAD8                903              BRA     INCREMENT
00001762                           904  *-----------------------------------------------------------
00001762                           905  * We have a logical register shift. Check to see if its 
00001762                           906  * left or right.
00001762                           907  *-----------------------------------------------------------
00001762                           908  LSHIFT
00001762  3E12                     909              MOVE.W  (A2),D7
00001764  0807 0008                910              BTST.L  #$8,D7          * Check if left or right direction (8th bit gets tested)
00001768  6600 0040                911              BNE     LL
0000176C                           912              
0000176C  220A                     913              MOVE.L  A2,D1           * Must be a right logical shift so dont branch
0000176E  143C 0010                914              MOVE.B  #16,D2
00001772  103C 000F                915              MOVE.B  #15,D0
00001776  4E4F                     916              TRAP    #15
00001778                           917              
00001778  43F9 00003337            918              LEA     MSG_LSR,A1
0000177E  103C 000E                919              MOVE.B  #14,D0
00001782  4E4F                     920              TRAP    #15
00001784                           921              
00001784                           922              * TESTING FOR SIZE
00001784  CE7C 00C0                923              AND     #$00C0,D7
00001788                           924              
00001788  48E7 0120                925              MOVEM.L A2/D7,-(SP)
0000178C  4EB9 000031A0            926              JSR     MATCH_SIZE_LAR  
00001792  4CDF 0480                927              MOVEM.L (SP)+,A2/D7
00001796                           928              
00001796                           929              * Figure out EA
00001796  48E7 0120                930              MOVEM.L A2/D7,-(SP)
0000179A  4EB9 00002882            931              JSR     EA_SHIFT_ROTATE  
000017A0  4CDF 0480                932              MOVEM.L (SP)+,A2/D7
000017A4                           933       
000017A4  548A                     934              ADDA.L  #$2,A2
000017A6                           935              
000017A6  6000 FA90                936              BRA     INCREMENT
000017AA                           937  
000017AA                           938  * Logical Left Shift            
000017AA                           939  LL
000017AA  220A                     940              MOVE.L  A2,D1
000017AC  143C 0010                941              MOVE.B  #16,D2
000017B0  103C 000F                942              MOVE.B  #15,D0
000017B4  4E4F                     943              TRAP    #15
000017B6                           944              
000017B6  43F9 00003330            945              LEA     MSG_LSL,A1
000017BC  103C 000E                946              MOVE.B  #14,D0
000017C0  4E4F                     947              TRAP    #15
000017C2                           948              
000017C2                           949              * TESTING FOR SIZE
000017C2  CE7C 00C0                950              AND     #$00C0,D7
000017C6                           951  
000017C6  48E7 0120                952              MOVEM.L A2/D7,-(SP)
000017CA  4EB9 000031A0            953              JSR     MATCH_SIZE_LAR
000017D0  4CDF 0480                954              MOVEM.L (SP)+,A2/D7
000017D4                           955              
000017D4                           956              * Figure out EA
000017D4  48E7 0120                957              MOVEM.L A2/D7,-(SP)
000017D8  4EB9 00002882            958              JSR     EA_SHIFT_ROTATE  
000017DE  4CDF 0480                959              MOVEM.L (SP)+,A2/D7
000017E2                           960  
000017E2                           961              
000017E2  548A                     962              ADDA.L  #$2,A2
000017E4                           963              
000017E4  6000 FA52                964              BRA     INCREMENT
000017E8                           965              
000017E8                           966  *-----------------------------------------------------------
000017E8                           967  * We have a arithmetic register shift. Check to see if its 
000017E8                           968  * left or right.
000017E8                           969  *-----------------------------------------------------------    
000017E8                           970  ASHIFT
000017E8  3E12                     971              MOVE.W  (A2),D7
000017EA  0807 0008                972              BTST.L  #$8,D7          * Check if left or right direction (8th bit gets tested)
000017EE  6600 0040                973              BNE     AL
000017F2                           974  
000017F2  220A                     975              MOVE.L  A2,D1           * Must be a right arithmetic shift so dont branch
000017F4  143C 0010                976              MOVE.B  #16,D2
000017F8  103C 000F                977              MOVE.B  #15,D0
000017FC  4E4F                     978              TRAP    #15
000017FE                           979              
000017FE  43F9 00003345            980              LEA     MSG_ASR,A1
00001804  103C 000E                981              MOVE.B  #14,D0
00001808  4E4F                     982              TRAP    #15
0000180A                           983              
0000180A                           984              * TESTING FOR SIZE
0000180A  CE7C 00C0                985              AND     #$00C0,D7
0000180E                           986              
0000180E  48E7 0120                987              MOVEM.L A2/D7,-(SP)
00001812  4EB9 000031A0            988              JSR     MATCH_SIZE_LAR
00001818  4CDF 0480                989              MOVEM.L (SP)+,A2/D7
0000181C                           990              
0000181C                           991              * Figure out EA
0000181C  48E7 0120                992              MOVEM.L A2/D7,-(SP)
00001820  4EB9 00002882            993              JSR     EA_SHIFT_ROTATE  
00001826  4CDF 0480                994              MOVEM.L (SP)+,A2/D7
0000182A                           995  
0000182A                           996              
0000182A  548A                     997              ADDA.L  #$2,A2
0000182C                           998              
0000182C  6000 FA0A                999              BRA     INCREMENT
00001830                          1000              
00001830                          1001  * Arithmetic Left Shift            
00001830                          1002  AL
00001830  220A                    1003              MOVE.L  A2,D1
00001832  143C 0010               1004              MOVE.B  #16,D2
00001836  103C 000F               1005              MOVE.B  #15,D0
0000183A  4E4F                    1006              TRAP    #15
0000183C                          1007              
0000183C  43F9 0000333E           1008              LEA     MSG_ASL,A1
00001842  103C 000E               1009              MOVE.B  #14,D0
00001846  4E4F                    1010              TRAP    #15
00001848                          1011              
00001848                          1012              * TESTING FOR SIZE
00001848  CE7C 00C0               1013              AND     #$00C0,D7
0000184C                          1014              
0000184C  48E7 0120               1015              MOVEM.L A2/D7,-(SP)
00001850  4EB9 000031A0           1016              JSR     MATCH_SIZE_LAR
00001856  4CDF 0480               1017              MOVEM.L (SP)+,A2/D7
0000185A                          1018              
0000185A                          1019              * Figure out EA
0000185A  48E7 0120               1020              MOVEM.L A2/D7,-(SP)
0000185E  4EB9 00002882           1021              JSR     EA_SHIFT_ROTATE  
00001864  4CDF 0480               1022              MOVEM.L (SP)+,A2/D7
00001868                          1023  
00001868                          1024              
00001868  548A                    1025              ADDA.L  #$2,A2
0000186A                          1026              
0000186A  6000 F9CC               1027              BRA     INCREMENT
0000186E                          1028  *-----------------------------------------------------------
0000186E                          1029  * Test to see if we have a matching MOVEQ op code. If so
0000186E                          1030  * print out the memory address and the op code.
0000186E                          1031  *----------------------------------------------------------- 
0000186E                          1032  MATCH_MOVEQ
0000186E  3E12                    1033              MOVE.W  (A2),D7
00001870  760F                    1034              MOVE.L #15,D3
00001872  EF4F                    1035              LSL.W   #7,D7
00001874  E66F                    1036              LSR.W   D3,D7
00001876                          1037              
00001876  BE3C 0000               1038              CMP.B   #$00,D7
0000187A  6600 F982               1039              BNE     NOOP
0000187E                          1040              * PRINT LINE NUMBER
0000187E  220A                    1041              MOVE.L  A2,D1
00001880  143C 0010               1042              MOVE.B  #16,D2
00001884  103C 000F               1043              MOVE.B  #15,D0
00001888  4E4F                    1044              TRAP    #15
0000188A                          1045              
0000188A                          1046              * PRINT MOVEQ
0000188A  43F9 0000338D           1047              LEA     MSG_MOVEQ,A1
00001890  103C 000E               1048              MOVE.B  #14,D0
00001894  4E4F                    1049              TRAP    #15
00001896                          1050              
00001896  43F9 00003327           1051              LEA     SPACE,A1        
0000189C  103C 000E               1052              MOVE.B  #14,D0
000018A0  4E4F                    1053              TRAP    #15
000018A2                          1054              
000018A2                          1055              *print data of moveq
000018A2  43F9 000033FC           1056              LEA     HASH_SIGN,A1
000018A8  103C 000E               1057              MOVE.B  #14,D0
000018AC  4E4F                    1058              TRAP    #15
000018AE                          1059              
000018AE                          1060              * PRINT HEX SIGN
000018AE  43F9 000033FA           1061              LEA     HEX_SIGN,A1
000018B4  4E4F                    1062              TRAP    #15
000018B6                          1063              
000018B6  3E12                    1064              MOVE.W  (A2),D7
000018B8  E14F                    1065              LSL.W   #8,D7
000018BA  E04F                    1066              LSR.W   #8,D7
000018BC  2207                    1067              MOVE.L  D7,D1
000018BE                          1068              
000018BE  7410                    1069              MOVE.L  #16,D2
000018C0  103C 000F               1070              MOVE.B  #15,D0
000018C4  4E4F                    1071              TRAP    #15
000018C6                          1072              
000018C6                          1073              * PRINT COMMA
000018C6  43F9 000033AA           1074              LEA     MSG_COMMA,A1
000018CC  103C 000E               1075              MOVE.B  #14,D0
000018D0  4E4F                    1076              TRAP    #15
000018D2                          1077              
000018D2                          1078              *print Dn
000018D2  E94F                    1079              LSL.W   #4,D7
000018D4  760D                    1080              MOVE.L  #13,D3
000018D6  E66F                    1081              LSR.W   D3,D7
000018D8  2207                    1082              MOVE.L  D7,D1
000018DA                          1083      
000018DA  3E12                    1084              MOVE.W  (A2),D7
000018DC  48E7 0120               1085              MOVEM.L A2/D7,-(SP)
000018E0  4EB9 00003176           1086              JSR     DATA_R_D    *print Dn
000018E6  4CDF 0480               1087              MOVEM.L (SP)+,A2/D7
000018EA                          1088              
000018EA  244C                    1089              MOVEA.L A4,A2           *move A3 to A2 since absolute address may have been used
000018EC  548A                    1090              ADDA.L  #$2,A2          * Increase counter by long
000018EE                          1091              
000018EE                          1092          
000018EE  6000 F948               1093              BRA     INCREMENT       * Branch back up to main loop
000018F2                          1094  
000018F2                          1095  
000018F2                          1096  *-----------------------------------------------------------
000018F2                          1097  * Test to see if we have a matching ADD op code. If so
000018F2                          1098  * print out the memory address and the op code.
000018F2                          1099  *-----------------------------------------------------------   
000018F2                          1100  MATCH_ADD
000018F2  3E12                    1101              MOVE.W  (A2),D7
000018F4  EF4F                    1102              LSL.W   #7,D7       *shift value in D7 to the left by 7 bits
000018F6  760D                    1103              MOVE.L  #13,D3
000018F8  E66F                    1104              LSR.W   D3,D7 
000018FA  BE3C 0003               1105              CMP.B   #$3,D7      *check if opcode is $3 if so it is ADDA
000018FE                          1106  
000018FE  6700 00DC               1107              BEQ     MATCH_ADDA
00001902  BE3C 0007               1108              CMP.B  #$7,D7       *check if opcode is $7 if so it is ADDA
00001906  6700 00D4               1109              BEQ     MATCH_ADDA
0000190A                          1110              
0000190A                          1111              * PRINT LINE NUMBER
0000190A  220A                    1112              MOVE.L  A2,D1
0000190C  143C 0010               1113              MOVE.B  #16,D2
00001910  103C 000F               1114              MOVE.B  #15,D0
00001914  4E4F                    1115              TRAP    #15
00001916                          1116              
00001916  43F9 000033B5           1117              LEA     MSG_ADD,A1  *print out ADDA
0000191C  103C 000E               1118              MOVE.B  #14,D0
00001920  4E4F                    1119              TRAP    #15
00001922                          1120      
00001922                          1121             * PRINT SIZE
00001922  3E12                    1122              MOVE.W  (A2),D7
00001924  48E7 0120               1123              MOVEM.L A2/D7,-(SP)
00001928  4EB9 000019A2           1124              JSR     ADD_SIZE_SUB    
0000192E  4CDF 0480               1125              MOVEM.L (SP)+,A2/D7
00001932                          1126              
00001932  43F9 00003327           1127              LEA     SPACE,A1        
00001938  103C 000E               1128              MOVE.B  #14,D0
0000193C  4E4F                    1129              TRAP    #15
0000193E                          1130              
0000193E                          1131               *TEST GET SOURCE SUB
0000193E  3E12                    1132              MOVE.W  (A2),D7
00001940  48E7 0120               1133              MOVEM.L A2/D7,-(SP)
00001944  4EB9 00001E3A           1134              JSR     T_SUBTR_PRINT_SRC_EA
0000194A  4CDF 0480               1135              MOVEM.L (SP)+,A2/D7
0000194E                          1136              
0000194E  BC3C 0001               1137              CMP.B   #$1,D6              *if D6 has $1 that means that the test failed and now print 
00001952                          1138                                          *INVALID_EA
00001952  6700 18B8               1139              BEQ     INVAL_EA_NO_RTS
00001956                          1140              
00001956                          1141              
00001956                          1142              * TEST PRINT DEST MODE AND REGISTER
00001956  3E12                    1143              MOVE.W  (A2),D7
00001958  48E7 0120               1144              MOVEM.L A2/D7,-(SP)
0000195C  4EB9 00001E78           1145              JSR     T_SUBTR_PRINT_DEST_EA
00001962  4CDF 0480               1146              MOVEM.L (SP)+,A2/D7
00001966                          1147              
00001966  BC3C 0001               1148              CMP.B   #$1,D6              *if D6 has $1 that means that the test failed and now print 
0000196A  6700 18A0               1149              BEQ     INVAL_EA_NO_RTS                            *INVALID_EA
0000196E                          1150   
0000196E                          1151              *GET SOURCE SUB
0000196E  3E12                    1152              MOVE.W  (A2),D7
00001970  48E7 0120               1153              MOVEM.L A2/D7,-(SP)
00001974  4EB9 00002026           1154              JSR     SUBTR_PRINT_SRC_EA  *print out source ea
0000197A  4CDF 0480               1155              MOVEM.L (SP)+,A2/D7
0000197E                          1156              
0000197E                          1157               * PRINT COMMA
0000197E  43F9 000033AA           1158              LEA     MSG_COMMA,A1
00001984  103C 000E               1159              MOVE.B  #14,D0
00001988  4E4F                    1160              TRAP    #15
0000198A                          1161              
0000198A                          1162              * PRINT DEST MODE AND REGISTER
0000198A  3E12                    1163              MOVE.W  (A2),D7
0000198C  48E7 0120               1164              MOVEM.L A2/D7,-(SP)
00001990  4EB9 0000205E           1165              JSR     SUBTR_PRINT_DEST_EA *print out dest ea
00001996  4CDF 0480               1166              MOVEM.L (SP)+,A2/D7
0000199A                          1167  
0000199A                          1168  
0000199A                          1169              
0000199A  244C                    1170              MOVEA.L A4,A2             *move A3 to A2 since absolute address may have been used
0000199C  548A                    1171              ADDA.L  #$2,A2          * Increase counter by long
0000199E                          1172              
0000199E  6000 F898               1173              BRA     INCREMENT       * Branch back up to main loop
000019A2                          1174  
000019A2                          1175  ADD_SIZE_SUB                           * ADD SIZE SUBROUTINE START
000019A2                          1176              * SHIFT TO SIZE FIELD
000019A2                          1177              
000019A2  EF4F                    1178              LSL.W   #7,D7
000019A4  760D                    1179              MOVE.L  #13,D3
000019A6  E66F                    1180              LSR.W   D3,D7
000019A8                          1181              * RUN COMPARISONS
000019A8  BE3C 0000               1182              CMP.B   #$0,D7
000019AC  6700 180A               1183              BEQ     BYTE
000019B0  BE3C 0001               1184              CMP.B   #$1,D7
000019B4  6700 1812               1185              BEQ     WORD
000019B8  BE3C 0002               1186              CMP.B   #$2,D7
000019BC  6700 181A               1187              BEQ     LONG
000019C0  BE3C 0004               1188              CMP.B   #$4,D7
000019C4  6700 17F2               1189              BEQ     BYTE
000019C8  BE3C 0005               1190              CMP.B   #$5,D7
000019CC  6700 17FA               1191              BEQ     WORD
000019D0  BE3C 0006               1192              CMP.B   #$6,D7
000019D4  6700 1802               1193              BEQ     LONG
000019D8  6000 1844               1194              BRA     EXIT
000019DC                          1195  
000019DC                          1196  
000019DC                          1197  
000019DC                          1198  *-----------------------------------------------------------
000019DC                          1199  * Test to see if we have a matching ADDA op code. If so
000019DC                          1200  * print out the memory address and the op code.
000019DC                          1201  *-----------------------------------------------------------
000019DC                          1202  MATCH_ADDA
000019DC  220A                    1203              MOVE.L  A2,D1
000019DE  143C 0010               1204              MOVE.B  #16,D2
000019E2  103C 000F               1205              MOVE.B  #15,D0
000019E6  4E4F                    1206              TRAP    #15
000019E8                          1207              
000019E8  43F9 000033BC           1208              LEA     MSG_ADDA,A1     *print ADDA
000019EE  103C 000E               1209              MOVE.B  #14,D0
000019F2  4E4F                    1210              TRAP    #15
000019F4                          1211              
000019F4                          1212              * PRINT SIZE
000019F4  3E12                    1213              MOVE.W  (A2),D7
000019F6  48E7 0120               1214              MOVEM.L A2/D7,-(SP)
000019FA  4EB9 00001B4E           1215              JSR     ADDA_SIZE_SUB
00001A00  4CDF 0480               1216              MOVEM.L (SP)+,A2/D7
00001A04                          1217              
00001A04  43F9 00003327           1218              LEA     SPACE,A1        
00001A0A  103C 000E               1219              MOVE.B  #14,D0
00001A0E  4E4F                    1220              TRAP    #15
00001A10                          1221              
00001A10                          1222              *TEST EA
00001A10  3E12                    1223              MOVE.W  (A2),D7
00001A12  48E7 0120               1224              MOVEM.L A2/D7,-(SP)
00001A16  4EB9 00001AEC           1225              JSR     T_ADDA_PRINT_SRC_EA    *test ea 
00001A1C  4CDF 0480               1226              MOVEM.L (SP)+,A2/D7
00001A20                          1227              
00001A20                          1228  
00001A20  BC3C 0001               1229              CMP.B   #$1,D6
00001A24  6700 17E6               1230              BEQ     INVAL_EA_NO_RTS
00001A28                          1231              
00001A28  3E12                    1232              MOVE.W  (A2),D7
00001A2A  48E7 0120               1233              MOVEM.L A2/D7,-(SP)
00001A2E  4EB9 00001A6C           1234              JSR     ADDA_P_SRC_EA    *print ea 
00001A34  4CDF 0480               1235              MOVEM.L (SP)+,A2/D7
00001A38                          1236              
00001A38                          1237              * PRINT COMMA
00001A38  43F9 000033AA           1238              LEA     MSG_COMMA,A1
00001A3E  103C 000E               1239              MOVE.B  #14,D0
00001A42  4E4F                    1240              TRAP    #15
00001A44                          1241                  
00001A44  4287                    1242              CLR.L   D7
00001A46  3E12                    1243              MOVE.W  (A2),D7
00001A48                          1244              
00001A48                          1245              * PRINT ADDRESS REGISTER
00001A48  760D                    1246              MOVE.L  #13,D3
00001A4A  E94F                    1247              LSL.W   #4,D7
00001A4C  E66F                    1248              LSR.W   D3,D7   *get register bits 
00001A4E                          1249              
00001A4E  43F9 000033F4           1250              LEA     MSG_A,A1    *print An
00001A54  103C 000E               1251              MOVE.B  #14,D0
00001A58  4E4F                    1252              TRAP    #15
00001A5A                          1253   
00001A5A  7410                    1254              MOVE.L  #16,D2
00001A5C  2207                    1255              MOVE.L  D7,D1       *print register number of An
00001A5E  103C 000F               1256              MOVE.B  #15,D0
00001A62  4E4F                    1257              TRAP    #15
00001A64                          1258  
00001A64  244C                    1259              MOVEA.L A4,A2           *move A3 to A2 since absolute address may have been used
00001A66  548A                    1260              ADDA.L  #$2,A2          * Increase counter by long
00001A68                          1261  
00001A68  6000 F7CE               1262              BRA     INCREMENT       * Branch back up to main loop
00001A6C                          1263  ADDA_P_SRC_EA
00001A6C  3E12                    1264              MOVE.W  (A2),D7
00001A6E  760A                    1265              MOVE.L  #10,D3
00001A70  E76F                    1266              LSL.W   D3,D7   *shift D7 to right 13 to get the register
00001A72  760D                    1267              MOVE.L  #13,D3
00001A74  E66F                    1268              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00001A76                          1269  
00001A76  BE3C 0000               1270              CMP.B   #$0,D7
00001A7A  6700 16D6               1271              BEQ     DATA_R_S        *Dn
00001A7E  BE3C 0001               1272              CMP.B   #$1,D7
00001A82  6700 14E8               1273              BEQ     ADDY_R_SNP      *An
00001A86  BE3C 0002               1274              CMP.B   #$2,D7
00001A8A  6700 1528               1275              BEQ     ADDY_R_SP       *(An)
00001A8E  BE3C 0003               1276              CMP.B   #$3,D7
00001A92  6700 159A               1277              BEQ     ADDY_R_SPI      *(An)+
00001A96  BE3C 0004               1278              CMP.B   #$4,D7
00001A9A  6700 1624               1279              BEQ     ADDY_R_SPD      *-(An)
00001A9E  BE3C 0007               1280              CMP.B   #$7,D7
00001AA2  6700 0006               1281              BEQ     AI_M_S      *immediate or absolut addy
00001AA6  6000 1776               1282              BRA     EXIT
00001AAA                          1283  
00001AAA                          1284  AI_M_S
00001AAA  3E12                    1285              MOVE.W  (A2),D7
00001AAC  760D                    1286              MOVE.L  #13,D3
00001AAE  E76F                    1287              LSL.W   D3,D7
00001AB0  E66F                    1288              LSR.W   D3,D7
00001AB2  BE3C 0000               1289              CMP.B   #$0,D7
00001AB6  6700 13E4               1290              BEQ     W_ADDY *absolute addy word
00001ABA  BE3C 0001               1291              CMP.B   #$1,D7
00001ABE  6700 13FC               1292              BEQ     L_ADDY *absolute addy long
00001AC2  BE3C 0004               1293              CMP.B   #$4,D7
00001AC6  6700 0006               1294              BEQ     ADDA_IMM_DATA_S *immediate data
00001ACA                          1295              
00001ACA  6000 1752               1296              BRA     EXIT
00001ACE                          1297  
00001ACE                          1298               
00001ACE                          1299  ADDA_IMM_DATA_S            
00001ACE  3E12                    1300              MOVE.W  (A2),D7
00001AD0  EF4F                    1301              LSL.W   #7,D7   *shift D7 to right 10 to get the opmode
00001AD2  760D                    1302              MOVE.L  #13,D3
00001AD4  E66F                    1303              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00001AD6                          1304              *check if opmode bits are 3 or 7
00001AD6  548C                    1305              ADDA.L  #$2,A4 
00001AD8  BE3C 0003               1306              CMP.B   #$3,D7
00001ADC  6700 144A               1307              BEQ     IMM_DATA_SW
00001AE0  BE3C 0007               1308              CMP.B   #$7,D7
00001AE4  6700 141C               1309              BEQ     IMM_DATA_SL
00001AE8  6000 1734               1310              BRA     EXIT
00001AEC                          1311              
00001AEC                          1312              
00001AEC                          1313  T_ADDA_PRINT_SRC_EA *test if ADDA EA is valid or not
00001AEC  3E12                    1314              MOVE.W  (A2),D7
00001AEE  760A                    1315              MOVE.L  #10,D3
00001AF0  E76F                    1316              LSL.W   D3,D7   *shift D7 to right 13 to get the register
00001AF2  760D                    1317              MOVE.L  #13,D3
00001AF4  E66F                    1318              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00001AF6                          1319  
00001AF6  BE3C 0000               1320              CMP.B   #$0,D7          *mode is Dn
00001AFA  6700 1310               1321              BEQ     GOOD            *ea valid
00001AFE  BE3C 0001               1322              CMP.B   #$1,D7          
00001B02  6700 1308               1323              BEQ     GOOD
00001B06  BE3C 0002               1324              CMP.B   #$2,D7             *mode is (An)
00001B0A  6700 1300               1325              BEQ     GOOD       *(An) 
00001B0E  BE3C 0003               1326              CMP.B   #$3,D7
00001B12  6700 12F8               1327              BEQ     GOOD      *(An)+
00001B16  BE3C 0004               1328              CMP.B   #$4,D7
00001B1A  6700 12F0               1329              BEQ     GOOD      *-(An)
00001B1E  BE3C 0007               1330              CMP.B   #$7,D7
00001B22  6700 0006               1331              BEQ     T_ADDA_IMM_REG_S      *(xxx).W or (xxx).L or #<data>
00001B26  6000 16C0               1332              BRA     INVALID_EA
00001B2A                          1333              
00001B2A                          1334  T_ADDA_IMM_REG_S *EA is source for subtract opcode
00001B2A  3E12                    1335              MOVE.W  (A2),D7
00001B2C  760D                    1336              MOVE.L  #13,D3
00001B2E  E76F                    1337              LSL.W   D3,D7   *shift D7 to right 13 to get the register
00001B30  E66F                    1338              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00001B32                          1339              
00001B32  BE3C 0000               1340              CMP.B   #$0,D7
00001B36  6700 12D4               1341              BEQ     GOOD  *word absolute address
00001B3A  BE3C 0001               1342              CMP.B   #$1,D7
00001B3E  6700 12CC               1343              BEQ     GOOD  *long absolute address
00001B42  BE3C 0004               1344              CMP.B   #$4,D7
00001B46  6700 12C4               1345              BEQ     GOOD 
00001B4A                          1346              
00001B4A  6000 169C               1347              BRA     INVALID_EA  
00001B4E                          1348  
00001B4E                          1349  ADDA_SIZE_SUB                           * ADDA SIZE SUBROUTINE START
00001B4E                          1350              * SHIFT TO SIZE FIELD
00001B4E  EF4F                    1351              LSL.W   #7,D7
00001B50  760D                    1352              MOVE.L  #13,D3
00001B52  E66F                    1353              LSR.W   D3,D7
00001B54                          1354              * RUN COMPARISONS
00001B54  BE3C 0003               1355              CMP.B   #$3,D7
00001B58  6700 166E               1356              BEQ     WORD
00001B5C  BE3C 0007               1357              CMP.B   #$7,D7
00001B60  6700 1676               1358              BEQ     LONG
00001B64                          1359              
00001B64  6000 1682               1360              BRA     INVALID_EA
00001B68                          1361              
00001B68                          1362  *-----------------------------------------------------------
00001B68                          1363  * Test to see if we have a matching ADDQ op code. If so
00001B68                          1364  * print out the memory address and the op code.
00001B68                          1365  *-----------------------------------------------------------
00001B68                          1366  MATCH_ADDQ
00001B68  3E12                    1367              MOVE.W  (A2),D7
00001B6A  EE0F                    1368              LSR.B   #7,D7
00001B6C  BE3C 0002               1369              CMP.B   #$2,D7  *check if size bits are greater than 2 if so then NOOP
00001B70  6E00 F68C               1370              BGT     NOOP    
00001B74                          1371              
00001B74                          1372              * PRINT LINE NUMBER
00001B74  220A                    1373              MOVE.L  A2,D1
00001B76  143C 0010               1374              MOVE.B  #16,D2
00001B7A  103C 000F               1375              MOVE.B  #15,D0
00001B7E  4E4F                    1376              TRAP    #15
00001B80                          1377              
00001B80  43F9 000033C4           1378              LEA     MSG_ADDQ,A1 *print ADDQ 
00001B86  103C 000E               1379              MOVE.B  #14,D0
00001B8A  4E4F                    1380              TRAP    #15
00001B8C                          1381              
00001B8C                          1382              
00001B8C                          1383              * PRINT SIZE
00001B8C  3E12                    1384              MOVE.W  (A2),D7
00001B8E  48E7 0120               1385              MOVEM.L A2/D7,-(SP)
00001B92  4EB9 00001BEE           1386              JSR     ADDQ_SIZE_SUB
00001B98  4CDF 0480               1387              MOVEM.L (SP)+,A2/D7
00001B9C                          1388              
00001B9C  43F9 00003327           1389              LEA     SPACE,A1        
00001BA2  103C 000E               1390              MOVE.B  #14,D0
00001BA6  4E4F                    1391              TRAP    #15
00001BA8                          1392              
00001BA8                          1393              * TEST PRINT EFFECTIVE ADDRESS
00001BA8  48E7 0120               1394              MOVEM.L A2/D7,-(SP)
00001BAC  4EB9 00001C38           1395              JSR     T_PRINT_EA_FSIXB
00001BB2  4CDF 0480               1396              MOVEM.L (SP)+,A2/D7
00001BB6                          1397              
00001BB6  BC3C 0001               1398              CMP.B   #$1,D6                 *if D6 has $1 that means that the test failed and now print INVALID EA    
00001BBA  6700 1650               1399              BEQ     INVAL_EA_NO_RTS
00001BBE                          1400              
00001BBE                          1401              
00001BBE                          1402              * TODO: PRINT DATA
00001BBE                          1403              * GET DATA
00001BBE  48E7 0120               1404              MOVEM.L A2/D7,-(SP)
00001BC2  4EB9 00001C0C           1405              JSR     ADDQ_DATA_SUB
00001BC8  4CDF 0480               1406              MOVEM.L (SP)+,A2/D7
00001BCC                          1407              
00001BCC                          1408              * PRINT COMMA
00001BCC  43F9 000033AA           1409              LEA     MSG_COMMA,A1
00001BD2  103C 000E               1410              MOVE.B  #14,D0
00001BD6  4E4F                    1411              TRAP    #15
00001BD8                          1412              
00001BD8                          1413              * PRINT EFFECTIVE ADDRESS
00001BD8  48E7 0120               1414              MOVEM.L A2/D7,-(SP)
00001BDC  4EB9 00001C8E           1415              JSR     PRINT_EA_FSIXB
00001BE2  4CDF 0480               1416              MOVEM.L (SP)+,A2/D7
00001BE6                          1417  
00001BE6  244C                    1418              MOVEA.L A4,A2           *move A3 to A2 since absolute address may have been used
00001BE8  548A                    1419              ADDA.L  #$2,A2          * Increase counter by long
00001BEA                          1420              
00001BEA                          1421  
00001BEA  6000 F64C               1422              BRA     INCREMENT       * Branch back up to main loop
00001BEE                          1423  
00001BEE                          1424  
00001BEE                          1425  ADDQ_SIZE_SUB             * ADDQ SIZE SUBROUTINE START
00001BEE                          1426              * SHIFT TO SIZE FIELD
00001BEE  EC0F                    1427              LSR.B   #6,D7
00001BF0                          1428              
00001BF0                          1429              * RUN COMPARISONS
00001BF0  BE3C 0000               1430              CMP.B   #$0,D7
00001BF4  6700 15C2               1431              BEQ     BYTE
00001BF8  BE3C 0001               1432              CMP.B   #$1,D7
00001BFC  6700 15CA               1433              BEQ     WORD
00001C00  BE3C 0002               1434              CMP.B   #$2,D7
00001C04  6700 15D2               1435              BEQ     LONG
00001C08  6000 1614               1436              BRA     EXIT
00001C0C                          1437              
00001C0C                          1438  ADDQ_DATA_SUB
00001C0C                          1439              * PRINT # SYMBOL
00001C0C  43F9 000033FC           1440              LEA     HASH_SIGN,A1
00001C12  103C 000E               1441              MOVE.B  #14,D0
00001C16  4E4F                    1442              TRAP    #15
00001C18                          1443              
00001C18                          1444              * PRINT HEX
00001C18  43F9 000033FA           1445              LEA     HEX_SIGN,A1
00001C1E  4E4F                    1446              TRAP    #15
00001C20                          1447              
00001C20                          1448              * SHIFT TO DATA
00001C20  E94F                    1449              LSL.W   #4,D7
00001C22  163C 000D               1450              MOVE.B  #13,D3
00001C26  E66F                    1451              LSR.W   D3,D7
00001C28                          1452              
00001C28                          1453              * PRINT DATA
00001C28  143C 0010               1454              MOVE.B  #16,D2
00001C2C  3207                    1455              MOVE.W  D7,D1
00001C2E  103C 000F               1456              MOVE.B  #15,D0
00001C32  4E4F                    1457              TRAP    #15
00001C34                          1458          
00001C34  6000 15E8               1459              BRA     EXIT
00001C38                          1460  
00001C38                          1461  T_PRINT_EA_FSIXB         *test for first 6 bits ea which is destination
00001C38  3E12                    1462              MOVE.W  (A2),D7
00001C3A  E50F                    1463              LSL.B   #2,D7   *get rid of destination mode bits
00001C3C  EA0F                    1464              LSR.B   #5,D7   *move source mode bits to first 3 bits of D7 
00001C3E  BE3C 0000               1465              CMP.B   #$0,D7
00001C42  6700 11C8               1466              BEQ     GOOD      
00001C46  BE3C 0001               1467              CMP.B   #$1,D7
00001C4A  6700 11C0               1468              BEQ     GOOD                *An
00001C4E  BE3C 0002               1469              CMP.B   #$2,D7
00001C52  6700 11B8               1470              BEQ     GOOD                *(An)
00001C56  BE3C 0003               1471              CMP.B   #$3,D7
00001C5A  6700 11B0               1472              BEQ     GOOD                *(An)+
00001C5E  BE3C 0004               1473              CMP.B   #$4,D7
00001C62  6700 11A8               1474              BEQ     GOOD                *-(An)
00001C66  BE3C 0007               1475              CMP.B   #$7,D7
00001C6A  6700 0006               1476              BEQ     T_IMM_REG_FSIXB
00001C6E  6000 1578               1477              BRA     INVALID_EA 
00001C72                          1478              
00001C72                          1479  T_IMM_REG_FSIXB     *first 6 bits EA immediate data or address
00001C72  4287                    1480              CLR.L     D7
00001C74  3E12                    1481              MOVE.W  (A2),D7         *get A2 data back to D7
00001C76  EB0F                    1482              LSL.B   #5,D7   *get rid of destination mode bits and source mode bits
00001C78  EA0F                    1483              LSR.B   #5,D7   *move source register bits to first 3 bits of D7 
00001C7A  BE3C 0000               1484              CMP.B   #$0,D7
00001C7E  6700 118C               1485              BEQ     GOOD    *word absolute address
00001C82  BE3C 0001               1486              CMP.B   #$1,D7
00001C86  6700 1184               1487              BEQ     GOOD    *long absolute address
00001C8A  6000 155C               1488              BRA     INVALID_EA
00001C8E                          1489  
00001C8E                          1490  PRINT_EA_FSIXB      *print what first 6 bits EA represent
00001C8E  E50F                    1491              LSL.B   #2,D7   *get rid of destination mode bits
00001C90  EA0F                    1492              LSR.B   #5,D7   *move source mode bits to first 3 bits of D7 
00001C92  BE3C 0000               1493              CMP.B   #$0,D7
00001C96  6700 14BA               1494              BEQ     DATA_R_S        *Dn
00001C9A  BE3C 0001               1495              CMP.B   #$1,D7
00001C9E  6700 12CC               1496              BEQ     ADDY_R_SNP      *An
00001CA2  BE3C 0002               1497              CMP.B   #$2,D7
00001CA6  6700 130C               1498              BEQ     ADDY_R_SP       *(An)
00001CAA  BE3C 0003               1499              CMP.B   #$3,D7
00001CAE  6700 137E               1500              BEQ     ADDY_R_SPI      *(An)+
00001CB2  BE3C 0004               1501              CMP.B   #$4,D7
00001CB6  6700 1408               1502              BEQ     ADDY_R_SPD      *-(An)
00001CBA  BE3C 0007               1503              CMP.B   #$7,D7
00001CBE  6700 0006               1504              BEQ     IMM_REG_FSIXB
00001CC2  6000 1524               1505              BRA     INVALID_EA  
00001CC6                          1506              
00001CC6                          1507  IMM_REG_FSIXB     *first 6 bits EA immediate data or address
00001CC6  4287                    1508              CLR.L     D7
00001CC8  3E12                    1509              MOVE.W  (A2),D7         *get A2 data back to D7
00001CCA  EB0F                    1510              LSL.B   #5,D7   *get rid of destination mode bits and source mode bits
00001CCC  EA0F                    1511              LSR.B   #5,D7   *move source register bits to first 3 bits of D7 
00001CCE  BE3C 0000               1512              CMP.B   #$0,D7
00001CD2  6700 11C8               1513              BEQ     W_ADDY  *word absolute address
00001CD6  BE3C 0001               1514              CMP.B   #$1,D7
00001CDA  6700 11E0               1515              BEQ     L_ADDY  *long absolute address
00001CDE  6000 1508               1516              BRA     INVALID_EA  
00001CE2                          1517  
00001CE2                          1518  
00001CE2                          1519  
00001CE2                          1520  *-----------------------------------------------------------
00001CE2                          1521  * Test to see if we have a matching SUB op code. If so
00001CE2                          1522  * print out the memory address and the op code.
00001CE2                          1523  *-----------------------------------------------------------
00001CE2                          1524  MATCH_SUB
00001CE2                          1525              * PRINT LINE NUMBER    
00001CE2  220A                    1526              MOVE.L  A2,D1
00001CE4  143C 0010               1527              MOVE.B  #16,D2
00001CE8  103C 000F               1528              MOVE.B  #15,D0
00001CEC  4E4F                    1529              TRAP    #15
00001CEE  3E12                    1530              MOVE.W (A2),D7
00001CF0                          1531              
00001CF0                          1532              * PRINT SUB
00001CF0  43F9 000033CC           1533              LEA     MSG_SUB,A1
00001CF6  103C 000E               1534              MOVE.B  #14,D0
00001CFA  4E4F                    1535              TRAP    #15
00001CFC  3E12                    1536              MOVE.W  (A2),D7
00001CFE                          1537              
00001CFE                          1538              *GET SIZE SUB
00001CFE  48E7 0120               1539              MOVEM.L A2/D7,-(SP)
00001D02  4EB9 00001D7E           1540              JSR     SUBT_SIZE_SUB
00001D08  4CDF 0480               1541              MOVEM.L (SP)+,A2/D7
00001D0C                          1542              
00001D0C                          1543              * PRINT SPACE
00001D0C  43F9 00003327           1544              LEA     SPACE,A1        
00001D12  103C 000E               1545              MOVE.B  #14,D0
00001D16  4E4F                    1546              TRAP    #15
00001D18                          1547              
00001D18                          1548               *TEST GET SOURCE SUB
00001D18  3E12                    1549              MOVE.W  (A2),D7
00001D1A  48E7 0120               1550              MOVEM.L A2/D7,-(SP)
00001D1E  4EB9 00001E3A           1551              JSR     T_SUBTR_PRINT_SRC_EA
00001D24  4CDF 0480               1552              MOVEM.L (SP)+,A2/D7
00001D28                          1553              
00001D28  BC3C 0001               1554              CMP.B   #$1,D6              *if D6 has $1 that means that the test failed and now print INVALID EA    
00001D2C  6700 14DE               1555              BEQ     INVAL_EA_NO_RTS     
00001D30                          1556                     
00001D30                          1557              * TEST PRINT DEST MODE AND REGISTER
00001D30  3E12                    1558              MOVE.W  (A2),D7
00001D32  48E7 0120               1559              MOVEM.L A2/D7,-(SP)
00001D36  4EB9 00001E78           1560              JSR     T_SUBTR_PRINT_DEST_EA
00001D3C  4CDF 0480               1561              MOVEM.L (SP)+,A2/D7
00001D40                          1562              
00001D40  BC3C 0001               1563              CMP.B   #$1,D6              *if D6 has $1 that means that the test failed and now print INVALID EA    
00001D44  6700 14C6               1564              BEQ     INVAL_EA_NO_RTS
00001D48                          1565              
00001D48                          1566              *GET SOURCE SUB
00001D48  3E12                    1567              MOVE.W  (A2),D7
00001D4A  48E7 0120               1568              MOVEM.L A2/D7,-(SP)
00001D4E  4EB9 00002026           1569              JSR     SUBTR_PRINT_SRC_EA
00001D54  4CDF 0480               1570              MOVEM.L (SP)+,A2/D7
00001D58                          1571              
00001D58                          1572               * PRINT COMMA
00001D58  43F9 000033AA           1573              LEA     MSG_COMMA,A1
00001D5E  103C 000E               1574              MOVE.B  #14,D0
00001D62  4E4F                    1575              TRAP    #15
00001D64                          1576              
00001D64                          1577              * PRINT DEST MODE AND REGISTER
00001D64  3E12                    1578              MOVE.W  (A2),D7
00001D66  48E7 0120               1579              MOVEM.L A2/D7,-(SP)
00001D6A  4EB9 0000205E           1580              JSR     SUBTR_PRINT_DEST_EA
00001D70  4CDF 0480               1581              MOVEM.L (SP)+,A2/D7
00001D74                          1582  
00001D74                          1583              
00001D74  244C                    1584              MOVEA.L A4,A2           *move A3 to A2 since absolute address may have been used
00001D76  548A                    1585              ADDA.L  #$2,A2          * Increase counter by long
00001D78  4287                    1586              CLR.L   D7
00001D7A                          1587  
00001D7A                          1588  
00001D7A  6000 F4BC               1589              BRA     INCREMENT       * Branch back up to main loop
00001D7E                          1590  
00001D7E                          1591  SUBT_SIZE_SUB   *print the size of subtract
00001D7E  3E12                    1592              MOVE.W  (A2),D7
00001D80  EF4F                    1593              LSL.W   #7,D7   *get rid of first 6 bits of sub opcode
00001D82  363C 000D               1594              MOVE.W  #13,D3
00001D86  E66F                    1595              LSR.W   D3,D7   *shift D7 to right 13 to get the opmode
00001D88  BE3C 0000               1596              CMP.B   #$0,D7
00001D8C  6700 142A               1597              BEQ     BYTE
00001D90  BE3C 0001               1598              CMP.B   #$1,D7
00001D94  6700 1432               1599              BEQ     WORD
00001D98  BE3C 0002               1600              CMP.B   #$2,D7
00001D9C  6700 143A               1601              BEQ     LONG
00001DA0  BE3C 0004               1602              CMP.B   #$4,D7
00001DA4  6700 1412               1603              BEQ     BYTE
00001DA8  BE3C 0005               1604              CMP.B   #$5,D7
00001DAC  6700 141A               1605              BEQ     WORD
00001DB0  BE3C 0006               1606              CMP.B   #$6,D7
00001DB4  6700 1422               1607              BEQ     LONG
00001DB8  6000 1464               1608              BRA     EXIT
00001DBC                          1609              *ELSE BRANCH TO INVALID EA
00001DBC                          1610  
00001DBC                          1611  T_SOURCE_SUBTR_EA  
00001DBC  3E12                    1612              MOVE.W  (A2),D7
00001DBE  760A                    1613              MOVE.L  #10,D3
00001DC0  E76F                    1614              LSL.W   D3,D7   *shift D7 to right 13 to get the register
00001DC2  760D                    1615              MOVE.L  #13,D3
00001DC4  E66F                    1616              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00001DC6                          1617  
00001DC6  BE3C 0000               1618              CMP.B   #$0,D7          *mode is Dn
00001DCA  6700 1040               1619              BEQ     GOOD
00001DCE  BE3C 0001               1620              CMP.B   #$1,D7          
00001DD2  6700 0140               1621              BEQ     T_SUBTR_ADDY_R_SNP
00001DD6  BE3C 0002               1622              CMP.B   #$2,D7             *mode is (An)
00001DDA  6700 1030               1623              BEQ     GOOD       *(An) 
00001DDE  BE3C 0003               1624              CMP.B   #$3,D7
00001DE2  6700 1028               1625              BEQ     GOOD      *(An)+
00001DE6  BE3C 0004               1626              CMP.B   #$4,D7
00001DEA  6700 1020               1627              BEQ     GOOD      *-(An)
00001DEE  BE3C 0007               1628              CMP.B   #$7,D7
00001DF2  6700 00C0               1629              BEQ     T_SUBTR_IMM_REG_S      *(xxx).W or (xxx).L or #<data>
00001DF6  6000 13F0               1630              BRA     INVALID_EA
00001DFA                          1631  
00001DFA                          1632  T_DEST_SUBTR_EA  
00001DFA  4287                    1633              CLR.L   D7
00001DFC  3E12                    1634              MOVE.W  (A2),D7
00001DFE  760A                    1635              MOVE.L  #10,D3
00001E00  E76F                    1636              LSL.W   D3,D7   *shift D7 to right 10 to get the mode
00001E02  760D                    1637              MOVE.L  #13,D3
00001E04  E66F                    1638              LSR.W   D3,D7   *shift D7 to right 13 to get the mode
00001E06                          1639  
00001E06  BE3C 0000               1640              CMP.B   #$0,D7          *mode is Dn
00001E0A  6700 1000               1641              BEQ     GOOD 
00001E0E  BE3C 0001               1642              CMP.B   #$1,D7          
00001E12  6700 0100               1643              BEQ     T_SUBTR_ADDY_R_SNP
00001E16  BE3C 0002               1644              CMP.B   #$2,D7             *mode is (An)
00001E1A  6700 0FF0               1645              BEQ     GOOD      *(An) 
00001E1E  BE3C 0003               1646              CMP.B   #$3,D7
00001E22  6700 0FE8               1647              BEQ     GOOD      *(An)+
00001E26  BE3C 0004               1648              CMP.B   #$4,D7
00001E2A  6700 0FE0               1649              BEQ     GOOD      *-(An)
00001E2E  BE3C 0007               1650              CMP.B   #$7,D7
00001E32  6700 010C               1651              BEQ     T_SUBTR_IMM_REG_D      *(xxx).W or (xxx).L
00001E36  6000 13B0               1652              BRA     INVALID_EA
00001E3A                          1653              
00001E3A                          1654  T_SUBTR_PRINT_SRC_EA
00001E3A  4287                    1655              CLR.L   D7
00001E3C  3E12                    1656              MOVE.W  (A2),D7
00001E3E  EF4F                    1657              LSL.W   #7,D7   *get rid of first 6 bits of sub opcode
00001E40  760D                    1658              MOVE.L  #13,D3
00001E42  E66F                    1659              LSR.W   D3,D7   *shift D7 to right 13 to get the opmode
00001E44                          1660              
00001E44  BE3C 0000               1661              CMP.B   #$0,D7
00001E48  6700 FF72               1662              BEQ     T_SOURCE_SUBTR_EA  *DEST ea is DN
00001E4C  BE3C 0001               1663              CMP.B   #$1,D7
00001E50  6700 FF6A               1664              BEQ     T_SOURCE_SUBTR_EA  *DEST ea is DN
00001E54  BE3C 0002               1665              CMP.B   #$2,D7
00001E58  6700 FF62               1666              BEQ     T_SOURCE_SUBTR_EA  *DEST ea is DN
00001E5C  BE3C 0004               1667              CMP.B   #$4,D7
00001E60  6700 0FAA               1668              BEQ     GOOD   *SOURCE ea is DN
00001E64  BE3C 0005               1669              CMP.B   #$5,D7
00001E68  6700 0FA2               1670              BEQ     GOOD   *SOURCE ea is DN
00001E6C  BE3C 0006               1671              CMP.B   #$6,D7
00001E70  6700 0F9A               1672              BEQ     GOOD  *SOURCE ea is DN
00001E74  6000 1372               1673              BRA     INVALID_EA
00001E78                          1674              
00001E78                          1675              
00001E78                          1676  
00001E78                          1677  T_SUBTR_PRINT_DEST_EA
00001E78  3E12                    1678              MOVE.W  (A2),D7
00001E7A  EF4F                    1679              LSL.W   #7,D7   *get rid of first 6 bits of sub opcode
00001E7C  760D                    1680              MOVE.L  #13,D3
00001E7E  E66F                    1681              LSR.W   D3,D7   *shift D7 to right 13 to get the opmode
00001E80                          1682              
00001E80  BE3C 0000               1683              CMP.B   #$0,D7
00001E84  6700 0F86               1684              BEQ     GOOD  *DEST ea is DN
00001E88  BE3C 0001               1685              CMP.B   #$1,D7
00001E8C  6700 0F7E               1686              BEQ     GOOD  *DEST ea is DN
00001E90  BE3C 0002               1687              CMP.B   #$2,D7
00001E94  6700 0F76               1688              BEQ     GOOD  *DEST ea is DN
00001E98  BE3C 0004               1689              CMP.B   #$4,D7
00001E9C  6700 FF5C               1690              BEQ     T_DEST_SUBTR_EA   *source ea is DN
00001EA0  BE3C 0005               1691              CMP.B   #$5,D7
00001EA4  6700 FF54               1692              BEQ     T_DEST_SUBTR_EA   *source ea is DN
00001EA8  BE3C 0006               1693              CMP.B   #$6,D7
00001EAC  6700 FF4C               1694              BEQ     T_DEST_SUBTR_EA   *source ea is DN
00001EB0  6000 1336               1695              BRA     INVALID_EA
00001EB4                          1696  
00001EB4                          1697  T_SUBTR_IMM_REG_S *EA is source for subtract opcode
00001EB4  3E12                    1698              MOVE.W  (A2),D7
00001EB6  760D                    1699              MOVE.L  #13,D3
00001EB8  E76F                    1700              LSL.W   D3,D7   *shift D7 to right 13 to get the register
00001EBA  E66F                    1701              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00001EBC                          1702              
00001EBC  BE3C 0000               1703              CMP.B   #$0,D7
00001EC0  6700 0F4A               1704              BEQ     GOOD  *word absolute address
00001EC4  BE3C 0001               1705              CMP.B   #$1,D7
00001EC8  6700 0F42               1706              BEQ     GOOD  *long absolute address
00001ECC  BE3C 0004               1707              CMP.B   #$4,D7
00001ED0  6700 0006               1708              BEQ     T_SUBTR_IMM_DATA_S 
00001ED4                          1709              
00001ED4  6000 1312               1710              BRA     INVALID_EA
00001ED8                          1711              
00001ED8                          1712  T_SUBTR_IMM_DATA_S
00001ED8                          1713              
00001ED8  3E14                    1714              MOVE.W  (A4),D7
00001EDA  EF4F                    1715              LSL.W   #7,D7
00001EDC  760D                    1716              MOVE.L  #13,D3
00001EDE                          1717              
00001EDE  E66F                    1718              LSR.W   D3,D7       * SHIFT TO SIZE FIELD
00001EE0  BE3C 0000               1719              CMP.B   #$0,D7
00001EE4  6700 0F26               1720              BEQ     GOOD
00001EE8  BE3C 0001               1721              CMP.B   #$1,D7
00001EEC  6700 0F1E               1722              BEQ     GOOD
00001EF0  BE3C 0002               1723              CMP.B   #$2,D7
00001EF4  6700 0F16               1724              BEQ     GOOD
00001EF8  BE3C 0004               1725              CMP.B   #$4,D7
00001EFC  6700 0F0E               1726              BEQ     GOOD
00001F00  BE3C 0005               1727              CMP.B   #$5,D7
00001F04  6700 0F06               1728              BEQ     GOOD
00001F08  BE3C 0006               1729              CMP.B   #$6,D7
00001F0C  6700 0EFE               1730              BEQ     GOOD
00001F10                          1731              *if neither then it is an error
00001F10  6000 12D6               1732              BRA     INVALID_EA
00001F14                          1733  
00001F14                          1734  T_SUBTR_ADDY_R_SNP    *An but cannot be byte for opcode size of subtr
00001F14  3E14                    1735              MOVE.W  (A4),D7
00001F16  EF4F                    1736              LSL.W   #7,D7
00001F18                          1737              
00001F18  760D                    1738              MOVE.L  #13,D3
00001F1A  E66F                    1739              LSR.W   D3,D7
00001F1C  BE3C 0001               1740              CMP.B   #$1,D7
00001F20  6700 0EEA               1741              BEQ     GOOD 
00001F24  BE3C 0002               1742              CMP.B   #$2,D7
00001F28  6700 0EE2               1743              BEQ     GOOD
00001F2C  BE3C 0005               1744              CMP.B   #$5,D7
00001F30  6700 0EDA               1745              BEQ     GOOD
00001F34  BE3C 0006               1746              CMP.B   #$6,D7
00001F38  6700 0ED2               1747              BEQ     GOOD
00001F3C                          1748              *INVALID EA
00001F3C  6000 12AA               1749              BRA     INVALID_EA
00001F40                          1750  
00001F40                          1751              
00001F40                          1752  T_SUBTR_IMM_REG_D *EA is destination for subtract opcode
00001F40  3E12                    1753              MOVE.W  (A2),D7
00001F42  760D                    1754              MOVE.L  #13,D3
00001F44  E76F                    1755              LSL.W   D3,D7   *shift D7 to left 13 to get the register
00001F46  E66F                    1756              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00001F48                          1757              
00001F48  BE3C 0000               1758              CMP.B   #$0,D7
00001F4C  6700 0EBE               1759              BEQ     GOOD  *word absolute address
00001F50  BE3C 0001               1760              CMP.B   #$1,D7
00001F54  6700 0EB6               1761              BEQ     GOOD  *long absolute address
00001F58  6000 128E               1762              BRA     INVALID_EA
00001F5C                          1763  
00001F5C                          1764  
00001F5C                          1765  SOURCE_SUBTR_EA  
00001F5C  3E12                    1766              MOVE.W  (A2),D7
00001F5E  760A                    1767              MOVE.L  #10,D3
00001F60  E76F                    1768              LSL.W   D3,D7   *shift D7 to right 13 to get the register
00001F62  760D                    1769              MOVE.L  #13,D3
00001F64  E66F                    1770              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00001F66                          1771  
00001F66  BE3C 0000               1772              CMP.B   #$0,D7          *mode is Dn
00001F6A  6700 0094               1773              BEQ     F_SUBTR_DN_SRC 
00001F6E  BE3C 0001               1774              CMP.B   #$1,D7          mode is An NOT ALLOWED
00001F72  6700 0188               1775              BEQ     SUBTR_ADDY_R_SNP
00001F76  BE3C 0002               1776              CMP.B   #$2,D7             *mode is (An)
00001F7A  6700 1038               1777              BEQ     ADDY_R_SP       *(An) 
00001F7E  BE3C 0003               1778              CMP.B   #$3,D7
00001F82  6700 10AA               1779              BEQ     ADDY_R_SPI      *(An)+
00001F86  BE3C 0004               1780              CMP.B   #$4,D7
00001F8A  6700 1134               1781              BEQ     ADDY_R_SPD      *-(An)
00001F8E  BE3C 0007               1782              CMP.B   #$7,D7
00001F92  6700 0106               1783              BEQ     SUBTR_IMM_REG_S      *(xxx).W or (xxx).L or #<data>
00001F96  6000 1250               1784              BRA     INVALID_EA
00001F9A                          1785  
00001F9A                          1786  DEST_SUBTR_EA  
00001F9A  4287                    1787              CLR.L   D7
00001F9C  3E12                    1788              MOVE.W  (A2),D7
00001F9E  760A                    1789              MOVE.L  #10,D3
00001FA0  E76F                    1790              LSL.W   D3,D7   *shift D7 to right 10 to get the mode
00001FA2  760D                    1791              MOVE.L  #13,D3
00001FA4  E66F                    1792              LSR.W   D3,D7   *shift D7 to right 13 to get the mode
00001FA6                          1793  
00001FA6  BE3C 0000               1794              CMP.B   #$0,D7          *mode is Dn
00001FAA  6700 002E               1795              BEQ     F_SUBTR_DN 
00001FAE  BE3C 0001               1796              CMP.B   #$1,D7          
00001FB2  6700 0148               1797              BEQ     SUBTR_ADDY_R_SNP
00001FB6  BE3C 0002               1798              CMP.B   #$2,D7             *mode is (An)
00001FBA  6700 0FF8               1799              BEQ     ADDY_R_SP       *(An) 
00001FBE  BE3C 0003               1800              CMP.B   #$3,D7
00001FC2  6700 106A               1801              BEQ     ADDY_R_SPI      *(An)+
00001FC6  BE3C 0004               1802              CMP.B   #$4,D7
00001FCA  6700 10F4               1803              BEQ     ADDY_R_SPD      *-(An)
00001FCE  BE3C 0007               1804              CMP.B   #$7,D7
00001FD2  6700 0154               1805              BEQ     SUBTR_IMM_REG_D      *(xxx).W or (xxx).L
00001FD6  6000 1210               1806              BRA     INVALID_EA
00001FDA                          1807  
00001FDA                          1808  F_SUBTR_DN
00001FDA  4287                    1809              CLR.L   D7
00001FDC  3E12                    1810              MOVE.W  (A2),D7
00001FDE  E94F                    1811              LSL.W   #4,D7   *get rid of first 6 bits of sub opcode
00001FE0  760D                    1812              MOVE.L  #13,D3
00001FE2  E66F                    1813              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00001FE4  43F9 000033F2           1814              LEA     MSG_D,A1
00001FEA  103C 000E               1815              MOVE.B  #14,D0
00001FEE  4E4F                    1816              TRAP    #15
00001FF0  4281                    1817              CLR.L   D1
00001FF2  7410                    1818              MOVE.L  #16,D2
00001FF4  3207                    1819              MOVE.W  D7,D1
00001FF6  103C 000F               1820              MOVE.B  #15,D0
00001FFA  4E4F                    1821              TRAP    #15
00001FFC  6000 1220               1822              BRA EXIT      
00002000                          1823  
00002000                          1824  F_SUBTR_DN_SRC
00002000  4287                    1825              CLR.L   D7
00002002  3E12                    1826              MOVE.W  (A2),D7
00002004  760D                    1827              MOVE.L  #13,D3
00002006  E76F                    1828              LSL.W   D3,D7   *get rid of first 6 bits of sub opcode
00002008  E66F                    1829              LSR.W   D3,D7   *shift D7 to right 13 to get the register
0000200A  43F9 000033F2           1830              LEA     MSG_D,A1
00002010  103C 000E               1831              MOVE.B  #14,D0
00002014  4E4F                    1832              TRAP    #15
00002016  4281                    1833              CLR.L   D1
00002018  7410                    1834              MOVE.L  #16,D2
0000201A  3207                    1835              MOVE.W  D7,D1
0000201C  103C 000F               1836              MOVE.B  #15,D0
00002020  4E4F                    1837              TRAP    #15
00002022  6000 11FA               1838              BRA EXIT              
00002026                          1839              
00002026                          1840  SUBTR_PRINT_SRC_EA
00002026  4287                    1841              CLR.L   D7
00002028  3E12                    1842              MOVE.W  (A2),D7
0000202A  EF4F                    1843              LSL.W   #7,D7   *get rid of first 6 bits of sub opcode
0000202C  760D                    1844              MOVE.L  #13,D3
0000202E  E66F                    1845              LSR.W   D3,D7   *shift D7 to right 13 to get the opmode
00002030                          1846              
00002030  BE3C 0000               1847              CMP.B   #$0,D7
00002034  6700 FF26               1848              BEQ     SOURCE_SUBTR_EA  *DEST ea is DN
00002038  BE3C 0001               1849              CMP.B   #$1,D7
0000203C  6700 FF1E               1850              BEQ     SOURCE_SUBTR_EA  *DEST ea is DN
00002040  BE3C 0002               1851              CMP.B   #$2,D7
00002044  6700 FF16               1852              BEQ     SOURCE_SUBTR_EA  *DEST ea is DN
00002048  BE3C 0004               1853              CMP.B   #$4,D7
0000204C  678C                    1854              BEQ     F_SUBTR_DN   *SOURCE ea is DN
0000204E  BE3C 0005               1855              CMP.B   #$5,D7
00002052  6786                    1856              BEQ     F_SUBTR_DN   *SOURCE ea is DN
00002054  BE3C 0006               1857              CMP.B   #$6,D7
00002058  6780                    1858              BEQ     F_SUBTR_DN   *SOURCE ea is DN
0000205A  6000 118C               1859              BRA     INVALID_EA
0000205E                          1860  
0000205E                          1861  SUBTR_PRINT_DEST_EA
0000205E  3E12                    1862              MOVE.W  (A2),D7
00002060  EF4F                    1863              LSL.W   #7,D7   *get rid of first 6 bits of sub opcode
00002062  760D                    1864              MOVE.L  #13,D3
00002064  E66F                    1865              LSR.W   D3,D7   *shift D7 to right 13 to get the opmode
00002066                          1866              
00002066  BE3C 0000               1867              CMP.B   #$0,D7
0000206A  6700 FF6E               1868              BEQ     F_SUBTR_DN  *DEST ea is DN
0000206E  BE3C 0001               1869              CMP.B   #$1,D7
00002072  6700 FF66               1870              BEQ     F_SUBTR_DN  *DEST ea is DN
00002076  BE3C 0002               1871              CMP.B   #$2,D7
0000207A  6700 FF5E               1872              BEQ     F_SUBTR_DN  *DEST ea is DN
0000207E  BE3C 0004               1873              CMP.B   #$4,D7
00002082  6700 FF16               1874              BEQ     DEST_SUBTR_EA   *source ea is DN
00002086  BE3C 0005               1875              CMP.B   #$5,D7
0000208A  6700 FF0E               1876              BEQ     DEST_SUBTR_EA   *source ea is DN
0000208E  BE3C 0006               1877              CMP.B   #$6,D7
00002092  6700 FF06               1878              BEQ     DEST_SUBTR_EA   *source ea is DN
00002096  6000 1150               1879              BRA     INVALID_EA
0000209A                          1880              
0000209A                          1881  
0000209A                          1882  SUBTR_IMM_REG_S *EA is source for subtract opcode
0000209A  3E12                    1883              MOVE.W  (A2),D7
0000209C  760D                    1884              MOVE.L  #13,D3
0000209E  E76F                    1885              LSL.W   D3,D7   *shift D7 to right 13 to get the register
000020A0  E66F                    1886              LSR.W   D3,D7   *shift D7 to right 13 to get the register
000020A2                          1887              
000020A2  BE3C 0000               1888              CMP.B   #$0,D7
000020A6  6700 0DF4               1889              BEQ     W_ADDY  *word absolute address
000020AA  BE3C 0001               1890              CMP.B   #$1,D7
000020AE  6700 0E0C               1891              BEQ     L_ADDY  *long absolute address
000020B2  BE3C 0004               1892              CMP.B   #$4,D7
000020B6  6700 0006               1893              BEQ     SUBTR_IMM_DATA_S 
000020BA                          1894              
000020BA  6000 112C               1895              BRA     INVALID_EA
000020BE                          1896              
000020BE                          1897  SUBTR_IMM_DATA_S
000020BE                          1898              
000020BE  3E14                    1899              MOVE.W  (A4),D7
000020C0  EF4F                    1900              LSL.W   #7,D7
000020C2  760D                    1901              MOVE.L  #13,D3
000020C4                          1902              
000020C4  548C                    1903              ADDA.L  #$2,A4      *increment A4 by a word 
000020C6  E66F                    1904              LSR.W   D3,D7       * SHIFT TO SIZE FIELD
000020C8  BE3C 0000               1905              CMP.B   #$0,D7
000020CC  6700 0E5A               1906              BEQ     IMM_DATA_SW
000020D0  BE3C 0001               1907              CMP.B   #$1,D7
000020D4  6700 0E52               1908              BEQ     IMM_DATA_SW
000020D8  BE3C 0002               1909              CMP.B   #$2,D7
000020DC  6700 0E24               1910              BEQ     IMM_DATA_SL
000020E0  BE3C 0004               1911              CMP.B   #$4,D7
000020E4  6700 0E42               1912              BEQ     IMM_DATA_SW
000020E8  BE3C 0005               1913              CMP.B   #$5,D7
000020EC  6700 0E3A               1914              BEQ     IMM_DATA_SW
000020F0  BE3C 0006               1915              CMP.B   #$6,D7
000020F4  6700 0E0C               1916              BEQ     IMM_DATA_SL
000020F8                          1917              *if neither then it is an error
000020F8  6000 10EE               1918              BRA     INVALID_EA
000020FC                          1919  
000020FC                          1920  SUBTR_ADDY_R_SNP    *An but cannot be byte for opcode size of subtr
000020FC  3E14                    1921              MOVE.W  (A4),D7
000020FE  EF4F                    1922              LSL.W   #7,D7
00002100                          1923              
00002100  760D                    1924              MOVE.L  #13,D3
00002102  E66F                    1925              LSR.W   D3,D7
00002104  BE3C 0001               1926              CMP.B   #$1,D7
00002108  6700 0E62               1927              BEQ     ADDY_R_SNP 
0000210C  BE3C 0002               1928              CMP.B   #$2,D7
00002110  6700 0E5A               1929              BEQ     ADDY_R_SNP
00002114  BE3C 0005               1930              CMP.B   #$5,D7
00002118  6700 0E52               1931              BEQ     ADDY_R_SNP 
0000211C  BE3C 0006               1932              CMP.B   #$6,D7
00002120  6700 0E4A               1933              BEQ     ADDY_R_SNP
00002124                          1934              *INVALID EA
00002124  6000 10C2               1935              BRA     INVALID_EA
00002128                          1936  
00002128                          1937              
00002128                          1938  SUBTR_IMM_REG_D *EA is destination for subtract opcode
00002128  3E12                    1939              MOVE.W  (A2),D7
0000212A  760D                    1940              MOVE.L  #13,D3
0000212C  E76F                    1941              LSL.W   D3,D7   *shift D7 to left 13 to get the register
0000212E  E66F                    1942              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00002130                          1943              
00002130  BE3C 0000               1944              CMP.B   #$0,D7
00002134  6700 0D66               1945              BEQ     W_ADDY  *word absolute address
00002138  BE3C 0001               1946              CMP.B   #$1,D7
0000213C  6700 0D7E               1947              BEQ     L_ADDY  *long absolute address
00002140  6000 10A6               1948              BRA     INVALID_EA
00002144                          1949  
00002144                          1950  *-----------------------------------------------------------
00002144                          1951  * Test to see if we have a matching AND op code. If so
00002144                          1952  * print out the memory address and the op code.
00002144                          1953  *-----------------------------------------------------------
00002144                          1954  MATCH_AND
00002144                          1955              * PRINT LINE NUMBER
00002144  220A                    1956              MOVE.L  A2,D1
00002146  143C 0010               1957              MOVE.B  #16,D2
0000214A  103C 000F               1958              MOVE.B  #15,D0
0000214E  4E4F                    1959              TRAP    #15
00002150                          1960              
00002150  3E12                    1961              MOVE.W (A2),D7
00002152  E94F                    1962              LSL.W   #4,D7
00002154  760D                    1963              MOVE.L  #13,D3
00002156                          1964              
00002156                          1965              * PRINT AND
00002156  43F9 000033DA           1966              LEA     MSG_AND,A1
0000215C  103C 000E               1967              MOVE.B  #14,D0
00002160  4E4F                    1968              TRAP    #15
00002162  3E12                    1969              MOVE.W  (A2),D7
00002164                          1970              
00002164                          1971              *GET SIZE SUB
00002164  48E7 0120               1972              MOVEM.L A2/D7,-(SP)
00002168  4EB9 0000294A           1973              JSR     AND_SIZE_SUB
0000216E  4CDF 0480               1974              MOVEM.L (SP)+,A2/D7
00002172                          1975              
00002172                          1976              * PRINT SPACE
00002172  43F9 00003327           1977              LEA     SPACE,A1        
00002178  103C 000E               1978              MOVE.B  #14,D0
0000217C  4E4F                    1979              TRAP    #15
0000217E                          1980              
0000217E                          1981               *TEST GET SOURCE SUB
0000217E  3E12                    1982              MOVE.W  (A2),D7
00002180  48E7 0120               1983              MOVEM.L A2/D7,-(SP)
00002184  4EB9 00002A06           1984              JSR     T_AND_PRINT_SRC_EA
0000218A  4CDF 0480               1985              MOVEM.L (SP)+,A2/D7
0000218E                          1986              
0000218E  BC3C 0001               1987              CMP.B   #$1,D6              *if D6 has $1 that means that the test failed and now print INVALID EA    
00002192  6700 1078               1988              BEQ     INVAL_EA_NO_RTS     
00002196                          1989              
00002196                          1990              * TEST PRINT DEST MODE AND REGISTER
00002196  3E12                    1991              MOVE.W  (A2),D7
00002198  48E7 0120               1992              MOVEM.L A2/D7,-(SP)
0000219C  4EB9 00002A44           1993              JSR     T_AND_PRINT_DEST_EA
000021A2  4CDF 0480               1994              MOVEM.L (SP)+,A2/D7
000021A6                          1995              
000021A6  BC3C 0001               1996              CMP.B   #$1,D6              *if D6 has $1 that means that the test failed and now print INVALID EA    
000021AA  6700 1060               1997              BEQ     INVAL_EA_NO_RTS
000021AE                          1998  
000021AE                          1999              *GET SOURCE SUB
000021AE  3E12                    2000              MOVE.W  (A2),D7
000021B0  48E7 0120               2001              MOVEM.L A2/D7,-(SP)
000021B4  4EB9 00002BCC           2002              JSR     AND_PRINT_SRC_EA
000021BA  4CDF 0480               2003              MOVEM.L (SP)+,A2/D7
000021BE                          2004              
000021BE                          2005               * PRINT COMMA
000021BE  43F9 000033AA           2006              LEA     MSG_COMMA,A1
000021C4  103C 000E               2007              MOVE.B  #14,D0
000021C8  4E4F                    2008              TRAP    #15
000021CA                          2009              
000021CA                          2010              * PRINT DEST MODE AND REGISTER
000021CA  3E12                    2011              MOVE.W  (A2),D7
000021CC  48E7 0120               2012              MOVEM.L A2/D7,-(SP)
000021D0  4EB9 00002C04           2013              JSR     AND_PRINT_DEST_EA
000021D6  4CDF 0480               2014              MOVEM.L (SP)+,A2/D7
000021DA                          2015  
000021DA  244C                    2016              MOVEA.L A4,A2           *move A3 to A2 since absolute address may have been used
000021DC  548A                    2017              ADDA.L  #$2,A2          * Increase counter by long
000021DE  4287                    2018              CLR.L   D7
000021E0                          2019  
000021E0  6000 F056               2020              BRA     INCREMENT       * Branch back up to main loop
000021E4                          2021    
000021E4                          2022  *-----------------------------------------------------------
000021E4                          2023  * Test to see if we have a matching LEA op code. If so
000021E4                          2024  * print out the memory address and the op code.
000021E4                          2025  *-----------------------------------------------------------    
000021E4                          2026  MATCH_LEA
000021E4                          2027              
000021E4  3E12                    2028              MOVE.W  (A2),D7
000021E6  EF4F                    2029              LSL.W  #7,D7
000021E8                          2030              
000021E8  760D                    2031              MOVE.L  #13,D3
000021EA  E66F                    2032              LSR.W   D3,D7
000021EC                          2033              
000021EC  BE3C 0007               2034              CMP.B   #$7,D7  *if bits 6,7,8 are not all 1 then this is invalid LEA
000021F0  6600 F00C               2035              BNE     NOOP    
000021F4                          2036              
000021F4  220A                    2037              MOVE.L  A2,D1
000021F6  143C 0010               2038              MOVE.B  #16,D2
000021FA  103C 000F               2039              MOVE.B  #15,D0
000021FE  4E4F                    2040              TRAP    #15
00002200                          2041  
00002200  43F9 000033D3           2042              LEA     MSG_LEA,A1      * move constant DATA to A1
00002206  103C 000E               2043              MOVE.B  #14,D0          * prepare to print string in (A1)
0000220A  4E4F                    2044              TRAP    #15        
0000220C                          2045              
0000220C  43F9 00003327           2046              LEA     SPACE,A1        * Byte displacement
00002212  103C 000E               2047              MOVE.B  #14,D0
00002216  4E4F                    2048              TRAP    #15
00002218                          2049              
00002218                          2050              *TEST GET SOURCE SUB
00002218  3E12                    2051              MOVE.W  (A2),D7
0000221A  48E7 0120               2052              MOVEM.L A2/D7,-(SP)
0000221E  4EB9 00002270           2053              JSR     T_LEAS_EA
00002224  4CDF 0480               2054              MOVEM.L (SP)+,A2/D7
00002228                          2055              
00002228  BC3C 0001               2056              CMP.B   #$1,D6              *if D6 has $1 that means that the test failed and now print 
0000222C                          2057                                          *INVALID_EA
0000222C  6700 0FDE               2058              BEQ     INVAL_EA_NO_RTS
00002230                          2059              
00002230  3E12                    2060              MOVE.W  (A2),D7
00002232  48E7 0120               2061              MOVEM.L A2/D7,-(SP)
00002236  4EB9 000022CA           2062              JSR     LEA_EAS
0000223C  4CDF 0480               2063              MOVEM.L (SP)+,A2/D7
00002240                          2064              
00002240                          2065               * PRINT COMMA
00002240  43F9 000033AA           2066              LEA     MSG_COMMA,A1
00002246  103C 000E               2067              MOVE.B  #14,D0
0000224A  4E4F                    2068              TRAP    #15
0000224C                          2069              
0000224C                          2070              * PRINT ADDRESS REGISTER
0000224C  760D                    2071              MOVE.L  #13,D3
0000224E  E94F                    2072              LSL.W   #4,D7
00002250  E66F                    2073              LSR.W   D3,D7           *get register bits 
00002252                          2074              
00002252  43F9 000033F4           2075              LEA     MSG_A,A1        *print An
00002258  103C 000E               2076              MOVE.B  #14,D0
0000225C  4E4F                    2077              TRAP    #15
0000225E                          2078   
0000225E  7410                    2079              MOVE.L  #16,D2
00002260  2207                    2080              MOVE.L  D7,D1           *print register number of An
00002262  103C 000F               2081              MOVE.B  #15,D0
00002266  4E4F                    2082              TRAP    #15
00002268                          2083  
00002268  244C                    2084              MOVEA.L A4,A2           * move A3 to A2 since absolute address may have been used
0000226A  548A                    2085              ADDA.L  #$2,A2          * Increase counter by long
0000226C                          2086              
0000226C                          2087  
0000226C  6000 EFCA               2088              BRA     INCREMENT       * Branch back up to main loop
00002270                          2089              
00002270                          2090  T_LEAS_EA
00002270  3E12                    2091              MOVE.W  (A2),D7
00002272  760A                    2092              MOVE.L  #10,D3
00002274  E76F                    2093              LSL.W   D3,D7           *shift D7 to right 13 to get the register
00002276  760D                    2094              MOVE.L  #13,D3
00002278  E66F                    2095              LSR.W   D3,D7           *shift D7 to right 13 to get the register
0000227A                          2096  
0000227A  BE3C 0000               2097              CMP.B   #$0,D7          *mode is Dn
0000227E  6700 0F68               2098              BEQ     INVALID_EA      *ea valid
00002282  BE3C 0001               2099              CMP.B   #$1,D7          
00002286  6700 0F60               2100              BEQ     INVALID_EA
0000228A  BE3C 0002               2101              CMP.B   #$2,D7          *mode is (An)
0000228E  6700 0B7C               2102              BEQ     GOOD            *(An) 
00002292  BE3C 0003               2103              CMP.B   #$3,D7
00002296  6700 0F50               2104              BEQ     INVALID_EA      *(An)+
0000229A  BE3C 0004               2105              CMP.B   #$4,D7
0000229E  6700 0F48               2106              BEQ     INVALID_EA      *-(An)
000022A2  BE3C 0007               2107              CMP.B   #$7,D7
000022A6  6700 0006               2108              BEQ     T_LEAS_IMM_REG  *(xxx).W or (xxx).L or #<data>
000022AA  6000 0F3C               2109              BRA     INVALID_EA
000022AE                          2110  
000022AE                          2111  T_LEAS_IMM_REG 
000022AE  3E12                    2112              MOVE.W  (A2),D7
000022B0  760D                    2113              MOVE.L  #13,D3
000022B2  E76F                    2114              LSL.W   D3,D7
000022B4  E66F                    2115              LSR.W   D3,D7
000022B6  BE3C 0000               2116              CMP.B   #$0,D7
000022BA  6700 0B50               2117              BEQ     GOOD            *word absolute address
000022BE  BE3C 0001               2118              CMP.B   #$1,D7
000022C2  6700 0B48               2119              BEQ     GOOD            *long absolute address
000022C6  6000 0F20               2120              BRA     INVALID_EA  
000022CA                          2121  
000022CA                          2122  LEA_EAS
000022CA  3E12                    2123              MOVE.W  (A2),D7
000022CC  760A                    2124              MOVE.L  #10,D3
000022CE  E76F                    2125              LSL.W   D3,D7           *shift D7 to right 13 to get the register
000022D0  760D                    2126              MOVE.L  #13,D3
000022D2  E66F                    2127              LSR.W   D3,D7           *shift D7 to right 13 to get the register
000022D4                          2128  
000022D4  BE3C 0000               2129              CMP.B   #$0,D7          *mode is Dn
000022D8  6700 0F0E               2130              BEQ     INVALID_EA      *ea valid
000022DC  BE3C 0001               2131              CMP.B   #$1,D7          
000022E0  6700 0F06               2132              BEQ     INVALID_EA      *mode is An
000022E4  BE3C 0002               2133              CMP.B   #$2,D7             
000022E8  6700 0CCA               2134              BEQ     ADDY_R_SP       *(An)        
000022EC  BE3C 0003               2135              CMP.B   #$3,D7
000022F0  6700 0EF6               2136              BEQ     INVALID_EA      *(An)+
000022F4  BE3C 0004               2137              CMP.B   #$4,D7
000022F8  6700 0EEE               2138              BEQ     INVALID_EA      *-(An)
000022FC  BE3C 0007               2139              CMP.B   #$7,D7
00002300  6700 0006               2140              BEQ     LEAS_IMM_REG    *(xxx).W or (xxx).L or #<data>
00002304  6000 0EE2               2141              BRA     INVALID_EA
00002308                          2142  
00002308                          2143  
00002308                          2144  LEAS_IMM_REG 
00002308  3E12                    2145              MOVE.W  (A2),D7
0000230A  760D                    2146              MOVE.L  #13,D3
0000230C  E76F                    2147              LSL.W   D3,D7
0000230E  E66F                    2148              LSR.W   D3,D7
00002310  BE3C 0000               2149              CMP.B   #$0,D7
00002314  6700 0B86               2150              BEQ     W_ADDY          *word absolute address
00002318  BE3C 0001               2151              CMP.B   #$1,D7
0000231C  6700 0B9E               2152              BEQ     L_ADDY          *long absolute address
00002320  6000 0EC6               2153              BRA     INVALID_EA         
00002324                          2154  
00002324                          2155  
00002324                          2156  *-----------------------------------------------------------
00002324                          2157  * Test to see if we have a matching OR op code. If so
00002324                          2158  * print out the memory address and the op code.
00002324                          2159  *-----------------------------------------------------------
00002324                          2160  MATCH_OR
00002324                          2161              * PRINT LINE NUMBER
00002324  220A                    2162              MOVE.L  A2,D1
00002326  143C 0010               2163              MOVE.B  #16,D2
0000232A  103C 000F               2164              MOVE.B  #15,D0
0000232E  4E4F                    2165              TRAP    #15
00002330                          2166              
00002330  3E12                    2167              MOVE.W (A2),D7
00002332  E94F                    2168              LSL.W   #4,D7
00002334  760D                    2169              MOVE.L  #13,D3
00002336                          2170              
00002336                          2171              * PRINT OR
00002336  43F9 000033E1           2172              LEA     MSG_OR,A1  
0000233C  103C 000E               2173              MOVE.B  #14,D0
00002340  4E4F                    2174              TRAP    #15
00002342  3E12                    2175              MOVE.W  (A2),D7
00002344                          2176              
00002344                          2177              *GET SIZE SUB
00002344  48E7 0120               2178              MOVEM.L A2/D7,-(SP)
00002348  4EB9 0000294A           2179              JSR     AND_SIZE_SUB    *and same bit pattern as or
0000234E  4CDF 0480               2180              MOVEM.L (SP)+,A2/D7
00002352                          2181              
00002352                          2182              * PRINT SPACE
00002352  43F9 00003327           2183              LEA     SPACE,A1  
00002358  103C 000E               2184              MOVE.B  #14,D0
0000235C  4E4F                    2185              TRAP    #15
0000235E                          2186              
0000235E                          2187               *TEST GET SOURCE SUB
0000235E  3E12                    2188              MOVE.W  (A2),D7
00002360  48E7 0120               2189              MOVEM.L A2/D7,-(SP)
00002364  4EB9 00002A06           2190              JSR     T_AND_PRINT_SRC_EA  *OR same bit pattern as AND
0000236A  4CDF 0480               2191              MOVEM.L (SP)+,A2/D7
0000236E                          2192              
0000236E  BC3C 0001               2193              CMP.B   #$1,D6              *if D6 has $1 that means that the test failed and now print INVALID EA    
00002372                          2194  
00002372  6700 0E98               2195              BEQ     INVAL_EA_NO_RTS     
00002376                          2196              
00002376                          2197              * TEST PRINT DEST MODE AND REGISTER
00002376  3E12                    2198              MOVE.W  (A2),D7
00002378  48E7 0120               2199              MOVEM.L A2/D7,-(SP)
0000237C  4EB9 00002A44           2200              JSR     T_AND_PRINT_DEST_EA     *OR same bit pattern as AND
00002382  4CDF 0480               2201              MOVEM.L (SP)+,A2/D7
00002386                          2202              
00002386  BC3C 0001               2203              CMP.B   #$1,D6              *if D6 has $1 that means that the test failed and now print INVALID EA    
0000238A  6700 0E80               2204              BEQ     INVAL_EA_NO_RTS
0000238E                          2205  
0000238E                          2206              *GET SOURCE SUB
0000238E  3E12                    2207              MOVE.W  (A2),D7
00002390  48E7 0120               2208              MOVEM.L A2/D7,-(SP)
00002394  4EB9 00002BCC           2209              JSR     AND_PRINT_SRC_EA        *OR same bit pattern as AND
0000239A  4CDF 0480               2210              MOVEM.L (SP)+,A2/D7
0000239E                          2211              
0000239E                          2212               * PRINT COMMA
0000239E  43F9 000033AA           2213              LEA     MSG_COMMA,A1
000023A4  103C 000E               2214              MOVE.B  #14,D0
000023A8  4E4F                    2215              TRAP    #15
000023AA                          2216              
000023AA                          2217              * PRINT DEST MODE AND REGISTER
000023AA  3E12                    2218              MOVE.W  (A2),D7
000023AC  48E7 0120               2219              MOVEM.L A2/D7,-(SP)
000023B0  4EB9 00002C04           2220              JSR     AND_PRINT_DEST_EA       *OR same bit pattern as AND
000023B6  4CDF 0480               2221              MOVEM.L (SP)+,A2/D7
000023BA                          2222  
000023BA  244C                    2223              MOVEA.L A4,A2                   *move A3 to A2 since absolute address may have been used
000023BC  548A                    2224              ADDA.L  #$2,A2                  * Increase counter by long
000023BE  4287                    2225              CLR.L   D7
000023C0                          2226  
000023C0  6000 EE76               2227              BRA     INCREMENT               * Branch back up to main loop
000023C4                          2228  
000023C4                          2229  *-----------------------------------------------------------
000023C4                          2230  * Test to see if we have a matching Bcc op code. If so
000023C4                          2231  * print out the memory address and the op code.
000023C4                          2232  *6E = BGT, 6F = BLE, 67=BEQ
000023C4                          2233  *-----------------------------------------------------------
000023C4                          2234  MATCH_BCC
000023C4  3E12                    2235              MOVE.W  (A2),D7
000023C6  E05F                    2236              ROR.W   #$8,D7          * Rotate to get condition code. Rotate 2 bytes.
000023C8                          2237                                      
000023C8  BE3C 006E               2238              CMP.B   #$6E,D7
000023CC  6700 0016               2239              BEQ     MATCH_BGT       * Match BGT
000023D0                          2240              
000023D0  BE3C 006F               2241              CMP.B   #$6F,D7
000023D4  6700 0082               2242              BEQ     MATCH_BLE       * Match BGT
000023D8                          2243              
000023D8  BE3C 0067               2244              CMP.B   #$67,D7
000023DC  6700 00EE               2245              BEQ     MATCH_BEQ       * Match BEQ
000023E0                          2246              
000023E0  6000 EE1C               2247              BRA     NOOP            * Othwise its an opcode we do not handle
000023E4                          2248  
000023E4                          2249  MATCH_BGT                           * Matching BGT instruction
000023E4                          2250              * PRINT LINE NUMBER
000023E4  220A                    2251              MOVE.L  A2,D1
000023E6  143C 0010               2252              MOVE.B  #16,D2
000023EA  103C 000F               2253              MOVE.B  #15,D0
000023EE  4E4F                    2254              TRAP    #15
000023F0                          2255              
000023F0                          2256              * PRINT BGT
000023F0  43F9 0000335A           2257              LEA     MSG_BGT,A1
000023F6  103C 000E               2258              MOVE.B  #14,D0
000023FA  4E4F                    2259              TRAP    #15
000023FC                          2260              
000023FC  3E12                    2261              MOVE.W  (A2),D7
000023FE  BE3C 0000               2262              CMP.B   #$00,D7         * Compare to see if we have a word displacement or byte
00002402  6700 002A               2263              BEQ     EA_BGT_WORD
00002406                          2264              
00002406                          2265              * PRINT SPACE
00002406  43F9 00003327           2266              LEA     SPACE,A1        * Byte displacement
0000240C  103C 000E               2267              MOVE.B  #14,D0
00002410  4E4F                    2268              TRAP    #15
00002412                          2269              
00002412                          2270              * PRINT HEX
00002412  43F9 000033FA           2271              LEA     HEX_SIGN,A1     
00002418  4E4F                    2272              TRAP    #15
0000241A                          2273              
0000241A                          2274              * PRINT WORD
0000241A  4241                    2275              CLR     D1
0000241C  1207                    2276              MOVE.B  D7,D1
0000241E  143C 0010               2277              MOVE.B  #16,D2
00002422  103C 000F               2278              MOVE.B  #15,D0
00002426  4E4F                    2279              TRAP    #15
00002428                          2280              
00002428  548A                    2281              ADDA.L  #$2,A2
0000242A                          2282              
0000242A  6000 EE0C               2283              BRA     INCREMENT
0000242E                          2284              
0000242E                          2285  EA_BGT_WORD                         * Word displacement
0000242E                          2286              * PRINT SPACE
0000242E  548A                    2287              ADDA.L  #$2,A2            
00002430  43F9 00003327           2288              LEA     SPACE,A1
00002436  103C 000E               2289              MOVE.B  #14,D0
0000243A  4E4F                    2290              TRAP    #15
0000243C                          2291              
0000243C                          2292              * PRINT HEX
0000243C  43F9 000033FA           2293              LEA     HEX_SIGN,A1
00002442  4E4F                    2294              TRAP    #15
00002444                          2295              
00002444                          2296              * PRINT WORD
00002444  4241                    2297              CLR     D1
00002446  3212                    2298              MOVE.W  (A2),D1
00002448  143C 0010               2299              MOVE.B  #16,D2
0000244C  103C 000F               2300              MOVE.B  #15,D0
00002450  4E4F                    2301              TRAP    #15
00002452                          2302              
00002452  548A                    2303              ADDA.L  #$2,A2
00002454                          2304  
00002454  6000 EDE2               2305              BRA     INCREMENT
00002458                          2306  
00002458                          2307  MATCH_BLE                           * Match BLE instruction
00002458  220A                    2308              MOVE.L  A2,D1
0000245A  143C 0010               2309              MOVE.B  #16,D2
0000245E  103C 000F               2310              MOVE.B  #15,D0
00002462  4E4F                    2311              TRAP    #15
00002464                          2312              
00002464                          2313              * PRINT BLE
00002464  43F9 00003361           2314              LEA     MSG_BLE,A1
0000246A  103C 000E               2315              MOVE.B  #14,D0
0000246E  4E4F                    2316              TRAP    #15
00002470                          2317              
00002470  3E12                    2318              MOVE.W  (A2),D7
00002472  BE3C 0000               2319              CMP.B   #$00,D7         * Compare to see if we have a word displacement or byte
00002476  6700 002A               2320              BEQ     EA_BLE_WORD
0000247A                          2321              
0000247A                          2322              * PRINT SPACE
0000247A  43F9 00003327           2323              LEA     SPACE,A1
00002480  103C 000E               2324              MOVE.B  #14,D0
00002484  4E4F                    2325              TRAP    #15
00002486                          2326              
00002486                          2327              * PRINT HEX
00002486  43F9 000033FA           2328              LEA     HEX_SIGN,A1
0000248C  4E4F                    2329              TRAP    #15
0000248E                          2330              
0000248E                          2331              * PRINT WORD
0000248E  4241                    2332              CLR     D1
00002490  1207                    2333              MOVE.B  D7,D1
00002492  143C 0010               2334              MOVE.B  #16,D2
00002496  103C 000F               2335              MOVE.B  #15,D0
0000249A  4E4F                    2336              TRAP    #15
0000249C                          2337              
0000249C  548A                    2338              ADDA.L  #$2,A2
0000249E                          2339              
0000249E  6000 ED98               2340              BRA     INCREMENT
000024A2                          2341              
000024A2                          2342  EA_BLE_WORD                         * Word displacement
000024A2                          2343              * PRINT SPACE    
000024A2  548A                    2344              ADDA.L  #$2,A2            
000024A4  43F9 00003327           2345              LEA     SPACE,A1
000024AA  103C 000E               2346              MOVE.B  #14,D0
000024AE  4E4F                    2347              TRAP    #15
000024B0                          2348              
000024B0                          2349              * PRINT HEX
000024B0  43F9 000033FA           2350              LEA     HEX_SIGN,A1
000024B6  4E4F                    2351              TRAP    #15
000024B8                          2352              
000024B8                          2353              * PRINT WORD
000024B8  4241                    2354              CLR     D1
000024BA  3212                    2355              MOVE.W  (A2),D1
000024BC  143C 0010               2356              MOVE.B  #16,D2
000024C0  103C 000F               2357              MOVE.B  #15,D0
000024C4  4E4F                    2358              TRAP    #15
000024C6                          2359              
000024C6  548A                    2360              ADDA.L  #$2,A2
000024C8                          2361  
000024C8  6000 ED6E               2362              BRA     INCREMENT
000024CC                          2363  
000024CC                          2364  MATCH_BEQ                           * Match BEQ instruction
000024CC  220A                    2365              MOVE.L  A2,D1
000024CE  143C 0010               2366              MOVE.B  #16,D2
000024D2  103C 000F               2367              MOVE.B  #15,D0
000024D6  4E4F                    2368              TRAP    #15
000024D8                          2369              
000024D8                          2370              * PRINT BEQ
000024D8  43F9 00003368           2371              LEA     MSG_BEQ,A1
000024DE  103C 000E               2372              MOVE.B  #14,D0
000024E2  4E4F                    2373              TRAP    #15
000024E4                          2374                          
000024E4  3E12                    2375              MOVE.W  (A2),D7
000024E6  BE3C 0000               2376              CMP.B   #$00,D7         * Compare to see if we have a word displacement or byte
000024EA  6700 002A               2377              BEQ     EA_BEQ_WORD
000024EE                          2378              
000024EE                          2379              * PRINT SPACE
000024EE  43F9 00003327           2380              LEA     SPACE,A1
000024F4  103C 000E               2381              MOVE.B  #14,D0
000024F8  4E4F                    2382              TRAP    #15
000024FA                          2383              
000024FA                          2384              * PRINT HEX
000024FA  43F9 000033FA           2385              LEA     HEX_SIGN,A1
00002500  4E4F                    2386              TRAP    #15
00002502                          2387              
00002502                          2388              * PRINT WORD
00002502  4241                    2389              CLR     D1
00002504  1207                    2390              MOVE.B  D7,D1
00002506  143C 0010               2391              MOVE.B  #16,D2
0000250A  103C 000F               2392              MOVE.B  #15,D0
0000250E  4E4F                    2393              TRAP    #15
00002510                          2394              
00002510  548A                    2395              ADDA.L  #$2,A2
00002512                          2396              
00002512  6000 ED24               2397              BRA     INCREMENT
00002516                          2398              
00002516                          2399  EA_BEQ_WORD                         * Word displacement
00002516                          2400              * PRINT SPACE
00002516  548A                    2401              ADDA.L  #$2,A2            
00002518  43F9 00003327           2402              LEA     SPACE,A1
0000251E  103C 000E               2403              MOVE.B  #14,D0
00002522  4E4F                    2404              TRAP    #15
00002524                          2405              
00002524                          2406              * PRINT HEX
00002524  43F9 000033FA           2407              LEA     HEX_SIGN,A1
0000252A  4E4F                    2408              TRAP    #15
0000252C                          2409              
0000252C                          2410              * PRINT WORD
0000252C  4241                    2411              CLR     D1
0000252E  3212                    2412              MOVE.W  (A2),D1
00002530  143C 0010               2413              MOVE.B  #16,D2
00002534  103C 000F               2414              MOVE.B  #15,D0
00002538  4E4F                    2415              TRAP    #15
0000253A                          2416              
0000253A  548A                    2417              ADDA.L  #$2,A2
0000253C                          2418  
0000253C  6000 ECFA               2419              BRA     INCREMENT
00002540                          2420  
00002540                          2421  *-----------------------------------------------------------
00002540                          2422  * Test to see if we have a matching MOVE op code. If so
00002540                          2423  * print out the memory address and the op code.
00002540                          2424  *-----------------------------------------------------------
00002540                          2425  MATCH_MOVE
00002540  3E12                    2426              MOVE.W  (A2),D7
00002542  EC0F                    2427              LSR.B   #6,D7       *shift value in D7 to the right by 6 bits
00002544  0C07 0001               2428              CMPI.B  #$1,D7     *check if opcode is $1 if so it is MOVEA
00002548  6700 00AC               2429              BEQ     MATCH_MOVEA
0000254C                          2430  
0000254C  3E12                    2431              MOVE.W  (A2),D7
0000254E  363C 000C               2432              MOVE.W #12,D3
00002552                          2433              
00002552                          2434              * CHECK FOR NOOP
00002552  E66F                    2435              LSR.W   D3,D7
00002554  BE3C 0000               2436              CMP.B   #$00,D7
00002558  6700 ECA4               2437              BEQ     NOOP
0000255C                          2438              
0000255C  220A                    2439              MOVE.L  A2,D1
0000255E  143C 0010               2440              MOVE.B  #16,D2
00002562  103C 000F               2441              MOVE.B  #15,D0
00002566  4E4F                    2442              TRAP    #15
00002568  43F9 00003396           2443              LEA     MSG_MOVE,A1
0000256E  103C 000E               2444              MOVE.B  #14,D0
00002572  4E4F                    2445              TRAP    #15
00002574                          2446              
00002574                          2447              * PRINT SIZE
00002574  3E12                    2448              MOVE.W  (A2),D7
00002576  48E7 0120               2449              MOVEM.L A2/D7,-(SP)
0000257A  4EB9 00002CE4           2450              JSR     MOVE_SIZE_SUB
00002580  4CDF 0480               2451              MOVEM.L (SP)+,A2/D7
00002584                          2452              
00002584  43F9 0000332B           2453              LEA     SM_SPACE,A1        * Byte displacement
0000258A  103C 000E               2454              MOVE.B  #14,D0
0000258E  4E4F                    2455              TRAP    #15
00002590                          2456              
00002590  4286                    2457              CLR.L   D6
00002592                          2458              *TEST MOVE SRC
00002592  3E12                    2459              MOVE.W  (A2),D7
00002594  48E7 0120               2460              MOVEM.L A2/D7,-(SP)
00002598  4EB9 00002D34           2461              JSR     T_PRINT_SRC_EA
0000259E  4CDF 0480               2462              MOVEM.L (SP)+,A2/D7
000025A2                          2463              
000025A2  BC3C 0001               2464              CMP.B   #$1,D6
000025A6  6700 0C64               2465              BEQ     INVAL_EA_NO_RTS
000025AA                          2466              
000025AA                          2467              *TEST MOVE DEST
000025AA  3E12                    2468              MOVE.W  (A2),D7
000025AC  48E7 0120               2469              MOVEM.L A2/D7,-(SP)
000025B0  4EB9 00002D6C           2470              JSR     T_MOVE_MODE_DEST
000025B6  4CDF 0480               2471              MOVEM.L (SP)+,A2/D7
000025BA                          2472              
000025BA  BC3C 0001               2473              CMP.B   #$1,D6
000025BE  6700 0C4C               2474              BEQ     INVAL_EA_NO_RTS
000025C2                          2475              
000025C2                          2476              * PRINT SRC MODE AND REGISTER
000025C2  3E12                    2477              MOVE.W  (A2),D7
000025C4  48E7 0120               2478              MOVEM.L A2/D7,-(SP)
000025C8  4EB9 00002E0E           2479              JSR     PRINT_SRC_EA
000025CE  4CDF 0480               2480              MOVEM.L (SP)+,A2/D7
000025D2                          2481              
000025D2                          2482              * PRINT COMMA
000025D2  43F9 000033AA           2483              LEA     MSG_COMMA,A1
000025D8  103C 000E               2484              MOVE.B  #14,D0
000025DC  4E4F                    2485              TRAP    #15
000025DE                          2486              
000025DE                          2487              * PRINT DEST MODE AND REGISTER
000025DE  3E12                    2488              MOVE.W  (A2),D7
000025E0  48E7 0120               2489              MOVEM.L A2/D7,-(SP)
000025E4  4EB9 00002E46           2490              JSR     MOVE_MODE_DEST
000025EA  4CDF 0480               2491              MOVEM.L (SP)+,A2/D7
000025EE                          2492                 
000025EE  244C                    2493              MOVEA.L A4,A2           *move A3 to A2 since absolute address may have been used
000025F0  548A                    2494              ADDA.L  #$2,A2          * Increase counter by long
000025F2                          2495  
000025F2  6000 EC44               2496              BRA     INCREMENT       * Branch back up to main loop
000025F6                          2497              
000025F6                          2498  MATCH_MOVEA
000025F6  3E12                    2499              MOVE.W  (A2),D7
000025F8  363C 000C               2500              MOVE.W #12,D3
000025FC                          2501              
000025FC                          2502              * CHECK IF NOOP
000025FC  E66F                    2503              LSR.W   D3,D7
000025FE  BE3C 0000               2504              CMP.B   #$00,D7
00002602  6700 EBFA               2505              BEQ     NOOP
00002606  BE3C 0001               2506              CMP.B   #$1,D7
0000260A  6700 EBF2               2507              BEQ     NOOP
0000260E                          2508              
0000260E                          2509              * PRINT LINE NUMBER
0000260E  220A                    2510              MOVE.L  A2,D1
00002610  143C 0010               2511              MOVE.B  #16,D2
00002614  103C 000F               2512              MOVE.B  #15,D0
00002618  4E4F                    2513              TRAP    #15
0000261A                          2514              
0000261A                          2515              * PRINT MOVEA
0000261A  43F9 000033AC           2516              LEA     MSG_MOVEA,A1
00002620  103C 000E               2517              MOVE.B  #14,D0
00002624  4E4F                    2518              TRAP    #15
00002626                          2519              
00002626                          2520              * PRINT SIZE
00002626  3E12                    2521              MOVE.W  (A2),D7
00002628  48E7 0120               2522              MOVEM.L A2/D7,-(SP)
0000262C  4EB9 00002D04           2523              JSR     MOVEA_SIZE_SUB
00002632  4CDF 0480               2524              MOVEM.L (SP)+,A2/D7
00002636                          2525              
00002636                          2526              * PRINT SPACE
00002636  43F9 00003327           2527              LEA     SPACE,A1        
0000263C  103C 000E               2528              MOVE.B  #14,D0
00002640  4E4F                    2529              TRAP    #15
00002642                          2530              
00002642                          2531              *TEST EA
00002642  3E12                    2532              MOVE.W  (A2),D7
00002644  48E7 0120               2533              MOVEM.L A2/D7,-(SP)
00002648  4EB8 1AEC               2534              JSR     T_ADDA_PRINT_SRC_EA    *test ea 
0000264C  4CDF 0480               2535              MOVEM.L (SP)+,A2/D7
00002650                          2536              
00002650                          2537              * CHECK FOR INVALIDS
00002650  BC3C 0001               2538              CMP.B   #$1,D6
00002654  6700 0BB6               2539              BEQ     INVAL_EA_NO_RTS
00002658                          2540              
00002658  3E12                    2541              MOVE.W  (A2),D7
0000265A  48E7 0120               2542              MOVEM.L A2/D7,-(SP)
0000265E  4EB8 1A6C               2543              JSR     ADDA_P_SRC_EA    *print ea 
00002662  4CDF 0480               2544              MOVEM.L (SP)+,A2/D7
00002666                          2545              
00002666                          2546              * PRINT COMMA
00002666  43F9 000033AA           2547              LEA     MSG_COMMA,A1
0000266C  103C 000E               2548              MOVE.B  #14,D0
00002670  4E4F                    2549              TRAP    #15
00002672                          2550                  
00002672  4287                    2551              CLR.L   D7
00002674  3E12                    2552              MOVE.W  (A2),D7
00002676                          2553              
00002676                          2554              * PRINT ADDRESS REGISTER
00002676  760D                    2555              MOVE.L  #13,D3
00002678  E94F                    2556              LSL.W   #4,D7
0000267A  E66F                    2557              LSR.W   D3,D7   *get register bits 
0000267C                          2558              
0000267C  43F9 000033F4           2559              LEA     MSG_A,A1    *print An
00002682  103C 000E               2560              MOVE.B  #14,D0
00002686  4E4F                    2561              TRAP    #15
00002688                          2562   
00002688  7410                    2563              MOVE.L  #16,D2
0000268A  2207                    2564              MOVE.L  D7,D1       *print register number of An
0000268C  103C 000F               2565              MOVE.B  #15,D0
00002690  4E4F                    2566              TRAP    #15
00002692                          2567  
00002692  244C                    2568              MOVEA.L A4,A2           *move A3 to A2 since absolute address may have been used
00002694  548A                    2569              ADDA.L  #$2,A2          * Increase counter by long
00002696                          2570              
00002696  6000 EBA0               2571              BRA     INCREMENT       * Branch back up to main loop
0000269A                          2572  
0000269A                          2573  MATCH_MOVEM 
0000269A  3E12                    2574              MOVE.W  (A2),D7
0000269C  363C 000C               2575              MOVE.W #12,D3
000026A0                          2576              
000026A0                          2577              * CHECK IF NOOP
000026A0  E66F                    2578              LSR.W   D3,D7
000026A2  BE3C 0000               2579              CMP.B   #$00,D7
000026A6  6700 EB56               2580              BEQ     NOOP
000026AA  BE3C 0001               2581              CMP.B   #$1,D7
000026AE  6700 EB4E               2582              BEQ     NOOP
000026B2                          2583              
000026B2                          2584              * PRINT LINE NUMBER
000026B2  220A                    2585              MOVE.L  A2,D1
000026B4  143C 0010               2586              MOVE.B  #16,D2
000026B8  103C 000F               2587              MOVE.B  #15,D0
000026BC  4E4F                    2588              TRAP    #15
000026BE                          2589              
000026BE                          2590              * PRINT MOVEM
000026BE  43F9 00003384           2591              LEA     MSG_MOVEM,A1
000026C4  103C 000E               2592              MOVE.B  #14,D0
000026C8  4E4F                    2593              TRAP    #15
000026CA                          2594              
000026CA                          2595              * PRINT SIZE
000026CA  3E12                    2596              MOVE.W  (A2),D7
000026CC  48E7 0120               2597              MOVEM.L A2/D7,-(SP)
000026D0  4EB9 00002D1C           2598              JSR     MOVEM_SIZE_SUB
000026D6  4CDF 0480               2599              MOVEM.L (SP)+,A2/D7
000026DA                          2600              
000026DA                          2601              * PRINT SPACE
000026DA  43F9 00003327           2602              LEA     SPACE,A1
000026E0  103C 000E               2603              MOVE.B  #14,D0
000026E4  4E4F                    2604              TRAP    #15            
000026E6                          2605              
000026E6                          2606              * UNFINISHED, PRINT INVALID EA FOR NOW
000026E6  43F9 000033E7           2607              LEA     MSG_INV_EA,A1
000026EC  103C 000E               2608              MOVE.B  #14,D0
000026F0  4E4F                    2609              TRAP    #15
000026F2                          2610            
000026F2  244C                    2611              MOVEA.L A4,A2           * move A3 to A2 since absolute address may have been used
000026F4  548A                    2612              ADDA.L  #$2,A2          * Increase counter by long
000026F6                          2613  
000026F6  6000 EB40               2614              BRA     INCREMENT       * Branch back up to main loop
000026FA                          2615  
000026FA                          2616  *====================================================================
000026FA                          2617  *            Convert Ascii into Hex  (1st and 2nd Address)
000026FA                          2618  *====================================================================
000026FA                          2619  
000026FA                          2620  *-----------------------------------------------------------
000026FA                          2621  * Figure out the EA for a memory shift or rotate
000026FA                          2622  *-----------------------------------------------------------
000026FA                          2623  EA_MEM_SHIFT_ROTATE
000026FA  3E12                    2624              MOVE.W  (A2),D7
000026FC  CE7C 0038               2625              AND.W   #$0038,D7     * Get the three bits needed to determine the mode
00002700  BE7C 0010               2626              CMP.W   #$0010,D7     * See if (An) mode
00002704  6700 002E               2627              BEQ     EA_MEM_ADDREG
00002708  BE7C 0018               2628              CMP.W   #$0018,D7     * See if post increment mode
0000270C  6700 006A               2629              BEQ     EA_MEM_POST
00002710  BE7C 0020               2630              CMP.W   #$0020,D7     * See if pre decrement mode
00002714  6700 00AE               2631              BEQ     EA_MEM_PRE
00002718  BE7C 0038               2632              CMP.W   #$0038,D7     * See if absolute address mode
0000271C  6700 00F2               2633              BEQ     EA_MEM_ABS
00002720                          2634              
00002720                          2635              * Otherwise invalid EA
00002720  48E7 0120               2636              MOVEM.L A2/D7,-(SP)
00002724  4EB9 000031F0           2637              JSR     INVALID_EA_T2
0000272A  4CDF 0480               2638              MOVEM.L (SP)+,A2/D7
0000272E                          2639              
0000272E  244C                    2640              MOVEA.L A4,A2
00002730                          2641  
00002730  6000 EB06               2642              BRA     INCREMENT
00002734                          2643              
00002734                          2644     
00002734                          2645  
00002734                          2646  EA_MEM_ADDREG                       * EA is an absolute address register
00002734  3E12                    2647              MOVE.W  (A2),D7
00002736  CE7C 0007               2648              AND.W   #$0007,D7
0000273A                          2649              
0000273A                          2650              * PRINT SPACE
0000273A  43F9 00003327           2651              LEA     SPACE,A1
00002740  103C 000E               2652              MOVE.B  #14,D0
00002744  4E4F                    2653              TRAP    #15
00002746                          2654              
00002746                          2655              * PRINT LEFT PARENTHESIS
00002746  43F9 000033F6           2656              LEA     L_PAREN,A1
0000274C  4E4F                    2657              TRAP    #15
0000274E                          2658              
0000274E                          2659              * PRINT A
0000274E  43F9 000033F4           2660              LEA     MSG_A,A1
00002754  4E4F                    2661              TRAP    #15
00002756                          2662              
00002756                          2663              * PRINT EA
00002756  4241                    2664              CLR     D1
00002758  1207                    2665              MOVE.B  D7,D1
0000275A  143C 000A               2666              MOVE.B  #10,D2
0000275E  103C 000F               2667              MOVE.B  #15,D0
00002762  4E4F                    2668              TRAP    #15  
00002764                          2669              
00002764                          2670              * PRINT RIGHT PARENTHESIS
00002764  43F9 000033F8           2671              LEA     R_PAREN,A1
0000276A  103C 000E               2672              MOVE.B  #14,D0
0000276E  4E4F                    2673              TRAP    #15
00002770                          2674              
00002770  284A                    2675              MOVEA.L A2,A4
00002772  548C                    2676              ADDA.L  #$2,A4
00002774                          2677  
00002774  6000 0AA8               2678              BRA EXIT
00002778                          2679  
00002778                          2680  EA_MEM_POST                         * EA is post increment
00002778  3E12                    2681              MOVE.W  (A2),D7
0000277A  CE7C 0007               2682              AND.W   #$0007,D7
0000277E                          2683              
0000277E                          2684              * PRINT SPACE
0000277E  43F9 00003327           2685              LEA     SPACE,A1
00002784  103C 000E               2686              MOVE.B  #14,D0
00002788  4E4F                    2687              TRAP    #15
0000278A                          2688              
0000278A                          2689              * PRINT LEFT PARENTHESIS
0000278A  43F9 000033F6           2690              LEA     L_PAREN,A1
00002790  4E4F                    2691              TRAP    #15
00002792                          2692              
00002792                          2693              * PRINT A
00002792  43F9 000033F4           2694              LEA     MSG_A,A1
00002798  4E4F                    2695              TRAP    #15
0000279A                          2696              
0000279A                          2697              * PRINT EA
0000279A  4241                    2698              CLR     D1
0000279C  1207                    2699              MOVE.B  D7,D1
0000279E  143C 000A               2700              MOVE.B  #10,D2
000027A2  103C 000F               2701              MOVE.B  #15,D0
000027A6  4E4F                    2702              TRAP    #15  
000027A8                          2703              
000027A8                          2704              * PRINT RIGHT PARENTHESIS
000027A8  43F9 000033F8           2705              LEA     R_PAREN,A1
000027AE  103C 000E               2706              MOVE.B  #14,D0
000027B2  4E4F                    2707              TRAP    #15
000027B4                          2708              
000027B4                          2709              * PRINT PLUS
000027B4  43F9 000033FE           2710              LEA     PLUS,A1
000027BA  4E4F                    2711              TRAP    #15
000027BC                          2712              
000027BC  284A                    2713              MOVEA.L A2,A4
000027BE  548C                    2714              ADDA.L  #$2,A4
000027C0                          2715               
000027C0  6000 0A5C               2716              BRA EXIT
000027C4                          2717              
000027C4                          2718  EA_MEM_PRE                              * EA is pre decrement
000027C4  3E12                    2719              MOVE.W  (A2),D7
000027C6  CE7C 0007               2720              AND.W   #$0007,D7
000027CA                          2721              
000027CA                          2722              * PRINT SPACE
000027CA  43F9 00003327           2723              LEA     SPACE,A1
000027D0  103C 000E               2724              MOVE.B  #14,D0
000027D4  4E4F                    2725              TRAP    #15
000027D6                          2726              
000027D6                          2727              * PRINT MINUS
000027D6  43F9 00003400           2728              LEA     MINUS,A1
000027DC  4E4F                    2729              TRAP    #15
000027DE                          2730              
000027DE                          2731              * PRINT LEFT PARENTHESIS
000027DE  43F9 000033F6           2732              LEA     L_PAREN,A1
000027E4  4E4F                    2733              TRAP    #15
000027E6                          2734              
000027E6                          2735              * PRINT A
000027E6  43F9 000033F4           2736              LEA     MSG_A,A1
000027EC  4E4F                    2737              TRAP    #15
000027EE                          2738              
000027EE  4241                    2739              CLR     D1
000027F0  1207                    2740              MOVE.B  D7,D1
000027F2  143C 000A               2741              MOVE.B  #10,D2
000027F6  103C 000F               2742              MOVE.B  #15,D0
000027FA  4E4F                    2743              TRAP    #15  
000027FC                          2744              
000027FC                          2745              * PRINT RIGHT PARENTHESIS
000027FC  43F9 000033F8           2746              LEA     R_PAREN,A1
00002802  103C 000E               2747              MOVE.B  #14,D0
00002806  4E4F                    2748              TRAP    #15
00002808                          2749              
00002808  284A                    2750              MOVEA.L A2,A4
0000280A  548C                    2751              ADDA.L  #$2,A4
0000280C                          2752  
0000280C                          2753  
0000280C  6000 0A10               2754              BRA EXIT
00002810                          2755              
00002810                          2756  
00002810                          2757  EA_MEM_ABS                          * EA is immediate address
00002810  3E12                    2758              MOVE.W  (A2),D7
00002812  0807 0000               2759              BTST.L  #$00,D7         *See if word or long addressing
00002816  6600 002E               2760              BNE     EA_MEM_ABS_LONG
0000281A  284A                    2761              MOVEA.L A2,A4
0000281C                          2762              
0000281C  548C                    2763              ADDA.L  #$2,A4          *grab the word
0000281E                          2764              
0000281E                          2765              * PRINT SPACE
0000281E  43F9 00003327           2766              LEA     SPACE,A1
00002824  103C 000E               2767              MOVE.B  #14,D0
00002828  4E4F                    2768              TRAP    #15
0000282A                          2769              
0000282A                          2770              * PRINT HEX
0000282A  43F9 000033FA           2771              LEA     HEX_SIGN,A1
00002830  4E4F                    2772              TRAP    #15
00002832                          2773              
00002832                          2774              * PRINT WORD
00002832  4241                    2775              CLR     D1
00002834  3214                    2776              MOVE.W  (A4),D1
00002836  143C 0010               2777              MOVE.B  #16,D2
0000283A  103C 000F               2778              MOVE.B  #15,D0
0000283E  4E4F                    2779              TRAP    #15
00002840                          2780              
00002840  548C                    2781              ADDA.L  #2,A4           *increase counter
00002842                          2782              
00002842  6000 09DA               2783              BRA EXIT
00002846                          2784              
00002846                          2785  EA_MEM_ABS_LONG                     * EA is immediate long addressing
00002846  284A                    2786              MOVEA.L A2,A4
00002848  548C                    2787              ADDA.L  #$2,A4          *grab the first word
0000284A                          2788              
0000284A                          2789              * PRINT SPACE
0000284A  43F9 00003327           2790              LEA     SPACE,A1
00002850  103C 000E               2791              MOVE.B  #14,D0
00002854  4E4F                    2792              TRAP    #15
00002856                          2793              
00002856                          2794              * PRINT HEX
00002856  43F9 000033FA           2795              LEA     HEX_SIGN,A1
0000285C  4E4F                    2796              TRAP    #15
0000285E                          2797              
0000285E                          2798              * PRINT FIRST WORD
0000285E  4241                    2799              CLR     D1
00002860  3214                    2800              MOVE.W  (A4),D1
00002862  143C 0010               2801              MOVE.B  #16,D2
00002866  103C 000F               2802              MOVE.B  #15,D0
0000286A  4E4F                    2803              TRAP    #15
0000286C                          2804              
0000286C                          2805              * PRINT SECOND WORD
0000286C  548C                    2806              ADDA.L  #2,A4           *grab the second word
0000286E  4241                    2807              CLR     D1
00002870  3214                    2808              MOVE.W  (A4),D1
00002872  143C 0010               2809              MOVE.B  #16,D2
00002876  103C 000F               2810              MOVE.B  #15,D0
0000287A  4E4F                    2811              TRAP    #15
0000287C                          2812              
0000287C  548C                    2813              ADDA.L  #2,A4           *increase counter
0000287E                          2814  
0000287E  6000 099E               2815              BRA EXIT
00002882                          2816              
00002882                          2817  
00002882                          2818  *-----------------------------------------------------------
00002882                          2819  * Figure out EA for register shifts and rotates
00002882                          2820  *-----------------------------------------------------------
00002882                          2821  EA_SHIFT_ROTATE
00002882                          2822              *Getting EAs
00002882  3E12                    2823              MOVE.W  (A2),D7       *Find if immediate data or register shift
00002884  0807 0005               2824              BTST.L  #$05,D7
00002888  6600 006A               2825              BNE     REG_SHIFT     *Shifting by a register (1)
0000288C                          2826                  
0000288C                          2827              *IMMEDIATE DATA SHIFT (all 0s in count register = shift count of 8)
0000288C                          2828              * PRINT SPACE
0000288C  43F9 00003327           2829              LEA     SPACE,A1      
00002892  103C 000E               2830              MOVE.B  #14,D0
00002896  4E4F                    2831              TRAP    #15
00002898                          2832              
00002898                          2833              * PRINT HASH
00002898  43F9 000033FC           2834              LEA     HASH_SIGN,A1
0000289E  4E4F                    2835              TRAP    #15
000028A0                          2836              
000028A0                          2837              * PRINT HEX
000028A0  43F9 000033FA           2838              LEA     HEX_SIGN,A1
000028A6  4E4F                    2839              TRAP    #15
000028A8                          2840  
000028A8  CE7C 0E00               2841              AND.W   #$0E00,D7     *Get shift count
000028AC  BE7C 0000               2842              CMP.W   #$0000,D7     *edge case of shifting by 8
000028B0  6700 0024               2843              BEQ     SHIFT_EIGHT
000028B4  E04F                    2844              LSR.W   #8,D7         *Prepare to print out shift count
000028B6  E24F                    2845              LSR.W   #1,D7
000028B8                          2846              
000028B8  4241                    2847              CLR     D1
000028BA  1207                    2848              MOVE.B  D7,D1
000028BC  103C 000F               2849              MOVE.B  #15,D0
000028C0  143C 000A               2850              MOVE.B  #10,D2
000028C4  4E4F                    2851              TRAP    #15
000028C6                          2852              
000028C6                          2853              * PRINT COMMA
000028C6  43F9 000033AA           2854              LEA     MSG_COMMA,A1
000028CC  103C 000E               2855              MOVE.B  #14,D0
000028D0  4E4F                    2856              TRAP    #15
000028D2  6000 0056               2857              BRA     SHIFT_DEST
000028D6                          2858                 
000028D6                          2859  SHIFT_EIGHT                     * Data register shift by 8
000028D6  123C 0008               2860              MOVE.B  #8,D1
000028DA  103C 000F               2861              MOVE.B  #15,D0
000028DE  143C 000A               2862              MOVE.B  #10,D2
000028E2  4E4F                    2863              TRAP    #15
000028E4                          2864              
000028E4                          2865              * PRINT COMMA
000028E4  43F9 000033AA           2866              LEA     MSG_COMMA,A1
000028EA  103C 000E               2867              MOVE.B  #14,D0
000028EE  4E4F                    2868              TRAP    #15
000028F0  6000 0038               2869              BRA     SHIFT_DEST 
000028F4                          2870              
000028F4                          2871  REG_SHIFT                       * Register shift
000028F4                          2872              * PRINT D
000028F4  43F9 00003327           2873              LEA     SPACE,A1      
000028FA  103C 000E               2874              MOVE.B  #14,D0
000028FE  4E4F                    2875              TRAP    #15
00002900                          2876              
00002900                          2877              * PRINT D
00002900  43F9 000033F2           2878              LEA     MSG_D,A1
00002906  4E4F                    2879              TRAP    #15
00002908  CE7C 0E00               2880              AND.W   #$0E00,D7
0000290C  E04F                    2881              LSR.W   #8,D7         *Prepare to print out register number
0000290E  E24F                    2882              LSR.W   #1,D7
00002910                          2883              
00002910                          2884              * PRINT REG
00002910  4241                    2885              CLR     D1
00002912  1207                    2886              MOVE.B  D7,D1
00002914  103C 000F               2887              MOVE.B  #15,D0
00002918  143C 000A               2888              MOVE.B  #10,D2
0000291C  4E4F                    2889              TRAP    #15
0000291E                          2890              
0000291E                          2891              * PRINT COMMA
0000291E  43F9 000033AA           2892              LEA     MSG_COMMA,A1
00002924  103C 000E               2893              MOVE.B  #14,D0
00002928  4E4F                    2894              TRAP    #15
0000292A                          2895            
0000292A                          2896              
0000292A                          2897  SHIFT_DEST                      * Get shift Dest
0000292A  3E12                    2898              MOVE.W  (A2),D7
0000292C  CE7C 0007               2899              AND.W   #$0007,D7
00002930                          2900              
00002930                          2901              * PRINT D
00002930  43F9 000033F2           2902              LEA     MSG_D,A1
00002936  4E4F                    2903              TRAP    #15
00002938                          2904              
00002938                          2905              * PRINT DEST
00002938  4241                    2906              CLR     D1
0000293A  1207                    2907              MOVE.B  D7,D1
0000293C  103C 000F               2908              MOVE.B  #15,D0
00002940  143C 000A               2909              MOVE.B  #10,D2
00002944  4E4F                    2910              TRAP    #15
00002946  6000 08D6               2911              BRA     EXIT
0000294A                          2912  
0000294A                          2913  AND_SIZE_SUB   *print the size of and
0000294A  3E12                    2914              MOVE.W  (A2),D7
0000294C  EF4F                    2915              LSL.W   #7,D7   *get rid of first 6 bits of sub opcode
0000294E  363C 000D               2916              MOVE.W  #13,D3
00002952  E66F                    2917              LSR.W   D3,D7   *shift D7 to right 13 to get the opmode
00002954  BE3C 0000               2918              CMP.B   #$0,D7
00002958  6700 085E               2919              BEQ     BYTE
0000295C  BE3C 0001               2920              CMP.B   #$1,D7
00002960  6700 0866               2921              BEQ     WORD
00002964  BE3C 0002               2922              CMP.B   #$2,D7
00002968  6700 086E               2923              BEQ     LONG
0000296C  BE3C 0004               2924              CMP.B   #$4,D7
00002970  6700 0846               2925              BEQ     BYTE
00002974  BE3C 0005               2926              CMP.B   #$5,D7
00002978  6700 084E               2927              BEQ     WORD
0000297C  BE3C 0006               2928              CMP.B   #$6,D7
00002980  6700 0856               2929              BEQ     LONG
00002984  6000 0898               2930              BRA     EXIT
00002988                          2931              *ELSE BRANCH TO INVALID EA
00002988                          2932  
00002988                          2933  T_SOURCE_AND_EA  
00002988  3E12                    2934              MOVE.W  (A2),D7
0000298A  760A                    2935              MOVE.L  #10,D3
0000298C  E76F                    2936              LSL.W   D3,D7   *shift D7 to right 13 to get the register
0000298E  760D                    2937              MOVE.L  #13,D3
00002990  E66F                    2938              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00002992                          2939  
00002992  BE3C 0000               2940              CMP.B   #$0,D7          *mode is Dn
00002996  6700 0474               2941              BEQ     GOOD
0000299A  BE3C 0001               2942              CMP.B   #$1,D7          
0000299E  6700 0848               2943              BEQ     INVALID_EA
000029A2  BE3C 0002               2944              CMP.B   #$2,D7             *mode is (An)
000029A6  6700 0464               2945              BEQ     GOOD       *(An) 
000029AA  BE3C 0003               2946              CMP.B   #$3,D7
000029AE  6700 045C               2947              BEQ     GOOD      *(An)+
000029B2  BE3C 0004               2948              CMP.B   #$4,D7
000029B6  6700 0454               2949              BEQ     GOOD      *-(An)
000029BA  BE3C 0007               2950              CMP.B   #$7,D7
000029BE  6700 00C0               2951              BEQ     T_AND_IMM_REG_S      *(xxx).W or (xxx).L or #<data>
000029C2  6000 0824               2952              BRA     INVALID_EA
000029C6                          2953  
000029C6                          2954  T_DEST_AND_EA  
000029C6  4287                    2955              CLR.L   D7
000029C8  3E12                    2956              MOVE.W  (A2),D7
000029CA  760A                    2957              MOVE.L  #10,D3
000029CC  E76F                    2958              LSL.W   D3,D7   *shift D7 to right 10 to get the mode
000029CE  760D                    2959              MOVE.L  #13,D3
000029D0  E66F                    2960              LSR.W   D3,D7   *shift D7 to right 13 to get the mode
000029D2                          2961  
000029D2  BE3C 0000               2962              CMP.B   #$0,D7                  *mode is Dn
000029D6  6700 0434               2963              BEQ     GOOD 
000029DA  BE3C 0001               2964              CMP.B   #$1,D7          
000029DE  6700 0808               2965              BEQ     INVALID_EA
000029E2  BE3C 0002               2966              CMP.B   #$2,D7                  *mode is (An)
000029E6  6700 0424               2967              BEQ     GOOD                    *(An) 
000029EA  BE3C 0003               2968              CMP.B   #$3,D7
000029EE  6700 041C               2969              BEQ     GOOD                    *(An)+
000029F2  BE3C 0004               2970              CMP.B   #$4,D7
000029F6  6700 0414               2971              BEQ     GOOD                    *-(An)
000029FA  BE3C 0007               2972              CMP.B   #$7,D7
000029FE  6700 010C               2973              BEQ     T_AND_IMM_REG_D         *(xxx).W or (xxx).L
00002A02  6000 07E4               2974              BRA     INVALID_EA
00002A06                          2975              
00002A06                          2976  T_AND_PRINT_SRC_EA
00002A06  4287                    2977              CLR.L   D7
00002A08  3E12                    2978              MOVE.W  (A2),D7
00002A0A  EF4F                    2979              LSL.W   #7,D7   *get rid of first 6 bits of and opcode
00002A0C  760D                    2980              MOVE.L  #13,D3
00002A0E  E66F                    2981              LSR.W   D3,D7   *shift D7 to right 13 to get the opmode
00002A10                          2982              
00002A10  BE3C 0000               2983              CMP.B   #$0,D7
00002A14  6700 FF72               2984              BEQ     T_SOURCE_AND_EA  *DEST ea is DN
00002A18  BE3C 0001               2985              CMP.B   #$1,D7
00002A1C  6700 FF6A               2986              BEQ     T_SOURCE_AND_EA  *DEST ea is DN
00002A20  BE3C 0002               2987              CMP.B   #$2,D7
00002A24  6700 FF62               2988              BEQ     T_SOURCE_AND_EA  *DEST ea is DN
00002A28  BE3C 0004               2989              CMP.B   #$4,D7
00002A2C  6700 03DE               2990              BEQ     GOOD        *SOURCE ea is DN
00002A30  BE3C 0005               2991              CMP.B   #$5,D7
00002A34  6700 03D6               2992              BEQ     GOOD        *SOURCE ea is DN
00002A38  BE3C 0006               2993              CMP.B   #$6,D7
00002A3C  6700 03CE               2994              BEQ     GOOD        *SOURCE ea is DN
00002A40  6000 07A6               2995              BRA     INVALID_EA
00002A44                          2996              
00002A44                          2997              
00002A44                          2998  
00002A44                          2999  T_AND_PRINT_DEST_EA
00002A44  3E12                    3000              MOVE.W  (A2),D7
00002A46  EF4F                    3001              LSL.W   #7,D7   *get rid of first 6 bits of sub opcode
00002A48  760D                    3002              MOVE.L  #13,D3
00002A4A  E66F                    3003              LSR.W   D3,D7   *shift D7 to right 13 to get the opmode
00002A4C                          3004              
00002A4C  BE3C 0000               3005              CMP.B   #$0,D7
00002A50  6700 03BA               3006              BEQ     GOOD    *DEST ea is DN
00002A54  BE3C 0001               3007              CMP.B   #$1,D7
00002A58  6700 03B2               3008              BEQ     GOOD    *DEST ea is DN
00002A5C  BE3C 0002               3009              CMP.B   #$2,D7
00002A60  6700 03AA               3010              BEQ     GOOD    *DEST ea is DN
00002A64  BE3C 0004               3011              CMP.B   #$4,D7
00002A68  6700 FF5C               3012              BEQ     T_DEST_AND_EA   *source ea is DN
00002A6C  BE3C 0005               3013              CMP.B   #$5,D7
00002A70  6700 FF54               3014              BEQ     T_DEST_AND_EA   *source ea is DN
00002A74  BE3C 0006               3015              CMP.B   #$6,D7
00002A78  6700 FF4C               3016              BEQ     T_DEST_AND_EA   *source ea is DN
00002A7C  6000 076A               3017              BRA     INVALID_EA
00002A80                          3018  
00002A80                          3019  T_AND_IMM_REG_S *EA is source for and opcode
00002A80  3E12                    3020              MOVE.W  (A2),D7
00002A82  760D                    3021              MOVE.L  #13,D3
00002A84  E76F                    3022              LSL.W   D3,D7   *shift D7 to right 13 to get the register
00002A86  E66F                    3023              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00002A88                          3024              
00002A88  BE3C 0000               3025              CMP.B   #$0,D7
00002A8C  6700 037E               3026              BEQ     GOOD    *word absolute address
00002A90  BE3C 0001               3027              CMP.B   #$1,D7
00002A94  6700 0376               3028              BEQ     GOOD    *long absolute address
00002A98  BE3C 0004               3029              CMP.B   #$4,D7
00002A9C  6700 0006               3030              BEQ     T_AND_IMM_DATA_S 
00002AA0                          3031              
00002AA0  6000 0746               3032              BRA     INVALID_EA
00002AA4                          3033              
00002AA4                          3034  T_AND_IMM_DATA_S
00002AA4                          3035              
00002AA4  3E14                    3036              MOVE.W  (A4),D7
00002AA6  EF4F                    3037              LSL.W   #7,D7
00002AA8  760D                    3038              MOVE.L  #13,D3
00002AAA                          3039              
00002AAA  E66F                    3040              LSR.W   D3,D7       * SHIFT TO SIZE FIELD
00002AAC  BE3C 0000               3041              CMP.B   #$0,D7
00002AB0  6700 035A               3042              BEQ     GOOD
00002AB4  BE3C 0001               3043              CMP.B   #$1,D7
00002AB8  6700 0352               3044              BEQ     GOOD
00002ABC  BE3C 0002               3045              CMP.B   #$2,D7
00002AC0  6700 034A               3046              BEQ     GOOD
00002AC4  BE3C 0004               3047              CMP.B   #$4,D7
00002AC8  6700 0342               3048              BEQ     GOOD
00002ACC  BE3C 0005               3049              CMP.B   #$5,D7
00002AD0  6700 033A               3050              BEQ     GOOD
00002AD4  BE3C 0006               3051              CMP.B   #$6,D7
00002AD8  6700 0332               3052              BEQ     GOOD
00002ADC                          3053              *if neither then it is an error
00002ADC  6000 070A               3054              BRA     INVALID_EA
00002AE0                          3055  
00002AE0                          3056  T_AND_ADDY_R_SNP    *An but cannot be byte for opcode size of and
00002AE0  3E14                    3057              MOVE.W  (A4),D7
00002AE2  EF4F                    3058              LSL.W   #7,D7
00002AE4                          3059              
00002AE4  760D                    3060              MOVE.L  #13,D3
00002AE6  E66F                    3061              LSR.W   D3,D7
00002AE8  BE3C 0001               3062              CMP.B   #$1,D7
00002AEC  6700 031E               3063              BEQ     GOOD 
00002AF0  BE3C 0002               3064              CMP.B   #$2,D7
00002AF4  6700 0316               3065              BEQ     GOOD
00002AF8  BE3C 0005               3066              CMP.B   #$5,D7
00002AFC  6700 030E               3067              BEQ     GOOD
00002B00  BE3C 0006               3068              CMP.B   #$6,D7
00002B04  6700 0306               3069              BEQ     GOOD
00002B08                          3070              *INVALID EA
00002B08  6000 06DE               3071              BRA     INVALID_EA
00002B0C                          3072  
00002B0C                          3073              
00002B0C                          3074  T_AND_IMM_REG_D *EA is destination for and opcode
00002B0C  3E12                    3075              MOVE.W  (A2),D7
00002B0E  760D                    3076              MOVE.L  #13,D3
00002B10  E76F                    3077              LSL.W   D3,D7               *shift D7 to left 13 to get the register
00002B12  E66F                    3078              LSR.W   D3,D7               *shift D7 to right 13 to get the register
00002B14                          3079              
00002B14  BE3C 0000               3080              CMP.B   #$0,D7
00002B18  6700 02F2               3081              BEQ     GOOD                *word absolute address
00002B1C  BE3C 0001               3082              CMP.B   #$1,D7
00002B20  6700 02EA               3083              BEQ     GOOD                *long absolute address
00002B24  6000 06C2               3084              BRA     INVALID_EA
00002B28                          3085  
00002B28                          3086  
00002B28                          3087  SOURCE_AND_EA  
00002B28  3E12                    3088              MOVE.W  (A2),D7
00002B2A  760A                    3089              MOVE.L  #10,D3
00002B2C  E76F                    3090              LSL.W   D3,D7               *shift D7 to right 13 to get the register
00002B2E  760D                    3091              MOVE.L  #13,D3
00002B30  E66F                    3092              LSR.W   D3,D7               *shift D7 to right 13 to get the register
00002B32                          3093  
00002B32  BE3C 0000               3094              CMP.B   #$0,D7              *mode is Dn
00002B36  6700 006E               3095              BEQ     F_AND_DN 
00002B3A  BE3C 0001               3096              CMP.B   #$1,D7              *mode is An NOT ALLOWED
00002B3E  6700 06A8               3097              BEQ     INVALID_EA
00002B42  BE3C 0002               3098              CMP.B   #$2,D7              *mode is (An)
00002B46  6700 046C               3099              BEQ     ADDY_R_SP           *(An) 
00002B4A  BE3C 0003               3100              CMP.B   #$3,D7
00002B4E  6700 04DE               3101              BEQ     ADDY_R_SPI          *(An)+
00002B52  BE3C 0004               3102              CMP.B   #$4,D7
00002B56  6700 0568               3103              BEQ     ADDY_R_SPD          *-(An)
00002B5A  BE3C 0007               3104              CMP.B   #$7,D7
00002B5E  6700 00DA               3105              BEQ     AND_IMM_REG_S       *(xxx).W or (xxx).L or #<data>
00002B62  6000 0684               3106              BRA     INVALID_EA
00002B66                          3107  
00002B66                          3108  DEST_AND_EA  
00002B66  4287                    3109              CLR.L   D7
00002B68  3E12                    3110              MOVE.W  (A2),D7
00002B6A  760A                    3111              MOVE.L  #10,D3
00002B6C  E76F                    3112              LSL.W   D3,D7               *shift D7 to right 10 to get the mode
00002B6E  760D                    3113              MOVE.L  #13,D3
00002B70  E66F                    3114              LSR.W   D3,D7               *shift D7 to right 13 to get the mode
00002B72                          3115  
00002B72  BE3C 0000               3116              CMP.B   #$0,D7              *mode is Dn
00002B76  6700 002E               3117              BEQ     F_AND_DN 
00002B7A  BE3C 0001               3118              CMP.B   #$1,D7          
00002B7E  6700 0668               3119              BEQ     INVALID_EA
00002B82  BE3C 0002               3120              CMP.B   #$2,D7              *mode is (An)
00002B86  6700 042C               3121              BEQ     ADDY_R_SP           *(An) 
00002B8A  BE3C 0003               3122              CMP.B   #$3,D7
00002B8E  6700 049E               3123              BEQ     ADDY_R_SPI          *(An)+
00002B92  BE3C 0004               3124              CMP.B   #$4,D7
00002B96  6700 0528               3125              BEQ     ADDY_R_SPD          *-(An)
00002B9A  BE3C 0007               3126              CMP.B   #$7,D7
00002B9E  6700 0128               3127              BEQ     AND_IMM_REG_D       *(xxx).W or (xxx).L
00002BA2  6000 0644               3128              BRA     INVALID_EA
00002BA6                          3129  
00002BA6                          3130  F_AND_DN
00002BA6  4287                    3131              CLR.L   D7
00002BA8  3E12                    3132              MOVE.W  (A2),D7
00002BAA  E94F                    3133              LSL.W   #4,D7   *get rid of first 6 bits of sub opcode
00002BAC  760D                    3134              MOVE.L  #13,D3
00002BAE  E66F                    3135              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00002BB0  43F9 000033F2           3136              LEA     MSG_D,A1
00002BB6  103C 000E               3137              MOVE.B  #14,D0
00002BBA  4E4F                    3138              TRAP    #15
00002BBC  4281                    3139              CLR.L   D1
00002BBE  7410                    3140              MOVE.L  #16,D2
00002BC0  3207                    3141              MOVE.W  D7,D1
00002BC2  103C 000F               3142              MOVE.B  #15,D0
00002BC6  4E4F                    3143              TRAP    #15
00002BC8  6000 0654               3144              BRA EXIT      
00002BCC                          3145              
00002BCC                          3146              
00002BCC                          3147  AND_PRINT_SRC_EA
00002BCC  4287                    3148              CLR.L   D7
00002BCE  3E12                    3149              MOVE.W  (A2),D7
00002BD0  EF4F                    3150              LSL.W   #7,D7   *get rid of first 6 bits of sub opcode
00002BD2  760D                    3151              MOVE.L  #13,D3
00002BD4  E66F                    3152              LSR.W   D3,D7   *shift D7 to right 13 to get the opmode
00002BD6                          3153              
00002BD6  BE3C 0000               3154              CMP.B   #$0,D7
00002BDA  6700 FF4C               3155              BEQ     SOURCE_AND_EA  *DEST ea is DN
00002BDE  BE3C 0001               3156              CMP.B   #$1,D7
00002BE2  6700 FF44               3157              BEQ     SOURCE_AND_EA  *DEST ea is DN
00002BE6  BE3C 0002               3158              CMP.B   #$2,D7
00002BEA  6700 FF3C               3159              BEQ     SOURCE_AND_EA  *DEST ea is DN
00002BEE  BE3C 0004               3160              CMP.B   #$4,D7
00002BF2  67B2                    3161              BEQ     F_AND_DN   *SOURCE ea is DN
00002BF4  BE3C 0005               3162              CMP.B   #$5,D7
00002BF8  67AC                    3163              BEQ     F_AND_DN   *SOURCE ea is DN
00002BFA  BE3C 0006               3164              CMP.B   #$6,D7
00002BFE  67A6                    3165              BEQ     F_AND_DN   *SOURCE ea is DN
00002C00  6000 05E6               3166              BRA     INVALID_EA
00002C04                          3167  
00002C04                          3168  AND_PRINT_DEST_EA
00002C04  3E12                    3169              MOVE.W  (A2),D7
00002C06  EF4F                    3170              LSL.W   #7,D7   *get rid of first 6 bits of sub opcode
00002C08  760D                    3171              MOVE.L  #13,D3
00002C0A  E66F                    3172              LSR.W   D3,D7   *shift D7 to right 13 to get the opmode
00002C0C                          3173              
00002C0C  BE3C 0000               3174              CMP.B   #$0,D7
00002C10  6794                    3175              BEQ     F_AND_DN  *DEST ea is DN
00002C12  BE3C 0001               3176              CMP.B   #$1,D7
00002C16  678E                    3177              BEQ     F_AND_DN  *DEST ea is DN
00002C18  BE3C 0002               3178              CMP.B   #$2,D7
00002C1C  6788                    3179              BEQ     F_AND_DN  *DEST ea is DN
00002C1E  BE3C 0004               3180              CMP.B   #$4,D7
00002C22  6700 FF42               3181              BEQ     DEST_AND_EA   *source ea is DN
00002C26  BE3C 0005               3182              CMP.B   #$5,D7
00002C2A  6700 FF3A               3183              BEQ     DEST_AND_EA   *source ea is DN
00002C2E  BE3C 0006               3184              CMP.B   #$6,D7
00002C32  6700 FF32               3185              BEQ     DEST_AND_EA   *source ea is DN
00002C36  6000 05B0               3186              BRA     INVALID_EA
00002C3A                          3187              
00002C3A                          3188  
00002C3A                          3189  AND_IMM_REG_S *EA is source for and opcode
00002C3A  3E12                    3190              MOVE.W  (A2),D7
00002C3C  760D                    3191              MOVE.L  #13,D3
00002C3E  E76F                    3192              LSL.W   D3,D7   *shift D7 to right 13 to get the register
00002C40  E66F                    3193              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00002C42                          3194              
00002C42  BE3C 0000               3195              CMP.B   #$0,D7
00002C46  6700 0254               3196              BEQ     W_ADDY  *word absolute address
00002C4A  BE3C 0001               3197              CMP.B   #$1,D7
00002C4E  6700 026C               3198              BEQ     L_ADDY  *long absolute address
00002C52  BE3C 0004               3199              CMP.B   #$4,D7
00002C56  6700 0006               3200              BEQ     AND_IMM_DATA_S 
00002C5A                          3201              
00002C5A  6000 058C               3202              BRA     INVALID_EA
00002C5E                          3203              
00002C5E                          3204  AND_IMM_DATA_S
00002C5E                          3205              
00002C5E  3E14                    3206              MOVE.W  (A4),D7
00002C60  EF4F                    3207              LSL.W   #7,D7
00002C62  760D                    3208              MOVE.L  #13,D3
00002C64                          3209              
00002C64  548C                    3210              ADDA.L  #$2,A4      *increment A4 by a word 
00002C66  E66F                    3211              LSR.W   D3,D7       * SHIFT TO SIZE FIELD
00002C68  BE3C 0000               3212              CMP.B   #$0,D7
00002C6C  6700 02BA               3213              BEQ     IMM_DATA_SW
00002C70  BE3C 0001               3214              CMP.B   #$1,D7
00002C74  6700 02B2               3215              BEQ     IMM_DATA_SW
00002C78  BE3C 0002               3216              CMP.B   #$2,D7
00002C7C  6700 0284               3217              BEQ     IMM_DATA_SL
00002C80  BE3C 0004               3218              CMP.B   #$4,D7
00002C84  6700 02A2               3219              BEQ     IMM_DATA_SW
00002C88  BE3C 0005               3220              CMP.B   #$5,D7
00002C8C  6700 029A               3221              BEQ     IMM_DATA_SW
00002C90  BE3C 0006               3222              CMP.B   #$6,D7
00002C94  6700 026C               3223              BEQ     IMM_DATA_SL
00002C98                          3224              *if neither then it is an error
00002C98  6000 054E               3225              BRA     INVALID_EA
00002C9C                          3226  
00002C9C                          3227  AND_ADDY_R_SNP    *An but cannot be byte for opcode size of and
00002C9C  3E14                    3228              MOVE.W  (A4),D7
00002C9E  EF4F                    3229              LSL.W   #7,D7
00002CA0                          3230              
00002CA0  760D                    3231              MOVE.L  #13,D3
00002CA2  E66F                    3232              LSR.W   D3,D7
00002CA4  BE3C 0001               3233              CMP.B   #$1,D7
00002CA8  6700 02C2               3234              BEQ     ADDY_R_SNP 
00002CAC  BE3C 0002               3235              CMP.B   #$2,D7
00002CB0  6700 02BA               3236              BEQ     ADDY_R_SNP
00002CB4  BE3C 0005               3237              CMP.B   #$5,D7
00002CB8  6700 02B2               3238              BEQ     ADDY_R_SNP 
00002CBC  BE3C 0006               3239              CMP.B   #$6,D7
00002CC0  6700 02AA               3240              BEQ     ADDY_R_SNP
00002CC4                          3241              *INVALID EA
00002CC4  6000 0522               3242              BRA     INVALID_EA
00002CC8                          3243  
00002CC8                          3244              
00002CC8                          3245  AND_IMM_REG_D                           *EA is destination for and opcode
00002CC8  3E12                    3246              MOVE.W  (A2),D7
00002CCA  760D                    3247              MOVE.L  #13,D3
00002CCC  E76F                    3248              LSL.W   D3,D7               *shift D7 to left 13 to get the register
00002CCE  E66F                    3249              LSR.W   D3,D7               *shift D7 to right 13 to get the register
00002CD0                          3250              
00002CD0  BE3C 0000               3251              CMP.B   #$0,D7
00002CD4  6700 01C6               3252              BEQ     W_ADDY              *word absolute address
00002CD8  BE3C 0001               3253              CMP.B   #$1,D7
00002CDC  6700 01DE               3254              BEQ     L_ADDY              *long absolute address
00002CE0  6000 0506               3255              BRA     INVALID_EA
00002CE4                          3256   
00002CE4                          3257  MOVE_SIZE_SUB                           * MOVE SIZE SUBROUTINE START
00002CE4                          3258              * SHIFT TO SIZE FIELD
00002CE4  760C                    3259              MOVE.L  #12,D3
00002CE6  E66F                    3260              LSR.W   D3,D7
00002CE8                          3261              * RUN COMPARISONS
00002CE8  BE3C 0001               3262              CMP.B   #$1,D7
00002CEC  6700 04CA               3263              BEQ     BYTE
00002CF0  BE3C 0002               3264              CMP.B   #$2,D7
00002CF4  6700 04E2               3265              BEQ     LONG
00002CF8  BE3C 0003               3266              CMP.B   #$3,D7
00002CFC  6700 04CA               3267              BEQ     WORD
00002D00  6000 051C               3268              BRA     EXIT
00002D04                          3269              
00002D04                          3270  MOVEA_SIZE_SUB                           * MOVE SIZE SUBROUTINE START
00002D04                          3271              * SHIFT TO SIZE FIELD
00002D04  760C                    3272              MOVE.L  #12,D3
00002D06  E66F                    3273              LSR.W   D3,D7
00002D08                          3274              * RUN COMPARISONS
00002D08  BE3C 0002               3275              CMP.B   #$2,D7
00002D0C  6700 04CA               3276              BEQ     LONG
00002D10  BE3C 0003               3277              CMP.B   #$3,D7
00002D14  6700 04B2               3278              BEQ     WORD
00002D18  6000 0504               3279              BRA     EXIT
00002D1C                          3280              
00002D1C                          3281  MOVEM_SIZE_SUB                           * MOVE SIZE SUBROUTINE START
00002D1C                          3282              * SHIFT TO SIZE FIELD
00002D1C                          3283              *MOVE.L  #12,D3
00002D1C  E30F                    3284              LSL.B   #1,D7
00002D1E  EE0F                    3285              LSR.B   #7,D7
00002D20                          3286              * RUN COMPARISONS
00002D20  BE3C 0000               3287              CMP.B   #$0,D7
00002D24  6700 04A2               3288              BEQ     WORD
00002D28  BE3C 0001               3289              CMP.B   #$1,D7
00002D2C  6700 04AA               3290              BEQ     LONG
00002D30  6000 04EC               3291              BRA     EXIT
00002D34                          3292  
00002D34                          3293  T_PRINT_SRC_EA                          * MOVE MODE SRC SUBROUTINE START
00002D34  E50F                    3294              LSL.B   #2,D7               *get rid of destination mode bits
00002D36  EA0F                    3295              LSR.B   #5,D7               *move source mode bits to first 3 bits of D7 
00002D38  BE3C 0000               3296              CMP.B   #$0,D7
00002D3C  6700 00CE               3297              BEQ     GOOD      
00002D40  BE3C 0001               3298              CMP.B   #$1,D7
00002D44  6700 00C6               3299              BEQ     GOOD                *An
00002D48  BE3C 0002               3300              CMP.B   #$2,D7
00002D4C  6700 00BE               3301              BEQ     GOOD                *(An)
00002D50  BE3C 0003               3302              CMP.B   #$3,D7
00002D54  6700 00B6               3303              BEQ     GOOD                *(An)+
00002D58  BE3C 0004               3304              CMP.B   #$4,D7
00002D5C  6700 00AE               3305              BEQ     GOOD                *-(An)
00002D60  BE3C 0007               3306              CMP.B   #$7,D7
00002D64  6700 0040               3307              BEQ     T_IMM_REG_S
00002D68  6000 047E               3308              BRA     INVALID_EA 
00002D6C                          3309   
00002D6C                          3310  T_MOVE_MODE_DEST                        * MOVE MODE DEST SUBROUTINE START
00002D6C  EC4F                    3311              LSR.W   #6,D7
00002D6E  EB0F                    3312              LSL.B   #5,D7 
00002D70  EA0F                    3313              LSR.B   #5,D7               *dest mode now in first 3 bits of D7
00002D72  BE3C 0000               3314              CMP.B   #$0,D7              *mode is Dn
00002D76  6700 0094               3315              BEQ     GOOD
00002D7A  BE3C 0001               3316              CMP.B  #$1,D7               * mode is An NOT ALLOWED
00002D7E  6700 0468               3317              BEQ     INVALID_EA
00002D82  BE3C 0002               3318              CMP.B   #$2,D7              *mode is (An)
00002D86  6700 0084               3319              BEQ     GOOD                *(An) 
00002D8A  BE3C 0003               3320              CMP.B   #$3,D7
00002D8E  6700 007C               3321              BEQ     GOOD                *(An)+
00002D92  BE3C 0004               3322              CMP.B   #$4,D7
00002D96  6700 0074               3323              BEQ     GOOD                *-(An)
00002D9A  BE3C 0007               3324              CMP.B   #$7,D7
00002D9E  6700 004C               3325              BEQ     T_IMM_REG_D         *(xxx).W or (xxx).L or #<data>
00002DA2                          3326  
00002DA2  6000 0444               3327              BRA     INVALID_EA  
00002DA6                          3328  
00002DA6                          3329  T_IMM_REG_S     *SOURCE immediate data or address
00002DA6  4287                    3330              CLR.L     D7
00002DA8  3E12                    3331              MOVE.W  (A2),D7             *get A2 data back to D7
00002DAA  EB0F                    3332              LSL.B   #5,D7               *get rid of destination mode bits and source mode bits
00002DAC  EA0F                    3333              LSR.B   #5,D7               *move source register bits to first 3 bits of D7 
00002DAE  BE3C 0000               3334              CMP.B   #$0,D7
00002DB2  6700 0058               3335              BEQ     GOOD                *word absolute address
00002DB6  BE3C 0001               3336              CMP.B   #$1,D7
00002DBA  6700 0050               3337              BEQ     GOOD                *long absolute address
00002DBE  BE3C 0004               3338              CMP.B   #$4,D7
00002DC2  6700 0006               3339              BEQ     T_IMM_DATA_S
00002DC6  6000 0420               3340              BRA     INVALID_EA  
00002DCA                          3341  
00002DCA                          3342  T_IMM_DATA_S  *SOURCE IMMEDIATE DATA
00002DCA                          3343              *gotta go back to get the size and then get that amt of data
00002DCA                          3344              *by incrementing a A2 by a word and then getting the next byte word or long
00002DCA                          3345              *depending on the size of the move instruction
00002DCA                          3346              
00002DCA  3E14                    3347              MOVE.W  (A4),D7
00002DCC  760C                    3348              MOVE.L  #12,D3
00002DCE  E66F                    3349              LSR.W   D3,D7       * SHIFT TO SIZE FIELD
00002DD0  BE3C 0001               3350              CMP.B   #$1,D7
00002DD4  6700 0036               3351              BEQ     GOOD
00002DD8  BE3C 0002               3352              CMP.B   #$2,D7
00002DDC  6700 002E               3353              BEQ     GOOD
00002DE0  BE3C 0003               3354              CMP.B   #$3,D7
00002DE4  6700 0026               3355              BEQ     GOOD
00002DE8                          3356              *if neither then it is an error
00002DE8  6000 03FE               3357              BRA     INVALID_EA
00002DEC                          3358  
00002DEC                          3359  T_IMM_REG_D        *DESTINATION immediate data or address
00002DEC  3E12                    3360              MOVE.W  (A2),D7         *get A2 data back to D7
00002DEE  E94F                    3361              LSL.W   #4,D7   *get rid of size and opcode bits 
00002DF0  4243                    3362              CLR     D3
00002DF2  163C 000D               3363              MOVE.B  #13,D3
00002DF6                          3364              
00002DF6  E66F                    3365              LSR.W   D3,D7   *move destination register bits to first 3 bits of D7 
00002DF8  BE3C 0000               3366              CMP.B   #$0,D7
00002DFC  6700 000E               3367              BEQ     GOOD  
00002E00  BE3C 0001               3368              CMP.B   #$1,D7
00002E04  6700 0006               3369              BEQ     GOOD
00002E08                          3370              
00002E08  6000 03DE               3371              BRA     INVALID_EA
00002E0C                          3372  
00002E0C  4E75                    3373  GOOD        RTS
00002E0E                          3374              
00002E0E                          3375       
00002E0E                          3376  PRINT_SRC_EA                        * MOVE MODE SRC SUBROUTINE START
00002E0E  E50F                    3377              LSL.B   #2,D7           *get rid of destination mode bits
00002E10  EA0F                    3378              LSR.B   #5,D7           *move source mode bits to first 3 bits of D7 
00002E12  BE3C 0000               3379              CMP.B   #$0,D7
00002E16  6700 033A               3380              BEQ     DATA_R_S 
00002E1A  BE3C 0001               3381              CMP.B   #$1,D7
00002E1E  6700 014C               3382              BEQ     ADDY_R_SNP      *An
00002E22  BE3C 0002               3383              CMP.B   #$2,D7
00002E26  6700 018C               3384              BEQ     ADDY_R_SP       *(An)
00002E2A  BE3C 0003               3385              CMP.B   #$3,D7
00002E2E  6700 01FE               3386              BEQ     ADDY_R_SPI      *(An)+
00002E32  BE3C 0004               3387              CMP.B   #$4,D7
00002E36  6700 0288               3388              BEQ     ADDY_R_SPD      *-(An)
00002E3A  BE3C 0007               3389              CMP.B   #$7,D7
00002E3E  6700 0038               3390              BEQ     IMM_REG_S
00002E42  6000 03A4               3391              BRA     INVALID_EA  
00002E46                          3392     
00002E46                          3393  MOVE_MODE_DEST                      * MOVE MODE DEST SUBROUTINE START
00002E46  EC4F                    3394              LSR.W   #6,D7
00002E48                          3395              
00002E48  EB0F                    3396              LSL.B   #5,D7 
00002E4A  EA0F                    3397              LSR.B   #5,D7           *dest mode now in first 3 bits of D7
00002E4C  BE3C 0000               3398              CMP.B   #$0,D7          *mode is Dn
00002E50  6700 0324               3399              BEQ     DATA_R_D
00002E54                          3400              *CMP.B  #$1,D7          mode is An NOT ALLOWED
00002E54  BE3C 0002               3401              CMP.B   #$2,D7             *mode is (An)
00002E58  6700 0196               3402              BEQ     ADDY_R_DP       *(An) 
00002E5C  BE3C 0003               3403              CMP.B   #$3,D7
00002E60  6700 0214               3404              BEQ     ADDY_R_DPI      *(An)+
00002E64  BE3C 0004               3405              CMP.B   #$4,D7
00002E68  6700 029E               3406              BEQ     ADDY_R_DPD      *-(An)
00002E6C  BE3C 0007               3407              CMP.B   #$7,D7
00002E70  6700 00DA               3408              BEQ     IMM_REG_D      *(xxx).W or (xxx).L or #<data>
00002E74                          3409  
00002E74  6000 0372               3410              BRA     INVALID_EA    
00002E78                          3411  
00002E78                          3412  IMM_REG_S     *SOURCE immediate data or address
00002E78  4287                    3413              CLR.L     D7
00002E7A  3E12                    3414              MOVE.W  (A2),D7         *get A2 data back to D7
00002E7C  EB0F                    3415              LSL.B   #5,D7   *get rid of destination mode bits and source mode bits
00002E7E  EA0F                    3416              LSR.B   #5,D7   *move source register bits to first 3 bits of D7 
00002E80  BE3C 0000               3417              CMP.B   #$0,D7
00002E84  6700 0016               3418              BEQ     W_ADDY  *word absolute address
00002E88  BE3C 0001               3419              CMP.B   #$1,D7
00002E8C  6700 002E               3420              BEQ     L_ADDY  *long absolute address
00002E90  BE3C 0004               3421              CMP.B   #$4,D7
00002E94  6700 0048               3422              BEQ     IMM_DATA_S
00002E98  6000 034E               3423              BRA     INVALID_EA  
00002E9C                          3424  
00002E9C                          3425  W_ADDY      
00002E9C  43F9 000033FA           3426              LEA     HEX_SIGN,A1
00002EA2  103C 000E               3427              MOVE.B  #14,D0
00002EA6  4E4F                    3428              TRAP    #15
00002EA8                          3429              
00002EA8  3E1C                    3430              MOVE.W  (A4)+,D7    *increment A2 by a word, to get word of absolute data in A4
00002EAA  4287                    3431              CLR.L   D7          *get rid of opcode
00002EAC  3E14                    3432              MOVE.W  (A4),D7     *put next word into D7
00002EAE                          3433              
00002EAE  7410                    3434              MOVE.L  #16,D2
00002EB0  2207                    3435              MOVE.L  D7,D1
00002EB2  103C 000F               3436              MOVE.B  #15,D0
00002EB6  4E4F                    3437              TRAP    #15
00002EB8                          3438              
00002EB8  6000 0364               3439              BRA EXIT     
00002EBC                          3440              
00002EBC                          3441  L_ADDY
00002EBC  43F9 000033FA           3442              LEA     HEX_SIGN,A1
00002EC2  103C 000E               3443              MOVE.B  #14,D0
00002EC6  4E4F                    3444              TRAP    #15
00002EC8  3E1C                    3445              MOVE.W  (A4)+,D7    *increment A2 by a word
00002ECA  4287                    3446              CLR.L   D7
00002ECC  2E14                    3447              MOVE.L  (A4),D7     *put next word into D7
00002ECE  548C                    3448              ADDA.L  #$2,A4      *increment a word and then when we call INCREMENT routine
00002ED0                          3449                                  *(to be removed) it will increment another word to get the 
00002ED0                          3450                                  *address of the next opcode
00002ED0  7410                    3451              MOVE.L  #16,D2
00002ED2  2207                    3452              MOVE.L  D7,D1
00002ED4  103C 000F               3453              MOVE.B  #15,D0
00002ED8  4E4F                    3454              TRAP    #15
00002EDA                          3455              
00002EDA  6000 0342               3456              BRA EXIT
00002EDE                          3457  
00002EDE                          3458  IMM_DATA_S  *SOURCE IMMEDIATE DATA
00002EDE                          3459              *gotta go back to get the size and then get that amt of data
00002EDE                          3460              *by incrementing a A2 by a word and then getting the next byte word or long
00002EDE                          3461              *depending on the size of the move instruction
00002EDE                          3462              
00002EDE  3E14                    3463              MOVE.W  (A4),D7
00002EE0  760C                    3464              MOVE.L  #12,D3
00002EE2  548C                    3465              ADDA.L  #$2,A4      *increment A4 by a word 
00002EE4  E66F                    3466              LSR.W   D3,D7       * SHIFT TO SIZE FIELD
00002EE6  BE3C 0001               3467              CMP.B   #$1,D7
00002EEA  6700 003C               3468              BEQ     IMM_DATA_SW
00002EEE  BE3C 0002               3469              CMP.B   #$2,D7
00002EF2  6700 000E               3470              BEQ     IMM_DATA_SL
00002EF6  BE3C 0003               3471              CMP.B   #$3,D7
00002EFA  6700 002C               3472              BEQ     IMM_DATA_SW
00002EFE                          3473              *if neither then it is an error
00002EFE  6000 02E8               3474              BRA     INVALID_EA
00002F02                          3475  
00002F02                          3476  
00002F02                          3477  IMM_DATA_SL *long of immediate data
00002F02  4281                    3478              CLR.L   D1
00002F04  43F9 000033FC           3479              LEA     HASH_SIGN,A1
00002F0A  103C 000E               3480              MOVE.B  #14,D0
00002F0E  4E4F                    3481              TRAP    #15
00002F10                          3482              
00002F10  43F9 000033FA           3483              LEA     HEX_SIGN,A1
00002F16  4E4F                    3484              TRAP    #15
00002F18                          3485  
00002F18  2214                    3486              MOVE.L  (A4),D1             *move immediate data from A4 to D1
00002F1A  548C                    3487              ADDA.L  #$2,A4              *increment A4 by a word (will be incremented by another word in opcode method
00002F1C  7410                    3488              MOVE.L  #16,D2
00002F1E  103C 000F               3489              MOVE.B  #15,D0
00002F22  4E4F                    3490              TRAP    #15                 *print immediate data
00002F24  6000 02F8               3491              BRA     EXIT 
00002F28                          3492              
00002F28                          3493  IMM_DATA_SW *word of immediate data
00002F28  4281                    3494              CLR.L   D1
00002F2A  43F9 000033FC           3495              LEA     HASH_SIGN,A1
00002F30  103C 000E               3496              MOVE.B  #14,D0
00002F34  4E4F                    3497              TRAP    #15
00002F36  43F9 000033FA           3498              LEA     HEX_SIGN,A1
00002F3C  4E4F                    3499              TRAP    #15
00002F3E  3214                    3500              MOVE.W  (A4),D1             *move immediate data from A4 to D1
00002F40  7410                    3501              MOVE.L  #16,D2
00002F42  103C 000F               3502              MOVE.B  #15,D0
00002F46  4E4F                    3503              TRAP    #15
00002F48  6000 02D4               3504              BRA     EXIT 
00002F4C                          3505              
00002F4C                          3506  IMM_REG_D                               *DESTINATION immediate data or address
00002F4C  3E12                    3507              MOVE.W  (A2),D7             *get A2 data back to D7
00002F4E  E94F                    3508              LSL.W   #4,D7               *get rid of size and opcode bits 
00002F50  4243                    3509              CLR     D3
00002F52  163C 000D               3510              MOVE.B  #13,D3
00002F56                          3511              
00002F56  E66F                    3512              LSR.W   D3,D7               *move destination register bits to first 3 bits of D7 
00002F58  BE3C 0000               3513              CMP.B   #$0,D7
00002F5C  6700 FF3E               3514              BEQ     W_ADDY
00002F60  BE3C 0001               3515              CMP.B   #$1,D7
00002F64  6700 FF56               3516              BEQ     L_ADDY
00002F68                          3517              
00002F68  6000 027E               3518              BRA     INVALID_EA
00002F6C                          3519  
00002F6C                          3520  ADDY_R_SNP                              *SOURCE An
00002F6C                          3521              * PRINT A
00002F6C  43F9 000033F4           3522              LEA     MSG_A,A1
00002F72  103C 000E               3523              MOVE.B  #14,D0
00002F76  4E4F                    3524              TRAP    #15
00002F78                          3525              
00002F78                          3526              * GET SOURCE REGISTER #
00002F78  4287                    3527              CLR.L   D7
00002F7A  3E12                    3528              MOVE.W  (A2),D7
00002F7C  760D                    3529              MOVE.L  #13,D3              *prepare to move D7 by 13 bits to get source
00002F7E  E76F                    3530              LSL.W  D3,D7
00002F80  E66F                    3531              LSR.W  D3,D7
00002F82                          3532              
00002F82                          3533              * PRINT SOURCE REGISTER
00002F82  7410                    3534              MOVE.L  #16,D2
00002F84  2207                    3535              MOVE.L  D7,D1
00002F86  103C 000F               3536              MOVE.B  #15,D0
00002F8A  4E4F                    3537              TRAP    #15
00002F8C                          3538              
00002F8C  6000 0290               3539              BRA EXIT
00002F90                          3540              
00002F90                          3541  ADDY_R_DNP                              *An register in bits 11,10,12 of  D7
00002F90                          3542              * PRINT A
00002F90  43F9 000033F4           3543              LEA     MSG_A,A1
00002F96  103C 000E               3544              MOVE.B  #14,D0
00002F9A  4E4F                    3545              TRAP    #15
00002F9C                          3546              
00002F9C                          3547              * GET SOURCE REGISTER #
00002F9C  4287                    3548              CLR.L   D7
00002F9E  3E12                    3549              MOVE.W  (A2),D7
00002FA0  E94F                    3550              LSL.W   #4,D7
00002FA2  760D                    3551              MOVE.L  #13,D3              *prepare to move D7 by 13 bits to get source
00002FA4  E66F                    3552              LSR.W  D3,D7
00002FA6                          3553              
00002FA6                          3554              * PRINT SOURCE REGISTER
00002FA6  7410                    3555              MOVE.L  #16,D2
00002FA8  2207                    3556              MOVE.L  D7,D1
00002FAA  103C 000F               3557              MOVE.B  #15,D0
00002FAE  4E4F                    3558              TRAP    #15
00002FB0                          3559              
00002FB0  6000 026C               3560              BRA EXIT    
00002FB4                          3561  
00002FB4                          3562  
00002FB4                          3563  
00002FB4                          3564  ADDY_R_SP                               *SOURCE (An)
00002FB4                          3565              * PRINT LEFT PARENTHESIS
00002FB4  43F9 000033F6           3566              LEA     L_PAREN,A1
00002FBA  103C 000E               3567              MOVE.B  #14,D0
00002FBE  4E4F                    3568              TRAP    #15
00002FC0                          3569              
00002FC0                          3570              * PRINT A
00002FC0  43F9 000033F4           3571              LEA     MSG_A,A1
00002FC6  103C 000E               3572              MOVE.B  #14,D0
00002FCA  4E4F                    3573              TRAP    #15
00002FCC                          3574              
00002FCC                          3575              * GET SOURCE REGISTER #
00002FCC  4287                    3576              CLR.L   D7
00002FCE  3E12                    3577              MOVE.W  (A2),D7
00002FD0  760D                    3578              MOVE.L  #13,D3              *prepare to move D7 by 13 bits to get source
00002FD2  E76F                    3579              LSL.W  D3,D7
00002FD4  E66F                    3580              LSR.W  D3,D7
00002FD6                          3581              
00002FD6                          3582              * PRINT SOURCE REGISTER
00002FD6  7410                    3583              MOVE.L  #16,D2
00002FD8  2207                    3584              MOVE.L  D7,D1
00002FDA  103C 000F               3585              MOVE.B  #15,D0
00002FDE  4E4F                    3586              TRAP    #15
00002FE0                          3587              
00002FE0                          3588              * PRINT RIGHT PARENTHESIS
00002FE0  43F9 000033F8           3589              LEA     R_PAREN,A1
00002FE6  103C 000E               3590              MOVE.B  #14,D0
00002FEA  4E4F                    3591              TRAP    #15
00002FEC  6000 0230               3592              BRA EXIT     
00002FF0                          3593              
00002FF0                          3594  ADDY_R_DP                               *DESTINATION (An)
00002FF0                          3595              * PRINT LEFT PARENTHESIS
00002FF0  43F9 000033F6           3596              LEA     L_PAREN,A1
00002FF6  103C 000E               3597              MOVE.B  #14,D0
00002FFA  4E4F                    3598              TRAP    #15
00002FFC                          3599  
00002FFC                          3600              * PRINT A
00002FFC  43F9 000033F4           3601              LEA     MSG_A,A1
00003002  103C 000E               3602              MOVE.B  #14,D0
00003006  4E4F                    3603              TRAP    #15
00003008                          3604              
00003008                          3605              * GET DESTINATION REGISTER #
00003008  4287                    3606              CLR.L   D7
0000300A  3E12                    3607              MOVE.W  (A2),D7
0000300C  7609                    3608              MOVE.L  #9,D3
0000300E  E66F                    3609              LSR.W   D3,D7
00003010  EB0F                    3610              LSL.B   #5,D7
00003012  EA0F                    3611              LSR.B   #5,D7
00003014                          3612              
00003014                          3613              * PRINT DESTINATION REGISTER
00003014  7410                    3614              MOVE.L  #16,D2
00003016  2207                    3615              MOVE.L  D7,D1
00003018  103C 000F               3616              MOVE.B  #15,D0
0000301C  4E4F                    3617              TRAP    #15
0000301E                          3618              
0000301E                          3619              * PRINT RIGHT PARENTHESIS
0000301E  43F9 000033F8           3620              LEA     R_PAREN,A1
00003024  103C 000E               3621              MOVE.B  #14,D0
00003028  4E4F                    3622              TRAP    #15
0000302A                          3623              
0000302A  6000 01F2               3624              BRA EXIT    
0000302E                          3625              
0000302E                          3626  ADDY_R_SPI                              *SOURCE (An)+
0000302E                          3627              * PRINT LEFT PARENTHESIS
0000302E  43F9 000033F6           3628              LEA     L_PAREN,A1
00003034  103C 000E               3629              MOVE.B  #14,D0
00003038  4E4F                    3630              TRAP    #15
0000303A                          3631              
0000303A                          3632              * PRINT A
0000303A  43F9 000033F4           3633              LEA     MSG_A,A1
00003040  103C 000E               3634              MOVE.B  #14,D0
00003044  4E4F                    3635              TRAP    #15
00003046                          3636              
00003046                          3637              * GET SOURCE REGISTER #
00003046  4287                    3638              CLR.L   D7
00003048  3E12                    3639              MOVE.W  (A2),D7
0000304A  760D                    3640              MOVE.L  #13,D3              *prepare to move D7 by 13 bits to get source
0000304C  E76F                    3641              LSL.W  D3,D7
0000304E  E66F                    3642              LSR.W  D3,D7
00003050                          3643              
00003050                          3644              * PRINT SOURCE REGISTER
00003050  7410                    3645              MOVE.L  #16,D2
00003052  2207                    3646              MOVE.L  D7,D1
00003054  103C 000F               3647              MOVE.B  #15,D0
00003058  4E4F                    3648              TRAP    #15
0000305A                          3649              
0000305A                          3650              * PRINT RIGHT PARENTHESIS
0000305A  43F9 000033F8           3651              LEA     R_PAREN,A1
00003060  103C 000E               3652              MOVE.B  #14,D0
00003064  4E4F                    3653              TRAP    #15
00003066                          3654              
00003066                          3655              * PRINT PLUS
00003066  43F9 000033FE           3656              LEA     PLUS,A1
0000306C  103C 000E               3657              MOVE.B  #14,D0
00003070  4E4F                    3658              TRAP    #15
00003072  6000 01AA               3659              BRA EXIT     
00003076                          3660              
00003076                          3661  ADDY_R_DPI                              *DESTINATION (An)+
00003076                          3662              * PRINT LEFT PARENTHESIS
00003076  43F9 000033F6           3663              LEA     L_PAREN,A1
0000307C  103C 000E               3664              MOVE.B  #14,D0
00003080  4E4F                    3665              TRAP    #15
00003082                          3666  
00003082                          3667              * PRINT A
00003082  43F9 000033F4           3668              LEA     MSG_A,A1
00003088  103C 000E               3669              MOVE.B  #14,D0
0000308C  4E4F                    3670              TRAP    #15
0000308E                          3671              
0000308E                          3672              * GET DESTINATION REGISTER #
0000308E  4287                    3673              CLR.L   D7
00003090  3E12                    3674              MOVE.W  (A2),D7
00003092  7609                    3675              MOVE.L  #9,D3 
00003094  E66F                    3676              LSR.W   D3,D7
00003096  EB0F                    3677              LSL.B   #5,D7
00003098  EA0F                    3678              LSR.B   #5,D7
0000309A                          3679              
0000309A                          3680              * PRINT DESTINATION REGISTER
0000309A  7410                    3681              MOVE.L  #16,D2
0000309C  2207                    3682              MOVE.L  D7,D1
0000309E  103C 000F               3683              MOVE.B  #15,D0
000030A2  4E4F                    3684              TRAP    #15
000030A4                          3685              
000030A4                          3686              * PRINT RIGHT PARENTHESIS
000030A4  43F9 000033F8           3687              LEA     R_PAREN,A1
000030AA  103C 000E               3688              MOVE.B  #14,D0
000030AE  4E4F                    3689              TRAP    #15
000030B0                          3690              
000030B0                          3691              * PRINT PLUS
000030B0  43F9 000033FE           3692              LEA     PLUS,A1
000030B6  103C 000E               3693              MOVE.B  #14,D0
000030BA  4E4F                    3694              TRAP    #15
000030BC  6000 0160               3695              BRA EXIT    
000030C0                          3696  
000030C0                          3697  ADDY_R_SPD                              *SOURCE -(An)
000030C0                          3698              * PRINT MINUS
000030C0  43F9 00003400           3699              LEA     MINUS,A1
000030C6  103C 000E               3700              MOVE.B  #14,D0
000030CA  4E4F                    3701              TRAP    #15
000030CC                          3702              
000030CC                          3703              * PRINT LEFT PARENTHESIS
000030CC  43F9 000033F6           3704              LEA     L_PAREN,A1
000030D2  103C 000E               3705              MOVE.B  #14,D0
000030D6  4E4F                    3706              TRAP    #15
000030D8                          3707              
000030D8                          3708              * PRINT A
000030D8  43F9 000033F4           3709              LEA     MSG_A,A1
000030DE  103C 000E               3710              MOVE.B  #14,D0
000030E2  4E4F                    3711              TRAP    #15
000030E4                          3712              
000030E4                          3713              * GET SOURCE REGISTER #
000030E4  4287                    3714              CLR.L   D7
000030E6  3E12                    3715              MOVE.W  (A2),D7
000030E8  760D                    3716              MOVE.L  #13,D3              *prepare to move D7 by 13 bits to get source
000030EA  E76F                    3717              LSL.W  D3,D7
000030EC  E66F                    3718              LSR.W  D3,D7
000030EE                          3719              
000030EE                          3720              * PRINT SOURCE REGISTER
000030EE  7410                    3721              MOVE.L  #16,D2
000030F0  2207                    3722              MOVE.L  D7,D1
000030F2  103C 000F               3723              MOVE.B  #15,D0
000030F6  4E4F                    3724              TRAP    #15
000030F8                          3725              
000030F8                          3726              * PRINT RIGHT PARENTHESIS
000030F8  43F9 000033F8           3727              LEA     R_PAREN,A1
000030FE  103C 000E               3728              MOVE.B  #14,D0
00003102  4E4F                    3729              TRAP    #15
00003104  6000 0118               3730              BRA EXIT  
00003108                          3731           
00003108                          3732  ADDY_R_DPD                              *DESTINATION -(An)
00003108                          3733              * PRINT MINUS
00003108  43F9 00003400           3734              LEA     MINUS,A1
0000310E  103C 000E               3735              MOVE.B  #14,D0
00003112  4E4F                    3736              TRAP    #15
00003114                          3737              
00003114                          3738              * PRINT LEFT PARENTHESIS
00003114  43F9 000033F6           3739              LEA     L_PAREN,A1
0000311A  103C 000E               3740              MOVE.B  #14,D0
0000311E  4E4F                    3741              TRAP    #15
00003120                          3742  
00003120                          3743              * PRINT A
00003120  43F9 000033F4           3744              LEA     MSG_A,A1
00003126  103C 000E               3745              MOVE.B  #14,D0
0000312A  4E4F                    3746              TRAP    #15
0000312C                          3747              
0000312C                          3748              * GET DESTINATION REGISTER #
0000312C  4287                    3749              CLR.L   D7
0000312E  3E12                    3750              MOVE.W  (A2),D7
00003130  7609                    3751              MOVE.L  #9,D3
00003132  E66F                    3752              LSR.W   D3,D7
00003134  EB0F                    3753              LSL.B   #5,D7
00003136  EA0F                    3754              LSR.B   #5,D7
00003138                          3755              
00003138                          3756              * PRINT DESTINATION REGISTER
00003138  7410                    3757              MOVE.L  #16,D2
0000313A  2207                    3758              MOVE.L  D7,D1
0000313C  103C 000F               3759              MOVE.B  #15,D0
00003140  4E4F                    3760              TRAP    #15
00003142                          3761              
00003142                          3762              * PRINT RIGHT PARENTHESIS
00003142  43F9 000033F8           3763              LEA     R_PAREN,A1
00003148  103C 000E               3764              MOVE.B  #14,D0
0000314C  4E4F                    3765              TRAP    #15
0000314E  6000 00CE               3766              BRA EXIT  
00003152                          3767    
00003152                          3768  DATA_R_S                                *SOURCE Dn
00003152                          3769              * PRINT D
00003152  43F9 000033F2           3770              LEA     MSG_D,A1
00003158  103C 000E               3771              MOVE.B  #14,D0
0000315C  4E4F                    3772              TRAP    #15
0000315E                          3773              
0000315E                          3774              * GET SOURCE REGISTER #
0000315E  4287                    3775              CLR.L   D7
00003160  3E12                    3776              MOVE.W  (A2),D7
00003162  760D                    3777              MOVE.L  #13,D3              *prepare to move D7 by 13 bits to get source register
00003164  E76F                    3778              LSL.W  D3,D7
00003166  E66F                    3779              LSR.W  D3,D7
00003168                          3780              
00003168                          3781              * PRINT SOURCE REGISTER
00003168  7410                    3782              MOVE.L  #16,D2
0000316A  2207                    3783              MOVE.L  D7,D1
0000316C  103C 000F               3784              MOVE.B  #15,D0
00003170  4E4F                    3785              TRAP    #15
00003172  6000 00AA               3786              BRA EXIT                    * MOVE MODE SRC SUBROUTINE END
00003176                          3787              
00003176                          3788  DATA_R_D                                *DESTINATION Dn
00003176                          3789              * PRINT D
00003176  43F9 000033F2           3790              LEA     MSG_D,A1
0000317C  103C 000E               3791              MOVE.B  #14,D0
00003180  4E4F                    3792              TRAP    #15
00003182                          3793              
00003182                          3794              * GET REGISTER #
00003182  4287                    3795              CLR.L   D7
00003184  3E12                    3796              MOVE.W  (A2),D7
00003186  7609                    3797              MOVE.L  #9,D3
00003188  E66F                    3798              LSR.W   D3,D7
0000318A  EB0F                    3799              LSL.B   #5,D7
0000318C  EA0F                    3800              LSR.B   #5,D7
0000318E                          3801              
0000318E                          3802              * PRINT REGISTER
0000318E  7410                    3803              MOVE.L  #16,D2
00003190  2207                    3804              MOVE.L  D7,D1
00003192  103C 000F               3805              MOVE.B  #15,D0
00003196  4E4F                    3806              TRAP    #15
00003198  6000 0084               3807              BRA EXIT                    * MOVE MODE DEST SUBROUTINE END
0000319C                          3808        
0000319C                          3809  * Size matching for logical shifts, arithmetic shifts, and rotates (MEMORY)
0000319C                          3810  MATCH_SIZE_MEMLAR
0000319C  6000 002A               3811              BRA     WORD
000031A0                          3812              
000031A0                          3813  * Size matching for logical shifts, arithmetic shifts, and rotates (REGISTER)
000031A0                          3814  MATCH_SIZE_LAR
000031A0                          3815  
000031A0  BE7C 0000               3816              CMP.W   #$0000,D7
000031A4  6700 0012               3817              BEQ     BYTE
000031A8                          3818              
000031A8  BE7C 0040               3819              CMP.W   #$0040,D7
000031AC  6700 001A               3820              BEQ     WORD
000031B0                          3821              
000031B0  BE7C 0080               3822              CMP.W   #$0080,D7
000031B4  6700 0022               3823              BEQ     LONG
000031B8                          3824              
000031B8                          3825  BYTE
000031B8  43F9 0000339E           3826              LEA     MSG_BYTE,A1
000031BE  103C 000E               3827              MOVE.B  #14,D0
000031C2  4E4F                    3828              TRAP    #15
000031C4  6000 0058               3829              BRA     EXIT
000031C8                          3830  
000031C8                          3831  WORD
000031C8  43F9 000033A2           3832              LEA     MSG_WORD,A1
000031CE  103C 000E               3833              MOVE.B  #14,D0
000031D2  4E4F                    3834              TRAP    #15
000031D4  6000 0048               3835              BRA     EXIT
000031D8                          3836  
000031D8                          3837  LONG
000031D8  43F9 000033A6           3838              LEA     MSG_LONG,A1
000031DE  103C 000E               3839              MOVE.B  #14,D0
000031E2  4E4F                    3840              TRAP    #15
000031E4  6000 0038               3841              BRA     EXIT
000031E8                          3842  
000031E8                          3843  * HANDLE INVALID EA SUBROUTINES
000031E8                          3844  INVALID_EA            
000031E8  1C3C 0001               3845              MOVE.B  #$1,D6          
000031EC  6000 0030               3846              BRA     EXIT
000031F0                          3847              
000031F0                          3848  INVALID_EA_T2            
000031F0  43F9 00003327           3849              LEA     SPACE,A1
000031F6  103C 000E               3850              MOVE.B  #14,D0
000031FA  4E4F                    3851              TRAP    #15
000031FC                          3852              
000031FC  43F9 000033E7           3853              LEA     MSG_INV_EA,A1
00003202  4E4F                    3854              TRAP    #15
00003204                          3855              
00003204  284A                    3856              MOVEA.L A2,A4
00003206  548C                    3857              ADDA.L  #$2,A4
00003208                          3858              
00003208  6000 0014               3859              BRA     EXIT  
0000320C                          3860              
0000320C                          3861  INVAL_EA_NO_RTS
0000320C                          3862             
0000320C  43F9 000033E7           3863              LEA     MSG_INV_EA,A1
00003212  4E4F                    3864              TRAP    #15
00003214                          3865              
00003214  244C                    3866              MOVEA.L A4,A2           * move A3 to A2 since absolute address may have been used
00003216  548A                    3867              ADDA.L  #$2,A2          * Increase counter by long
00003218  4287                    3868              CLR.L   D7
0000321A  6000 E01C               3869              BRA     INCREMENT            
0000321E                          3870  
0000321E                          3871  EXIT        
0000321E  4E75                    3872              RTS
00003220                          3873                
00003220                          3874  *====================================================================
00003220                          3875  *            End of Program 
00003220                          3876  *====================================================================                
00003220                          3877  
00003220  43F9 0000340E           3878  END         LEA     NEW_LOAD,A1     * Ask if user wants another memory image read 
00003226  103C 000E               3879              MOVE.B  #14,D0
0000322A  4E4F                    3880              TRAP    #15
0000322C                          3881              
0000322C                          3882              
0000322C  103C 0005               3883              MOVE.B  #5,D0
00003230  4E4F                    3884              TRAP    #15
00003232                          3885              
00003232  B23C 0079               3886              CMP.B   #$79,D1
00003236  6700 0006               3887              BEQ     PREP_FOR_START
0000323A  FFFF FFFF               3888              SIMHALT
0000323E                          3889                  
0000323E                          3890  PREP_FOR_START                      * If another memory location must be read prep to do so
0000323E  43F9 00003402           3891              LEA     BLANK,A1
00003244  103C 000E               3892              MOVE.B  #14,D0
00003248  4E4F                    3893              TRAP    #15
0000324A                          3894  
0000324A  6000 DDB4               3895              BRA     START
0000324E                          3896        
0000324E                          3897  * ----------------ASCII Codes-----------------
0000324E  =0000000D               3898  CR          EQU     $0D             * ASCII code for Carriage Return
0000324E  =0000000A               3899  LF          EQU     $0A             * ASCII code for Line Feed
0000324E                          3900  
0000324E                          3901  * -------Defined Messages and Variables-------
0000324E= 50 6C 65 61 73 65 ...   3902  DIRECTIONS  DC.B    'Please Enter 6-Digit Hex Address Between 000000 & FFFFF0.',CR,LF,0
0000328A= 45 6E 74 65 72 20 ...   3903  PROMPT1     DC.B    'Enter Startng Address: ',0
000032A2= 45 6E 74 65 72 20 ...   3904  PROMPT2     DC.B    'Enter Ending Address: ',0
000032B9= 49 6E 63 6F 72 72 ...   3905  ERROR_MSG   DC.B    'Incorrect address input. Please re-enter.',CR,LF,0
000032E5= 43 6F 6E 74 69 6E ...   3906  ASK         DC.B    'Continue Reading File, Press Enter!',0
00003309= 20 20 20 52 54 53 00    3907  MSG_RTS     DC.B    '   RTS',0
00003310= 20 20 20 4A 53 52 00    3908  MSG_JSR     DC.B    '   JSR',0
00003317= 20 20 20 44 41 54 ...   3909  UNKNOWN     DC.B    '   DATA',0
0000331F= 20 44 41 54 41 00       3910  MOVEMDATA   DC.B    ' DATA',0
00003325= 30 00                   3911  ZERO        DC.B    '0',0
00003327= 20 20 20 00             3912  SPACE       DC.B    '   ',0
0000332B= 20 20 00                3913  SM_SPACE    DC.B    '  ',0
0000332E= 20 00                   3914  T_SPACE     DC.B    ' ',0
00003330= 20 20 20 4C 53 4C 00    3915  MSG_LSL     DC.B    '   LSL',0
00003337= 20 20 20 4C 53 52 00    3916  MSG_LSR     DC.B    '   LSR',0
0000333E= 20 20 20 41 53 4C 00    3917  MSG_ASL     DC.B    '   ASL',0
00003345= 20 20 20 41 53 52 00    3918  MSG_ASR     DC.B    '   ASR',0
0000334C= 20 20 20 4E 4F 54 00    3919  MSG_NOT     DC.B    '   NOT',0
00003353= 20 20 20 42 52 41 00    3920  MSG_BRA     DC.B    '   BRA',0
0000335A= 20 20 20 42 47 54 00    3921  MSG_BGT     DC.B    '   BGT',0
00003361= 20 20 20 42 4C 45 00    3922  MSG_BLE     DC.B    '   BLE',0
00003368= 20 20 20 42 45 51 00    3923  MSG_BEQ     DC.B    '   BEQ',0
0000336F= 20 20 20 52 4F 52 00    3924  MSG_ROR     DC.B    '   ROR',0
00003376= 20 20 20 52 4F 4C 00    3925  MSG_ROL     DC.B    '   ROL',0
0000337D= 20 20 20 4E 4F 50 00    3926  MSG_NOP     DC.B    '   NOP',0
00003384= 20 20 20 4D 4F 56 ...   3927  MSG_MOVEM   DC.B    '   MOVEM',0
0000338D= 20 20 20 4D 4F 56 ...   3928  MSG_MOVEQ   DC.B    '   MOVEQ',0
00003396= 20 20 20 4D 4F 56 ...   3929  MSG_MOVE    DC.B    '   MOVE',0
0000339E= 2E 42 20 00             3930  MSG_BYTE    DC.B    '.B ',0
000033A2= 2E 57 20 00             3931  MSG_WORD    DC.B    '.W ',0
000033A6= 2E 4C 20 00             3932  MSG_LONG    DC.B    '.L ',0
000033AA= 2C 00                   3933  MSG_COMMA   DC.B    ',',0
000033AC= 20 20 20 4D 4F 56 ...   3934  MSG_MOVEA   DC.B    '   MOVEA',0
000033B5= 20 20 20 41 44 44 00    3935  MSG_ADD     DC.B    '   ADD',0
000033BC= 20 20 20 41 44 44 ...   3936  MSG_ADDA    DC.B    '   ADDA',0
000033C4= 20 20 20 41 44 44 ...   3937  MSG_ADDQ    DC.B    '   ADDQ',0
000033CC= 20 20 20 53 55 42 00    3938  MSG_SUB     DC.B    '   SUB',0
000033D3= 20 20 20 4C 45 41 00    3939  MSG_LEA     DC.B    '   LEA',0
000033DA= 20 20 20 41 4E 44 00    3940  MSG_AND     DC.B    '   AND',0
000033E1= 20 20 20 4F 52 00       3941  MSG_OR      DC.B    '   OR',0
000033E7= 49 4E 56 41 4C 49 ...   3942  MSG_INV_EA  DC.B    'INVALID EA',0
000033F2= 44 00                   3943  MSG_D       DC.B    'D',0
000033F4= 41 00                   3944  MSG_A       DC.B    'A',0
000033F6= 28 00                   3945  L_PAREN     DC.B    '(',0
000033F8= 29 00                   3946  R_PAREN     DC.B    ')',0
000033FA= 24 00                   3947  HEX_SIGN    DC.B    '$',0
000033FC= 23 00                   3948  HASH_SIGN   DC.B    '#',0
000033FE= 2B 00                   3949  PLUS        DC.B    '+',0
00003400= 2D 00                   3950  MINUS       DC.B    '-',0
00003402= 20 0D 0A 00             3951  BLANK       DC.B    ' ',CR,LF,0
00003406                          3952  BEGIN       DS.L    1
0000340A                          3953  FIN         DS.L    1
0000340E= 41 6E 6F 74 68 65 ...   3954  NEW_LOAD    DC.B    'Another memory image? y or n',0
0000342B                          3955  
0000342B                          3956              END    START 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_IMM_DATA_S     1ACE
ADDA_P_SRC_EA       1A6C
ADDA_SIZE_SUB       1B4E
ADDQ_DATA_SUB       1C0C
ADDQ_SIZE_SUB       1BEE
ADDY_R_DNP          2F90
ADDY_R_DP           2FF0
ADDY_R_DPD          3108
ADDY_R_DPI          3076
ADDY_R_SNP          2F6C
ADDY_R_SP           2FB4
ADDY_R_SPD          30C0
ADDY_R_SPI          302E
ADD_SIZE_SUB        19A2
AI_M_S              1AAA
AL                  1830
AND_ADDY_R_SNP      2C9C
AND_IMM_DATA_S      2C5E
AND_IMM_REG_D       2CC8
AND_IMM_REG_S       2C3A
AND_PRINT_DEST_EA   2C04
AND_PRINT_SRC_EA    2BCC
AND_SIZE_SUB        294A
ASHIFT              17E8
ASK                 32E5
ASK_CONTINUE        1252
BEGIN               3406
BLANK               3402
BYTE                31B8
CHARACTER1          1070
CHARACTER2          10AA
CHECK               10BE
COMBINE1            1074
COMBINE2            10AE
CONVERTHEX1         1052
CONVERTHEX2         108C
CR                  D
DATA_R_D            3176
DATA_R_S            3152
DEST_AND_EA         2B66
DEST_SUBTR_EA       1F9A
DIRECTIONS          324E
DONE                1112
EA_BEQ_WORD         2516
EA_BGT_WORD         242E
EA_BLE_WORD         24A2
EA_BRA_WORD         1692
EA_JSR_ABS          135E
EA_JSR_ADDREG       12F4
EA_JSR_LONG         138E
EA_MEM_ABS          2810
EA_MEM_ABS_LONG     2846
EA_MEM_ADDREG       2734
EA_MEM_POST         2778
EA_MEM_PRE          27C4
EA_MEM_SHIFT_ROTATE  26FA
EA_SHIFT_ROTATE     2882
END                 3220
ERROR_MSG           32B9
EXIT                321E
FIN                 340A
F_AND_DN            2BA6
F_SUBTR_DN          1FDA
F_SUBTR_DN_SRC      2000
GOOD                2E0C
HASH_SIGN           33FC
HEX_SIGN            33FA
IMM_DATA_S          2EDE
IMM_DATA_SL         2F02
IMM_DATA_SW         2F28
IMM_REG_D           2F4C
IMM_REG_FSIXB       1CC6
IMM_REG_S           2E78
INCREMENT           1238
INITHEX2            1084
INPUT_ERR           10EE
INVALID_EA          31E8
INVALID_EA_T2       31F0
INVAL_EA_NO_RTS     320C
LEAS_IMM_REG        2308
LEA_EAS             22CA
LF                  A
LL                  17AA
LONG                31D8
LSHIFT              1762
L_ADDY              2EBC
L_PAREN             33F6
MAIN_LOOP           112A
MATCH_ADD           18F2
MATCH_ADDA          19DC
MATCH_ADDQ          1B68
MATCH_AND           2144
MATCH_BCC           23C4
MATCH_BEQ           24CC
MATCH_BGT           23E4
MATCH_BLE           2458
MATCH_BRA           1648
MATCH_JSR           12B2
MATCH_LEA           21E4
MATCH_MEMASHIFTL    14DE
MATCH_MEMASHIFTR    14A4
MATCH_MEMLSHIFTL    146A
MATCH_MEMLSHIFTR    1430
MATCH_MEMROL        13F6
MATCH_MEMROR        13BC
MATCH_MOVE          2540
MATCH_MOVEA         25F6
MATCH_MOVEM         269A
MATCH_MOVEQ         186E
MATCH_NOP           1296
MATCH_NOT           1518
MATCH_OR            2324
MATCH_RTS           127A
MATCH_SHIFT         16BC
MATCH_SIZE_LAR      31A0
MATCH_SIZE_MEMLAR   319C
MATCH_SUB           1CE2
MINUS               3400
MOVEA_SIZE_SUB      2D04
MOVEMDATA           331F
MOVEM_SIZE_SUB      2D1C
MOVE_MODE_DEST      2E46
MOVE_SIZE_SUB       2CE4
MSG_A               33F4
MSG_ADD             33B5
MSG_ADDA            33BC
MSG_ADDQ            33C4
MSG_AND             33DA
MSG_ASL             333E
MSG_ASR             3345
MSG_BEQ             3368
MSG_BGT             335A
MSG_BLE             3361
MSG_BRA             3353
MSG_BYTE            339E
MSG_COMMA           33AA
MSG_D               33F2
MSG_INV_EA          33E7
MSG_JSR             3310
MSG_LEA             33D3
MSG_LONG            33A6
MSG_LSL             3330
MSG_LSR             3337
MSG_MOVE            3396
MSG_MOVEA           33AC
MSG_MOVEM           3384
MSG_MOVEQ           338D
MSG_NOP             337D
MSG_NOT             334C
MSG_OR              33E1
MSG_ROL             3376
MSG_ROR             336F
MSG_RTS             3309
MSG_SUB             33CC
MSG_WORD            33A2
NEW_LOAD            340E
NOOP                11FE
NOT_EA              15EE
NOT_IMM_REG         162C
NUMBER1             1068
NUMBER2             10A2
PLUS                33FE
PREP_FOR_START      323E
PRINT_EA_FSIXB      1C8E
PRINT_SRC_EA        2E0E
PROMPT1             328A
PROMPT2             32A2
REG_SHIFT           28F4
RL                  1724
ROTATE              16DC
R_PAREN             33F8
SHIFT_DEST          292A
SHIFT_EIGHT         28D6
SIZE_NOT            157A
SM_SPACE            332B
SOURCE_AND_EA       2B28
SOURCE_SUBTR_EA     1F5C
SPACE               3327
START               1000
START_PRG           1000
SUBTR_ADDY_R_SNP    20FC
SUBTR_IMM_DATA_S    20BE
SUBTR_IMM_REG_D     2128
SUBTR_IMM_REG_S     209A
SUBTR_PRINT_DEST_EA  205E
SUBTR_PRINT_SRC_EA  2026
SUBT_SIZE_SUB       1D7E
T_ADDA_IMM_REG_S    1B2A
T_ADDA_PRINT_SRC_EA  1AEC
T_AND_ADDY_R_SNP    2AE0
T_AND_IMM_DATA_S    2AA4
T_AND_IMM_REG_D     2B0C
T_AND_IMM_REG_S     2A80
T_AND_PRINT_DEST_EA  2A44
T_AND_PRINT_SRC_EA  2A06
T_DEST_AND_EA       29C6
T_DEST_SUBTR_EA     1DFA
T_IMM_DATA_S        2DCA
T_IMM_REG_D         2DEC
T_IMM_REG_FSIXB     1C72
T_IMM_REG_S         2DA6
T_LEAS_EA           2270
T_LEAS_IMM_REG      22AE
T_MOVE_MODE_DEST    2D6C
T_NOT_EA            1594
T_NOT_IMM_REG       15D2
T_PRINT_EA_FSIXB    1C38
T_PRINT_SRC_EA      2D34
T_SOURCE_AND_EA     2988
T_SOURCE_SUBTR_EA   1DBC
T_SPACE             332E
T_SUBTR_ADDY_R_SNP  1F14
T_SUBTR_IMM_DATA_S  1ED8
T_SUBTR_IMM_REG_D   1F40
T_SUBTR_IMM_REG_S   1EB4
T_SUBTR_PRINT_DEST_EA  1E78
T_SUBTR_PRINT_SRC_EA  1E3A
UNKNOWN             3317
USER_INPUT          1260
VERIFY_ABS          1334
WORD                31C8
W_ADDY              2E9C
ZERO                3325
